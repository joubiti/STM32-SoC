
PIL Delay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bb84  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  0800bd10  0800bd10  0001bd10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bd80  0800bd80  00020394  2**0
                  CONTENTS
  4 .ARM          00000008  0800bd80  0800bd80  0001bd80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bd88  0800bd88  00020394  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bd88  0800bd88  0001bd88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bd8c  0800bd8c  0001bd8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000394  20000000  0800bd90  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020394  2**0
                  CONTENTS
 10 .bss          000009b4  20000398  20000398  00020398  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20000d4c  20000d4c  00020398  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020394  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a9bd  00000000  00000000  000203c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003fc9  00000000  00000000  0003ad81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001408  00000000  00000000  0003ed50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001260  00000000  00000000  00040158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024a4c  00000000  00000000  000413b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c210  00000000  00000000  00065e04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cf041  00000000  00000000  00082014  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00151055  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000590c  00000000  00000000  001510a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000398 	.word	0x20000398
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800bcf4 	.word	0x0800bcf4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000039c 	.word	0x2000039c
 80001c4:	0800bcf4 	.word	0x0800bcf4

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2iz>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a8c:	d215      	bcs.n	8000aba <__aeabi_d2iz+0x36>
 8000a8e:	d511      	bpl.n	8000ab4 <__aeabi_d2iz+0x30>
 8000a90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d912      	bls.n	8000ac0 <__aeabi_d2iz+0x3c>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	bf18      	it	ne
 8000ab0:	4240      	negne	r0, r0
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d105      	bne.n	8000acc <__aeabi_d2iz+0x48>
 8000ac0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	bf08      	it	eq
 8000ac6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2uiz>:
 8000ad4:	004a      	lsls	r2, r1, #1
 8000ad6:	d211      	bcs.n	8000afc <__aeabi_d2uiz+0x28>
 8000ad8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000adc:	d211      	bcs.n	8000b02 <__aeabi_d2uiz+0x2e>
 8000ade:	d50d      	bpl.n	8000afc <__aeabi_d2uiz+0x28>
 8000ae0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ae4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae8:	d40e      	bmi.n	8000b08 <__aeabi_d2uiz+0x34>
 8000aea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000af2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000af6:	fa23 f002 	lsr.w	r0, r3, r2
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b06:	d102      	bne.n	8000b0e <__aeabi_d2uiz+0x3a>
 8000b08:	f04f 30ff 	mov.w	r0, #4294967295
 8000b0c:	4770      	bx	lr
 8000b0e:	f04f 0000 	mov.w	r0, #0
 8000b12:	4770      	bx	lr

08000b14 <__aeabi_uldivmod>:
 8000b14:	b953      	cbnz	r3, 8000b2c <__aeabi_uldivmod+0x18>
 8000b16:	b94a      	cbnz	r2, 8000b2c <__aeabi_uldivmod+0x18>
 8000b18:	2900      	cmp	r1, #0
 8000b1a:	bf08      	it	eq
 8000b1c:	2800      	cmpeq	r0, #0
 8000b1e:	bf1c      	itt	ne
 8000b20:	f04f 31ff 	movne.w	r1, #4294967295
 8000b24:	f04f 30ff 	movne.w	r0, #4294967295
 8000b28:	f000 b974 	b.w	8000e14 <__aeabi_idiv0>
 8000b2c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b30:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b34:	f000 f806 	bl	8000b44 <__udivmoddi4>
 8000b38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b40:	b004      	add	sp, #16
 8000b42:	4770      	bx	lr

08000b44 <__udivmoddi4>:
 8000b44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b48:	9d08      	ldr	r5, [sp, #32]
 8000b4a:	4604      	mov	r4, r0
 8000b4c:	468e      	mov	lr, r1
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d14d      	bne.n	8000bee <__udivmoddi4+0xaa>
 8000b52:	428a      	cmp	r2, r1
 8000b54:	4694      	mov	ip, r2
 8000b56:	d969      	bls.n	8000c2c <__udivmoddi4+0xe8>
 8000b58:	fab2 f282 	clz	r2, r2
 8000b5c:	b152      	cbz	r2, 8000b74 <__udivmoddi4+0x30>
 8000b5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000b62:	f1c2 0120 	rsb	r1, r2, #32
 8000b66:	fa20 f101 	lsr.w	r1, r0, r1
 8000b6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000b72:	4094      	lsls	r4, r2
 8000b74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b78:	0c21      	lsrs	r1, r4, #16
 8000b7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000b7e:	fa1f f78c 	uxth.w	r7, ip
 8000b82:	fb08 e316 	mls	r3, r8, r6, lr
 8000b86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b8a:	fb06 f107 	mul.w	r1, r6, r7
 8000b8e:	4299      	cmp	r1, r3
 8000b90:	d90a      	bls.n	8000ba8 <__udivmoddi4+0x64>
 8000b92:	eb1c 0303 	adds.w	r3, ip, r3
 8000b96:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b9a:	f080 811f 	bcs.w	8000ddc <__udivmoddi4+0x298>
 8000b9e:	4299      	cmp	r1, r3
 8000ba0:	f240 811c 	bls.w	8000ddc <__udivmoddi4+0x298>
 8000ba4:	3e02      	subs	r6, #2
 8000ba6:	4463      	add	r3, ip
 8000ba8:	1a5b      	subs	r3, r3, r1
 8000baa:	b2a4      	uxth	r4, r4
 8000bac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bb0:	fb08 3310 	mls	r3, r8, r0, r3
 8000bb4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bb8:	fb00 f707 	mul.w	r7, r0, r7
 8000bbc:	42a7      	cmp	r7, r4
 8000bbe:	d90a      	bls.n	8000bd6 <__udivmoddi4+0x92>
 8000bc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bc8:	f080 810a 	bcs.w	8000de0 <__udivmoddi4+0x29c>
 8000bcc:	42a7      	cmp	r7, r4
 8000bce:	f240 8107 	bls.w	8000de0 <__udivmoddi4+0x29c>
 8000bd2:	4464      	add	r4, ip
 8000bd4:	3802      	subs	r0, #2
 8000bd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bda:	1be4      	subs	r4, r4, r7
 8000bdc:	2600      	movs	r6, #0
 8000bde:	b11d      	cbz	r5, 8000be8 <__udivmoddi4+0xa4>
 8000be0:	40d4      	lsrs	r4, r2
 8000be2:	2300      	movs	r3, #0
 8000be4:	e9c5 4300 	strd	r4, r3, [r5]
 8000be8:	4631      	mov	r1, r6
 8000bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bee:	428b      	cmp	r3, r1
 8000bf0:	d909      	bls.n	8000c06 <__udivmoddi4+0xc2>
 8000bf2:	2d00      	cmp	r5, #0
 8000bf4:	f000 80ef 	beq.w	8000dd6 <__udivmoddi4+0x292>
 8000bf8:	2600      	movs	r6, #0
 8000bfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000bfe:	4630      	mov	r0, r6
 8000c00:	4631      	mov	r1, r6
 8000c02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c06:	fab3 f683 	clz	r6, r3
 8000c0a:	2e00      	cmp	r6, #0
 8000c0c:	d14a      	bne.n	8000ca4 <__udivmoddi4+0x160>
 8000c0e:	428b      	cmp	r3, r1
 8000c10:	d302      	bcc.n	8000c18 <__udivmoddi4+0xd4>
 8000c12:	4282      	cmp	r2, r0
 8000c14:	f200 80f9 	bhi.w	8000e0a <__udivmoddi4+0x2c6>
 8000c18:	1a84      	subs	r4, r0, r2
 8000c1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000c1e:	2001      	movs	r0, #1
 8000c20:	469e      	mov	lr, r3
 8000c22:	2d00      	cmp	r5, #0
 8000c24:	d0e0      	beq.n	8000be8 <__udivmoddi4+0xa4>
 8000c26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c2a:	e7dd      	b.n	8000be8 <__udivmoddi4+0xa4>
 8000c2c:	b902      	cbnz	r2, 8000c30 <__udivmoddi4+0xec>
 8000c2e:	deff      	udf	#255	; 0xff
 8000c30:	fab2 f282 	clz	r2, r2
 8000c34:	2a00      	cmp	r2, #0
 8000c36:	f040 8092 	bne.w	8000d5e <__udivmoddi4+0x21a>
 8000c3a:	eba1 010c 	sub.w	r1, r1, ip
 8000c3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c42:	fa1f fe8c 	uxth.w	lr, ip
 8000c46:	2601      	movs	r6, #1
 8000c48:	0c20      	lsrs	r0, r4, #16
 8000c4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000c52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c56:	fb0e f003 	mul.w	r0, lr, r3
 8000c5a:	4288      	cmp	r0, r1
 8000c5c:	d908      	bls.n	8000c70 <__udivmoddi4+0x12c>
 8000c5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000c62:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c66:	d202      	bcs.n	8000c6e <__udivmoddi4+0x12a>
 8000c68:	4288      	cmp	r0, r1
 8000c6a:	f200 80cb 	bhi.w	8000e04 <__udivmoddi4+0x2c0>
 8000c6e:	4643      	mov	r3, r8
 8000c70:	1a09      	subs	r1, r1, r0
 8000c72:	b2a4      	uxth	r4, r4
 8000c74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c78:	fb07 1110 	mls	r1, r7, r0, r1
 8000c7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c80:	fb0e fe00 	mul.w	lr, lr, r0
 8000c84:	45a6      	cmp	lr, r4
 8000c86:	d908      	bls.n	8000c9a <__udivmoddi4+0x156>
 8000c88:	eb1c 0404 	adds.w	r4, ip, r4
 8000c8c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c90:	d202      	bcs.n	8000c98 <__udivmoddi4+0x154>
 8000c92:	45a6      	cmp	lr, r4
 8000c94:	f200 80bb 	bhi.w	8000e0e <__udivmoddi4+0x2ca>
 8000c98:	4608      	mov	r0, r1
 8000c9a:	eba4 040e 	sub.w	r4, r4, lr
 8000c9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ca2:	e79c      	b.n	8000bde <__udivmoddi4+0x9a>
 8000ca4:	f1c6 0720 	rsb	r7, r6, #32
 8000ca8:	40b3      	lsls	r3, r6
 8000caa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000cb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000cba:	431c      	orrs	r4, r3
 8000cbc:	40f9      	lsrs	r1, r7
 8000cbe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cc2:	fa00 f306 	lsl.w	r3, r0, r6
 8000cc6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000cca:	0c20      	lsrs	r0, r4, #16
 8000ccc:	fa1f fe8c 	uxth.w	lr, ip
 8000cd0:	fb09 1118 	mls	r1, r9, r8, r1
 8000cd4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cd8:	fb08 f00e 	mul.w	r0, r8, lr
 8000cdc:	4288      	cmp	r0, r1
 8000cde:	fa02 f206 	lsl.w	r2, r2, r6
 8000ce2:	d90b      	bls.n	8000cfc <__udivmoddi4+0x1b8>
 8000ce4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ce8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cec:	f080 8088 	bcs.w	8000e00 <__udivmoddi4+0x2bc>
 8000cf0:	4288      	cmp	r0, r1
 8000cf2:	f240 8085 	bls.w	8000e00 <__udivmoddi4+0x2bc>
 8000cf6:	f1a8 0802 	sub.w	r8, r8, #2
 8000cfa:	4461      	add	r1, ip
 8000cfc:	1a09      	subs	r1, r1, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d04:	fb09 1110 	mls	r1, r9, r0, r1
 8000d08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d10:	458e      	cmp	lr, r1
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x1e2>
 8000d14:	eb1c 0101 	adds.w	r1, ip, r1
 8000d18:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d1c:	d26c      	bcs.n	8000df8 <__udivmoddi4+0x2b4>
 8000d1e:	458e      	cmp	lr, r1
 8000d20:	d96a      	bls.n	8000df8 <__udivmoddi4+0x2b4>
 8000d22:	3802      	subs	r0, #2
 8000d24:	4461      	add	r1, ip
 8000d26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000d2e:	eba1 010e 	sub.w	r1, r1, lr
 8000d32:	42a1      	cmp	r1, r4
 8000d34:	46c8      	mov	r8, r9
 8000d36:	46a6      	mov	lr, r4
 8000d38:	d356      	bcc.n	8000de8 <__udivmoddi4+0x2a4>
 8000d3a:	d053      	beq.n	8000de4 <__udivmoddi4+0x2a0>
 8000d3c:	b15d      	cbz	r5, 8000d56 <__udivmoddi4+0x212>
 8000d3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000d42:	eb61 010e 	sbc.w	r1, r1, lr
 8000d46:	fa01 f707 	lsl.w	r7, r1, r7
 8000d4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000d4e:	40f1      	lsrs	r1, r6
 8000d50:	431f      	orrs	r7, r3
 8000d52:	e9c5 7100 	strd	r7, r1, [r5]
 8000d56:	2600      	movs	r6, #0
 8000d58:	4631      	mov	r1, r6
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	f1c2 0320 	rsb	r3, r2, #32
 8000d62:	40d8      	lsrs	r0, r3
 8000d64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d68:	fa21 f303 	lsr.w	r3, r1, r3
 8000d6c:	4091      	lsls	r1, r2
 8000d6e:	4301      	orrs	r1, r0
 8000d70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d74:	fa1f fe8c 	uxth.w	lr, ip
 8000d78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000d80:	0c0b      	lsrs	r3, r1, #16
 8000d82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d86:	fb00 f60e 	mul.w	r6, r0, lr
 8000d8a:	429e      	cmp	r6, r3
 8000d8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x260>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d9a:	d22f      	bcs.n	8000dfc <__udivmoddi4+0x2b8>
 8000d9c:	429e      	cmp	r6, r3
 8000d9e:	d92d      	bls.n	8000dfc <__udivmoddi4+0x2b8>
 8000da0:	3802      	subs	r0, #2
 8000da2:	4463      	add	r3, ip
 8000da4:	1b9b      	subs	r3, r3, r6
 8000da6:	b289      	uxth	r1, r1
 8000da8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000dac:	fb07 3316 	mls	r3, r7, r6, r3
 8000db0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000db4:	fb06 f30e 	mul.w	r3, r6, lr
 8000db8:	428b      	cmp	r3, r1
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x28a>
 8000dbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000dc0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000dc4:	d216      	bcs.n	8000df4 <__udivmoddi4+0x2b0>
 8000dc6:	428b      	cmp	r3, r1
 8000dc8:	d914      	bls.n	8000df4 <__udivmoddi4+0x2b0>
 8000dca:	3e02      	subs	r6, #2
 8000dcc:	4461      	add	r1, ip
 8000dce:	1ac9      	subs	r1, r1, r3
 8000dd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000dd4:	e738      	b.n	8000c48 <__udivmoddi4+0x104>
 8000dd6:	462e      	mov	r6, r5
 8000dd8:	4628      	mov	r0, r5
 8000dda:	e705      	b.n	8000be8 <__udivmoddi4+0xa4>
 8000ddc:	4606      	mov	r6, r0
 8000dde:	e6e3      	b.n	8000ba8 <__udivmoddi4+0x64>
 8000de0:	4618      	mov	r0, r3
 8000de2:	e6f8      	b.n	8000bd6 <__udivmoddi4+0x92>
 8000de4:	454b      	cmp	r3, r9
 8000de6:	d2a9      	bcs.n	8000d3c <__udivmoddi4+0x1f8>
 8000de8:	ebb9 0802 	subs.w	r8, r9, r2
 8000dec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000df0:	3801      	subs	r0, #1
 8000df2:	e7a3      	b.n	8000d3c <__udivmoddi4+0x1f8>
 8000df4:	4646      	mov	r6, r8
 8000df6:	e7ea      	b.n	8000dce <__udivmoddi4+0x28a>
 8000df8:	4620      	mov	r0, r4
 8000dfa:	e794      	b.n	8000d26 <__udivmoddi4+0x1e2>
 8000dfc:	4640      	mov	r0, r8
 8000dfe:	e7d1      	b.n	8000da4 <__udivmoddi4+0x260>
 8000e00:	46d0      	mov	r8, sl
 8000e02:	e77b      	b.n	8000cfc <__udivmoddi4+0x1b8>
 8000e04:	3b02      	subs	r3, #2
 8000e06:	4461      	add	r1, ip
 8000e08:	e732      	b.n	8000c70 <__udivmoddi4+0x12c>
 8000e0a:	4630      	mov	r0, r6
 8000e0c:	e709      	b.n	8000c22 <__udivmoddi4+0xde>
 8000e0e:	4464      	add	r4, ip
 8000e10:	3802      	subs	r0, #2
 8000e12:	e742      	b.n	8000c9a <__udivmoddi4+0x156>

08000e14 <__aeabi_idiv0>:
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop

08000e18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e18:	b5b0      	push	{r4, r5, r7, lr}
 8000e1a:	b08a      	sub	sp, #40	; 0x28
 8000e1c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e1e:	f000 fc99 	bl	8001754 <HAL_Init>

  /* USER CODE BEGIN Init */
  uint8_t output;
  char Message[] = "Welcome to Microcontrollers Lab\r\n"; /* Message to be transmitted through UART */
 8000e22:	4b1e      	ldr	r3, [pc, #120]	; (8000e9c <main+0x84>)
 8000e24:	1d3c      	adds	r4, r7, #4
 8000e26:	461d      	mov	r5, r3
 8000e28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e30:	682b      	ldr	r3, [r5, #0]
 8000e32:	8023      	strh	r3, [r4, #0]
  STMpil_initialize();
 8000e34:	f007 fd88 	bl	8008948 <STMpil_initialize>
  STMpil_U.In1= 48;
 8000e38:	4919      	ldr	r1, [pc, #100]	; (8000ea0 <main+0x88>)
 8000e3a:	f04f 0200 	mov.w	r2, #0
 8000e3e:	4b19      	ldr	r3, [pc, #100]	; (8000ea4 <main+0x8c>)
 8000e40:	e9c1 2300 	strd	r2, r3, [r1]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e44:	f000 f834 	bl	8000eb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e48:	f000 f95a 	bl	8001100 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000e4c:	f000 f89a 	bl	8000f84 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000e50:	f000 f8c6 	bl	8000fe0 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000e54:	f000 f8f4 	bl	8001040 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000e58:	f00a f8d0 	bl	800affc <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 8000e5c:	f000 f926 	bl	80010ac <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000e60:	f00a f8f2 	bl	800b048 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    STMpil_step();
 8000e64:	f005 fbcc 	bl	8006600 <STMpil_step>
    output= STMpil_Y.VoltageV;
 8000e68:	4b0f      	ldr	r3, [pc, #60]	; (8000ea8 <main+0x90>)
 8000e6a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8000e6e:	4610      	mov	r0, r2
 8000e70:	4619      	mov	r1, r3
 8000e72:	f7ff fe2f 	bl	8000ad4 <__aeabi_d2uiz>
 8000e76:	4603      	mov	r3, r0
 8000e78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    HAL_UART_Transmit(&huart2, (uint8_t *)Message, strlen(Message), 10);
 8000e7c:	1d3b      	adds	r3, r7, #4
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f7ff f9a2 	bl	80001c8 <strlen>
 8000e84:	4603      	mov	r3, r0
 8000e86:	b29a      	uxth	r2, r3
 8000e88:	1d39      	adds	r1, r7, #4
 8000e8a:	230a      	movs	r3, #10
 8000e8c:	4807      	ldr	r0, [pc, #28]	; (8000eac <main+0x94>)
 8000e8e:	f004 f85b 	bl	8004f48 <HAL_UART_Transmit>
    //HAL_GPIO_TogglePin(GPIOD, LD4_Pin);
    //HAL_Delay(rtY.SOC*100);
    HAL_Delay(100);
 8000e92:	2064      	movs	r0, #100	; 0x64
 8000e94:	f000 fcd0 	bl	8001838 <HAL_Delay>
    MX_USB_HOST_Process();
 8000e98:	e7e2      	b.n	8000e60 <main+0x48>
 8000e9a:	bf00      	nop
 8000e9c:	0800bd10 	.word	0x0800bd10
 8000ea0:	20000618 	.word	0x20000618
 8000ea4:	40480000 	.word	0x40480000
 8000ea8:	20000620 	.word	0x20000620
 8000eac:	200004a8 	.word	0x200004a8

08000eb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b094      	sub	sp, #80	; 0x50
 8000eb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eb6:	f107 0320 	add.w	r3, r7, #32
 8000eba:	2230      	movs	r2, #48	; 0x30
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f00a fbf4 	bl	800b6ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ec4:	f107 030c 	add.w	r3, r7, #12
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
 8000ece:	609a      	str	r2, [r3, #8]
 8000ed0:	60da      	str	r2, [r3, #12]
 8000ed2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	60bb      	str	r3, [r7, #8]
 8000ed8:	4b28      	ldr	r3, [pc, #160]	; (8000f7c <SystemClock_Config+0xcc>)
 8000eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000edc:	4a27      	ldr	r2, [pc, #156]	; (8000f7c <SystemClock_Config+0xcc>)
 8000ede:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ee2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ee4:	4b25      	ldr	r3, [pc, #148]	; (8000f7c <SystemClock_Config+0xcc>)
 8000ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eec:	60bb      	str	r3, [r7, #8]
 8000eee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	607b      	str	r3, [r7, #4]
 8000ef4:	4b22      	ldr	r3, [pc, #136]	; (8000f80 <SystemClock_Config+0xd0>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a21      	ldr	r2, [pc, #132]	; (8000f80 <SystemClock_Config+0xd0>)
 8000efa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000efe:	6013      	str	r3, [r2, #0]
 8000f00:	4b1f      	ldr	r3, [pc, #124]	; (8000f80 <SystemClock_Config+0xd0>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f08:	607b      	str	r3, [r7, #4]
 8000f0a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f10:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f14:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f16:	2302      	movs	r3, #2
 8000f18:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f1a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f20:	2308      	movs	r3, #8
 8000f22:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000f24:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000f28:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000f2e:	2307      	movs	r3, #7
 8000f30:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f32:	f107 0320 	add.w	r3, r7, #32
 8000f36:	4618      	mov	r0, r3
 8000f38:	f003 f958 	bl	80041ec <HAL_RCC_OscConfig>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000f42:	f000 f9db 	bl	80012fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f46:	230f      	movs	r3, #15
 8000f48:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f52:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f56:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f5c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f5e:	f107 030c 	add.w	r3, r7, #12
 8000f62:	2105      	movs	r1, #5
 8000f64:	4618      	mov	r0, r3
 8000f66:	f003 fbb9 	bl	80046dc <HAL_RCC_ClockConfig>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000f70:	f000 f9c4 	bl	80012fc <Error_Handler>
  }
}
 8000f74:	bf00      	nop
 8000f76:	3750      	adds	r7, #80	; 0x50
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	40023800 	.word	0x40023800
 8000f80:	40007000 	.word	0x40007000

08000f84 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f88:	4b12      	ldr	r3, [pc, #72]	; (8000fd4 <MX_I2C1_Init+0x50>)
 8000f8a:	4a13      	ldr	r2, [pc, #76]	; (8000fd8 <MX_I2C1_Init+0x54>)
 8000f8c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000f8e:	4b11      	ldr	r3, [pc, #68]	; (8000fd4 <MX_I2C1_Init+0x50>)
 8000f90:	4a12      	ldr	r2, [pc, #72]	; (8000fdc <MX_I2C1_Init+0x58>)
 8000f92:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f94:	4b0f      	ldr	r3, [pc, #60]	; (8000fd4 <MX_I2C1_Init+0x50>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f9a:	4b0e      	ldr	r3, [pc, #56]	; (8000fd4 <MX_I2C1_Init+0x50>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fa0:	4b0c      	ldr	r3, [pc, #48]	; (8000fd4 <MX_I2C1_Init+0x50>)
 8000fa2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000fa6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fa8:	4b0a      	ldr	r3, [pc, #40]	; (8000fd4 <MX_I2C1_Init+0x50>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000fae:	4b09      	ldr	r3, [pc, #36]	; (8000fd4 <MX_I2C1_Init+0x50>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fb4:	4b07      	ldr	r3, [pc, #28]	; (8000fd4 <MX_I2C1_Init+0x50>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fba:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <MX_I2C1_Init+0x50>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fc0:	4804      	ldr	r0, [pc, #16]	; (8000fd4 <MX_I2C1_Init+0x50>)
 8000fc2:	f002 fb2f 	bl	8003624 <HAL_I2C_Init>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000fcc:	f000 f996 	bl	80012fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fd0:	bf00      	nop
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	200003b4 	.word	0x200003b4
 8000fd8:	40005400 	.word	0x40005400
 8000fdc:	000186a0 	.word	0x000186a0

08000fe0 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000fe4:	4b13      	ldr	r3, [pc, #76]	; (8001034 <MX_I2S3_Init+0x54>)
 8000fe6:	4a14      	ldr	r2, [pc, #80]	; (8001038 <MX_I2S3_Init+0x58>)
 8000fe8:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000fea:	4b12      	ldr	r3, [pc, #72]	; (8001034 <MX_I2S3_Init+0x54>)
 8000fec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ff0:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000ff2:	4b10      	ldr	r3, [pc, #64]	; (8001034 <MX_I2S3_Init+0x54>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000ff8:	4b0e      	ldr	r3, [pc, #56]	; (8001034 <MX_I2S3_Init+0x54>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000ffe:	4b0d      	ldr	r3, [pc, #52]	; (8001034 <MX_I2S3_Init+0x54>)
 8001000:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001004:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8001006:	4b0b      	ldr	r3, [pc, #44]	; (8001034 <MX_I2S3_Init+0x54>)
 8001008:	4a0c      	ldr	r2, [pc, #48]	; (800103c <MX_I2S3_Init+0x5c>)
 800100a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800100c:	4b09      	ldr	r3, [pc, #36]	; (8001034 <MX_I2S3_Init+0x54>)
 800100e:	2200      	movs	r2, #0
 8001010:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001012:	4b08      	ldr	r3, [pc, #32]	; (8001034 <MX_I2S3_Init+0x54>)
 8001014:	2200      	movs	r2, #0
 8001016:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001018:	4b06      	ldr	r3, [pc, #24]	; (8001034 <MX_I2S3_Init+0x54>)
 800101a:	2200      	movs	r2, #0
 800101c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800101e:	4805      	ldr	r0, [pc, #20]	; (8001034 <MX_I2S3_Init+0x54>)
 8001020:	f002 fc44 	bl	80038ac <HAL_I2S_Init>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800102a:	f000 f967 	bl	80012fc <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	20000408 	.word	0x20000408
 8001038:	40003c00 	.word	0x40003c00
 800103c:	00017700 	.word	0x00017700

08001040 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001044:	4b17      	ldr	r3, [pc, #92]	; (80010a4 <MX_SPI1_Init+0x64>)
 8001046:	4a18      	ldr	r2, [pc, #96]	; (80010a8 <MX_SPI1_Init+0x68>)
 8001048:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800104a:	4b16      	ldr	r3, [pc, #88]	; (80010a4 <MX_SPI1_Init+0x64>)
 800104c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001050:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001052:	4b14      	ldr	r3, [pc, #80]	; (80010a4 <MX_SPI1_Init+0x64>)
 8001054:	2200      	movs	r2, #0
 8001056:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001058:	4b12      	ldr	r3, [pc, #72]	; (80010a4 <MX_SPI1_Init+0x64>)
 800105a:	2200      	movs	r2, #0
 800105c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800105e:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <MX_SPI1_Init+0x64>)
 8001060:	2200      	movs	r2, #0
 8001062:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001064:	4b0f      	ldr	r3, [pc, #60]	; (80010a4 <MX_SPI1_Init+0x64>)
 8001066:	2200      	movs	r2, #0
 8001068:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800106a:	4b0e      	ldr	r3, [pc, #56]	; (80010a4 <MX_SPI1_Init+0x64>)
 800106c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001070:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001072:	4b0c      	ldr	r3, [pc, #48]	; (80010a4 <MX_SPI1_Init+0x64>)
 8001074:	2200      	movs	r2, #0
 8001076:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001078:	4b0a      	ldr	r3, [pc, #40]	; (80010a4 <MX_SPI1_Init+0x64>)
 800107a:	2200      	movs	r2, #0
 800107c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800107e:	4b09      	ldr	r3, [pc, #36]	; (80010a4 <MX_SPI1_Init+0x64>)
 8001080:	2200      	movs	r2, #0
 8001082:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001084:	4b07      	ldr	r3, [pc, #28]	; (80010a4 <MX_SPI1_Init+0x64>)
 8001086:	2200      	movs	r2, #0
 8001088:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800108a:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <MX_SPI1_Init+0x64>)
 800108c:	220a      	movs	r2, #10
 800108e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001090:	4804      	ldr	r0, [pc, #16]	; (80010a4 <MX_SPI1_Init+0x64>)
 8001092:	f003 fe83 	bl	8004d9c <HAL_SPI_Init>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800109c:	f000 f92e 	bl	80012fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80010a0:	bf00      	nop
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	20000450 	.word	0x20000450
 80010a8:	40013000 	.word	0x40013000

080010ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010b0:	4b11      	ldr	r3, [pc, #68]	; (80010f8 <MX_USART2_UART_Init+0x4c>)
 80010b2:	4a12      	ldr	r2, [pc, #72]	; (80010fc <MX_USART2_UART_Init+0x50>)
 80010b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010b6:	4b10      	ldr	r3, [pc, #64]	; (80010f8 <MX_USART2_UART_Init+0x4c>)
 80010b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010be:	4b0e      	ldr	r3, [pc, #56]	; (80010f8 <MX_USART2_UART_Init+0x4c>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010c4:	4b0c      	ldr	r3, [pc, #48]	; (80010f8 <MX_USART2_UART_Init+0x4c>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010ca:	4b0b      	ldr	r3, [pc, #44]	; (80010f8 <MX_USART2_UART_Init+0x4c>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010d0:	4b09      	ldr	r3, [pc, #36]	; (80010f8 <MX_USART2_UART_Init+0x4c>)
 80010d2:	220c      	movs	r2, #12
 80010d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010d6:	4b08      	ldr	r3, [pc, #32]	; (80010f8 <MX_USART2_UART_Init+0x4c>)
 80010d8:	2200      	movs	r2, #0
 80010da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010dc:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <MX_USART2_UART_Init+0x4c>)
 80010de:	2200      	movs	r2, #0
 80010e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010e2:	4805      	ldr	r0, [pc, #20]	; (80010f8 <MX_USART2_UART_Init+0x4c>)
 80010e4:	f003 fee3 	bl	8004eae <HAL_UART_Init>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80010ee:	f000 f905 	bl	80012fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	200004a8 	.word	0x200004a8
 80010fc:	40004400 	.word	0x40004400

08001100 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b08c      	sub	sp, #48	; 0x30
 8001104:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001106:	f107 031c 	add.w	r3, r7, #28
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]
 800110e:	605a      	str	r2, [r3, #4]
 8001110:	609a      	str	r2, [r3, #8]
 8001112:	60da      	str	r2, [r3, #12]
 8001114:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	61bb      	str	r3, [r7, #24]
 800111a:	4b72      	ldr	r3, [pc, #456]	; (80012e4 <MX_GPIO_Init+0x1e4>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	4a71      	ldr	r2, [pc, #452]	; (80012e4 <MX_GPIO_Init+0x1e4>)
 8001120:	f043 0310 	orr.w	r3, r3, #16
 8001124:	6313      	str	r3, [r2, #48]	; 0x30
 8001126:	4b6f      	ldr	r3, [pc, #444]	; (80012e4 <MX_GPIO_Init+0x1e4>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	f003 0310 	and.w	r3, r3, #16
 800112e:	61bb      	str	r3, [r7, #24]
 8001130:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	617b      	str	r3, [r7, #20]
 8001136:	4b6b      	ldr	r3, [pc, #428]	; (80012e4 <MX_GPIO_Init+0x1e4>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	4a6a      	ldr	r2, [pc, #424]	; (80012e4 <MX_GPIO_Init+0x1e4>)
 800113c:	f043 0304 	orr.w	r3, r3, #4
 8001140:	6313      	str	r3, [r2, #48]	; 0x30
 8001142:	4b68      	ldr	r3, [pc, #416]	; (80012e4 <MX_GPIO_Init+0x1e4>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	f003 0304 	and.w	r3, r3, #4
 800114a:	617b      	str	r3, [r7, #20]
 800114c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	613b      	str	r3, [r7, #16]
 8001152:	4b64      	ldr	r3, [pc, #400]	; (80012e4 <MX_GPIO_Init+0x1e4>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	4a63      	ldr	r2, [pc, #396]	; (80012e4 <MX_GPIO_Init+0x1e4>)
 8001158:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800115c:	6313      	str	r3, [r2, #48]	; 0x30
 800115e:	4b61      	ldr	r3, [pc, #388]	; (80012e4 <MX_GPIO_Init+0x1e4>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001166:	613b      	str	r3, [r7, #16]
 8001168:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	60fb      	str	r3, [r7, #12]
 800116e:	4b5d      	ldr	r3, [pc, #372]	; (80012e4 <MX_GPIO_Init+0x1e4>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	4a5c      	ldr	r2, [pc, #368]	; (80012e4 <MX_GPIO_Init+0x1e4>)
 8001174:	f043 0301 	orr.w	r3, r3, #1
 8001178:	6313      	str	r3, [r2, #48]	; 0x30
 800117a:	4b5a      	ldr	r3, [pc, #360]	; (80012e4 <MX_GPIO_Init+0x1e4>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	f003 0301 	and.w	r3, r3, #1
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001186:	2300      	movs	r3, #0
 8001188:	60bb      	str	r3, [r7, #8]
 800118a:	4b56      	ldr	r3, [pc, #344]	; (80012e4 <MX_GPIO_Init+0x1e4>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118e:	4a55      	ldr	r2, [pc, #340]	; (80012e4 <MX_GPIO_Init+0x1e4>)
 8001190:	f043 0302 	orr.w	r3, r3, #2
 8001194:	6313      	str	r3, [r2, #48]	; 0x30
 8001196:	4b53      	ldr	r3, [pc, #332]	; (80012e4 <MX_GPIO_Init+0x1e4>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	f003 0302 	and.w	r3, r3, #2
 800119e:	60bb      	str	r3, [r7, #8]
 80011a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	607b      	str	r3, [r7, #4]
 80011a6:	4b4f      	ldr	r3, [pc, #316]	; (80012e4 <MX_GPIO_Init+0x1e4>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	4a4e      	ldr	r2, [pc, #312]	; (80012e4 <MX_GPIO_Init+0x1e4>)
 80011ac:	f043 0308 	orr.w	r3, r3, #8
 80011b0:	6313      	str	r3, [r2, #48]	; 0x30
 80011b2:	4b4c      	ldr	r3, [pc, #304]	; (80012e4 <MX_GPIO_Init+0x1e4>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	f003 0308 	and.w	r3, r3, #8
 80011ba:	607b      	str	r3, [r7, #4]
 80011bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80011be:	2200      	movs	r2, #0
 80011c0:	2108      	movs	r1, #8
 80011c2:	4849      	ldr	r0, [pc, #292]	; (80012e8 <MX_GPIO_Init+0x1e8>)
 80011c4:	f000 fe0a 	bl	8001ddc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80011c8:	2201      	movs	r2, #1
 80011ca:	2101      	movs	r1, #1
 80011cc:	4847      	ldr	r0, [pc, #284]	; (80012ec <MX_GPIO_Init+0x1ec>)
 80011ce:	f000 fe05 	bl	8001ddc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80011d2:	2200      	movs	r2, #0
 80011d4:	f24f 0110 	movw	r1, #61456	; 0xf010
 80011d8:	4845      	ldr	r0, [pc, #276]	; (80012f0 <MX_GPIO_Init+0x1f0>)
 80011da:	f000 fdff 	bl	8001ddc <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80011de:	2308      	movs	r3, #8
 80011e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e2:	2301      	movs	r3, #1
 80011e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ea:	2300      	movs	r3, #0
 80011ec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80011ee:	f107 031c 	add.w	r3, r7, #28
 80011f2:	4619      	mov	r1, r3
 80011f4:	483c      	ldr	r0, [pc, #240]	; (80012e8 <MX_GPIO_Init+0x1e8>)
 80011f6:	f000 fc55 	bl	8001aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80011fa:	2301      	movs	r3, #1
 80011fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011fe:	2301      	movs	r3, #1
 8001200:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001202:	2300      	movs	r3, #0
 8001204:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001206:	2300      	movs	r3, #0
 8001208:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800120a:	f107 031c 	add.w	r3, r7, #28
 800120e:	4619      	mov	r1, r3
 8001210:	4836      	ldr	r0, [pc, #216]	; (80012ec <MX_GPIO_Init+0x1ec>)
 8001212:	f000 fc47 	bl	8001aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001216:	2308      	movs	r3, #8
 8001218:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121a:	2302      	movs	r3, #2
 800121c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121e:	2300      	movs	r3, #0
 8001220:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001222:	2300      	movs	r3, #0
 8001224:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001226:	2305      	movs	r3, #5
 8001228:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800122a:	f107 031c 	add.w	r3, r7, #28
 800122e:	4619      	mov	r1, r3
 8001230:	482e      	ldr	r0, [pc, #184]	; (80012ec <MX_GPIO_Init+0x1ec>)
 8001232:	f000 fc37 	bl	8001aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001236:	2301      	movs	r3, #1
 8001238:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800123a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800123e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001240:	2300      	movs	r3, #0
 8001242:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001244:	f107 031c 	add.w	r3, r7, #28
 8001248:	4619      	mov	r1, r3
 800124a:	482a      	ldr	r0, [pc, #168]	; (80012f4 <MX_GPIO_Init+0x1f4>)
 800124c:	f000 fc2a 	bl	8001aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001250:	2304      	movs	r3, #4
 8001252:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001254:	2300      	movs	r3, #0
 8001256:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001258:	2300      	movs	r3, #0
 800125a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800125c:	f107 031c 	add.w	r3, r7, #28
 8001260:	4619      	mov	r1, r3
 8001262:	4825      	ldr	r0, [pc, #148]	; (80012f8 <MX_GPIO_Init+0x1f8>)
 8001264:	f000 fc1e 	bl	8001aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001268:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800126c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126e:	2302      	movs	r3, #2
 8001270:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001272:	2300      	movs	r3, #0
 8001274:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001276:	2300      	movs	r3, #0
 8001278:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800127a:	2305      	movs	r3, #5
 800127c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800127e:	f107 031c 	add.w	r3, r7, #28
 8001282:	4619      	mov	r1, r3
 8001284:	481c      	ldr	r0, [pc, #112]	; (80012f8 <MX_GPIO_Init+0x1f8>)
 8001286:	f000 fc0d 	bl	8001aa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800128a:	f24f 0310 	movw	r3, #61456	; 0xf010
 800128e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001290:	2301      	movs	r3, #1
 8001292:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001294:	2300      	movs	r3, #0
 8001296:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001298:	2300      	movs	r3, #0
 800129a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800129c:	f107 031c 	add.w	r3, r7, #28
 80012a0:	4619      	mov	r1, r3
 80012a2:	4813      	ldr	r0, [pc, #76]	; (80012f0 <MX_GPIO_Init+0x1f0>)
 80012a4:	f000 fbfe 	bl	8001aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80012a8:	2320      	movs	r3, #32
 80012aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012ac:	2300      	movs	r3, #0
 80012ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b0:	2300      	movs	r3, #0
 80012b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80012b4:	f107 031c 	add.w	r3, r7, #28
 80012b8:	4619      	mov	r1, r3
 80012ba:	480d      	ldr	r0, [pc, #52]	; (80012f0 <MX_GPIO_Init+0x1f0>)
 80012bc:	f000 fbf2 	bl	8001aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80012c0:	2302      	movs	r3, #2
 80012c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80012c4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80012c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ca:	2300      	movs	r3, #0
 80012cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80012ce:	f107 031c 	add.w	r3, r7, #28
 80012d2:	4619      	mov	r1, r3
 80012d4:	4804      	ldr	r0, [pc, #16]	; (80012e8 <MX_GPIO_Init+0x1e8>)
 80012d6:	f000 fbe5 	bl	8001aa4 <HAL_GPIO_Init>

}
 80012da:	bf00      	nop
 80012dc:	3730      	adds	r7, #48	; 0x30
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	40023800 	.word	0x40023800
 80012e8:	40021000 	.word	0x40021000
 80012ec:	40020800 	.word	0x40020800
 80012f0:	40020c00 	.word	0x40020c00
 80012f4:	40020000 	.word	0x40020000
 80012f8:	40020400 	.word	0x40020400

080012fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001300:	b672      	cpsid	i
}
 8001302:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001304:	e7fe      	b.n	8001304 <Error_Handler+0x8>
	...

08001308 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	607b      	str	r3, [r7, #4]
 8001312:	4b10      	ldr	r3, [pc, #64]	; (8001354 <HAL_MspInit+0x4c>)
 8001314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001316:	4a0f      	ldr	r2, [pc, #60]	; (8001354 <HAL_MspInit+0x4c>)
 8001318:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800131c:	6453      	str	r3, [r2, #68]	; 0x44
 800131e:	4b0d      	ldr	r3, [pc, #52]	; (8001354 <HAL_MspInit+0x4c>)
 8001320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001322:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001326:	607b      	str	r3, [r7, #4]
 8001328:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	603b      	str	r3, [r7, #0]
 800132e:	4b09      	ldr	r3, [pc, #36]	; (8001354 <HAL_MspInit+0x4c>)
 8001330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001332:	4a08      	ldr	r2, [pc, #32]	; (8001354 <HAL_MspInit+0x4c>)
 8001334:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001338:	6413      	str	r3, [r2, #64]	; 0x40
 800133a:	4b06      	ldr	r3, [pc, #24]	; (8001354 <HAL_MspInit+0x4c>)
 800133c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001342:	603b      	str	r3, [r7, #0]
 8001344:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001346:	2007      	movs	r0, #7
 8001348:	f000 fb6a 	bl	8001a20 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800134c:	bf00      	nop
 800134e:	3708      	adds	r7, #8
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	40023800 	.word	0x40023800

08001358 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b08a      	sub	sp, #40	; 0x28
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001360:	f107 0314 	add.w	r3, r7, #20
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	605a      	str	r2, [r3, #4]
 800136a:	609a      	str	r2, [r3, #8]
 800136c:	60da      	str	r2, [r3, #12]
 800136e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a19      	ldr	r2, [pc, #100]	; (80013dc <HAL_I2C_MspInit+0x84>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d12c      	bne.n	80013d4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	613b      	str	r3, [r7, #16]
 800137e:	4b18      	ldr	r3, [pc, #96]	; (80013e0 <HAL_I2C_MspInit+0x88>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	4a17      	ldr	r2, [pc, #92]	; (80013e0 <HAL_I2C_MspInit+0x88>)
 8001384:	f043 0302 	orr.w	r3, r3, #2
 8001388:	6313      	str	r3, [r2, #48]	; 0x30
 800138a:	4b15      	ldr	r3, [pc, #84]	; (80013e0 <HAL_I2C_MspInit+0x88>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	f003 0302 	and.w	r3, r3, #2
 8001392:	613b      	str	r3, [r7, #16]
 8001394:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001396:	f44f 7310 	mov.w	r3, #576	; 0x240
 800139a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800139c:	2312      	movs	r3, #18
 800139e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013a0:	2301      	movs	r3, #1
 80013a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a4:	2300      	movs	r3, #0
 80013a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013a8:	2304      	movs	r3, #4
 80013aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ac:	f107 0314 	add.w	r3, r7, #20
 80013b0:	4619      	mov	r1, r3
 80013b2:	480c      	ldr	r0, [pc, #48]	; (80013e4 <HAL_I2C_MspInit+0x8c>)
 80013b4:	f000 fb76 	bl	8001aa4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013b8:	2300      	movs	r3, #0
 80013ba:	60fb      	str	r3, [r7, #12]
 80013bc:	4b08      	ldr	r3, [pc, #32]	; (80013e0 <HAL_I2C_MspInit+0x88>)
 80013be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c0:	4a07      	ldr	r2, [pc, #28]	; (80013e0 <HAL_I2C_MspInit+0x88>)
 80013c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013c6:	6413      	str	r3, [r2, #64]	; 0x40
 80013c8:	4b05      	ldr	r3, [pc, #20]	; (80013e0 <HAL_I2C_MspInit+0x88>)
 80013ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013d0:	60fb      	str	r3, [r7, #12]
 80013d2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80013d4:	bf00      	nop
 80013d6:	3728      	adds	r7, #40	; 0x28
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	40005400 	.word	0x40005400
 80013e0:	40023800 	.word	0x40023800
 80013e4:	40020400 	.word	0x40020400

080013e8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b08e      	sub	sp, #56	; 0x38
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	605a      	str	r2, [r3, #4]
 80013fa:	609a      	str	r2, [r3, #8]
 80013fc:	60da      	str	r2, [r3, #12]
 80013fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001400:	f107 0314 	add.w	r3, r7, #20
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a31      	ldr	r2, [pc, #196]	; (80014d8 <HAL_I2S_MspInit+0xf0>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d15a      	bne.n	80014ce <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001418:	2301      	movs	r3, #1
 800141a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800141c:	23c0      	movs	r3, #192	; 0xc0
 800141e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001420:	2302      	movs	r3, #2
 8001422:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001424:	f107 0314 	add.w	r3, r7, #20
 8001428:	4618      	mov	r0, r3
 800142a:	f003 fb77 	bl	8004b1c <HAL_RCCEx_PeriphCLKConfig>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8001434:	f7ff ff62 	bl	80012fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001438:	2300      	movs	r3, #0
 800143a:	613b      	str	r3, [r7, #16]
 800143c:	4b27      	ldr	r3, [pc, #156]	; (80014dc <HAL_I2S_MspInit+0xf4>)
 800143e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001440:	4a26      	ldr	r2, [pc, #152]	; (80014dc <HAL_I2S_MspInit+0xf4>)
 8001442:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001446:	6413      	str	r3, [r2, #64]	; 0x40
 8001448:	4b24      	ldr	r3, [pc, #144]	; (80014dc <HAL_I2S_MspInit+0xf4>)
 800144a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001450:	613b      	str	r3, [r7, #16]
 8001452:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001454:	2300      	movs	r3, #0
 8001456:	60fb      	str	r3, [r7, #12]
 8001458:	4b20      	ldr	r3, [pc, #128]	; (80014dc <HAL_I2S_MspInit+0xf4>)
 800145a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145c:	4a1f      	ldr	r2, [pc, #124]	; (80014dc <HAL_I2S_MspInit+0xf4>)
 800145e:	f043 0301 	orr.w	r3, r3, #1
 8001462:	6313      	str	r3, [r2, #48]	; 0x30
 8001464:	4b1d      	ldr	r3, [pc, #116]	; (80014dc <HAL_I2S_MspInit+0xf4>)
 8001466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001468:	f003 0301 	and.w	r3, r3, #1
 800146c:	60fb      	str	r3, [r7, #12]
 800146e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001470:	2300      	movs	r3, #0
 8001472:	60bb      	str	r3, [r7, #8]
 8001474:	4b19      	ldr	r3, [pc, #100]	; (80014dc <HAL_I2S_MspInit+0xf4>)
 8001476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001478:	4a18      	ldr	r2, [pc, #96]	; (80014dc <HAL_I2S_MspInit+0xf4>)
 800147a:	f043 0304 	orr.w	r3, r3, #4
 800147e:	6313      	str	r3, [r2, #48]	; 0x30
 8001480:	4b16      	ldr	r3, [pc, #88]	; (80014dc <HAL_I2S_MspInit+0xf4>)
 8001482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001484:	f003 0304 	and.w	r3, r3, #4
 8001488:	60bb      	str	r3, [r7, #8]
 800148a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800148c:	2310      	movs	r3, #16
 800148e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001490:	2302      	movs	r3, #2
 8001492:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001494:	2300      	movs	r3, #0
 8001496:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001498:	2300      	movs	r3, #0
 800149a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800149c:	2306      	movs	r3, #6
 800149e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80014a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014a4:	4619      	mov	r1, r3
 80014a6:	480e      	ldr	r0, [pc, #56]	; (80014e0 <HAL_I2S_MspInit+0xf8>)
 80014a8:	f000 fafc 	bl	8001aa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80014ac:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80014b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b2:	2302      	movs	r3, #2
 80014b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b6:	2300      	movs	r3, #0
 80014b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ba:	2300      	movs	r3, #0
 80014bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80014be:	2306      	movs	r3, #6
 80014c0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014c6:	4619      	mov	r1, r3
 80014c8:	4806      	ldr	r0, [pc, #24]	; (80014e4 <HAL_I2S_MspInit+0xfc>)
 80014ca:	f000 faeb 	bl	8001aa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80014ce:	bf00      	nop
 80014d0:	3738      	adds	r7, #56	; 0x38
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	40003c00 	.word	0x40003c00
 80014dc:	40023800 	.word	0x40023800
 80014e0:	40020000 	.word	0x40020000
 80014e4:	40020800 	.word	0x40020800

080014e8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b08a      	sub	sp, #40	; 0x28
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f0:	f107 0314 	add.w	r3, r7, #20
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	605a      	str	r2, [r3, #4]
 80014fa:	609a      	str	r2, [r3, #8]
 80014fc:	60da      	str	r2, [r3, #12]
 80014fe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a19      	ldr	r2, [pc, #100]	; (800156c <HAL_SPI_MspInit+0x84>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d12b      	bne.n	8001562 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	613b      	str	r3, [r7, #16]
 800150e:	4b18      	ldr	r3, [pc, #96]	; (8001570 <HAL_SPI_MspInit+0x88>)
 8001510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001512:	4a17      	ldr	r2, [pc, #92]	; (8001570 <HAL_SPI_MspInit+0x88>)
 8001514:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001518:	6453      	str	r3, [r2, #68]	; 0x44
 800151a:	4b15      	ldr	r3, [pc, #84]	; (8001570 <HAL_SPI_MspInit+0x88>)
 800151c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800151e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001522:	613b      	str	r3, [r7, #16]
 8001524:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	60fb      	str	r3, [r7, #12]
 800152a:	4b11      	ldr	r3, [pc, #68]	; (8001570 <HAL_SPI_MspInit+0x88>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	4a10      	ldr	r2, [pc, #64]	; (8001570 <HAL_SPI_MspInit+0x88>)
 8001530:	f043 0301 	orr.w	r3, r3, #1
 8001534:	6313      	str	r3, [r2, #48]	; 0x30
 8001536:	4b0e      	ldr	r3, [pc, #56]	; (8001570 <HAL_SPI_MspInit+0x88>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153a:	f003 0301 	and.w	r3, r3, #1
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001542:	23e0      	movs	r3, #224	; 0xe0
 8001544:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001546:	2302      	movs	r3, #2
 8001548:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154a:	2300      	movs	r3, #0
 800154c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154e:	2300      	movs	r3, #0
 8001550:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001552:	2305      	movs	r3, #5
 8001554:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001556:	f107 0314 	add.w	r3, r7, #20
 800155a:	4619      	mov	r1, r3
 800155c:	4805      	ldr	r0, [pc, #20]	; (8001574 <HAL_SPI_MspInit+0x8c>)
 800155e:	f000 faa1 	bl	8001aa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001562:	bf00      	nop
 8001564:	3728      	adds	r7, #40	; 0x28
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	40013000 	.word	0x40013000
 8001570:	40023800 	.word	0x40023800
 8001574:	40020000 	.word	0x40020000

08001578 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b08a      	sub	sp, #40	; 0x28
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001580:	f107 0314 	add.w	r3, r7, #20
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	605a      	str	r2, [r3, #4]
 800158a:	609a      	str	r2, [r3, #8]
 800158c:	60da      	str	r2, [r3, #12]
 800158e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a19      	ldr	r2, [pc, #100]	; (80015fc <HAL_UART_MspInit+0x84>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d12b      	bne.n	80015f2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	613b      	str	r3, [r7, #16]
 800159e:	4b18      	ldr	r3, [pc, #96]	; (8001600 <HAL_UART_MspInit+0x88>)
 80015a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a2:	4a17      	ldr	r2, [pc, #92]	; (8001600 <HAL_UART_MspInit+0x88>)
 80015a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015a8:	6413      	str	r3, [r2, #64]	; 0x40
 80015aa:	4b15      	ldr	r3, [pc, #84]	; (8001600 <HAL_UART_MspInit+0x88>)
 80015ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015b2:	613b      	str	r3, [r7, #16]
 80015b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	60fb      	str	r3, [r7, #12]
 80015ba:	4b11      	ldr	r3, [pc, #68]	; (8001600 <HAL_UART_MspInit+0x88>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	4a10      	ldr	r2, [pc, #64]	; (8001600 <HAL_UART_MspInit+0x88>)
 80015c0:	f043 0301 	orr.w	r3, r3, #1
 80015c4:	6313      	str	r3, [r2, #48]	; 0x30
 80015c6:	4b0e      	ldr	r3, [pc, #56]	; (8001600 <HAL_UART_MspInit+0x88>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ca:	f003 0301 	and.w	r3, r3, #1
 80015ce:	60fb      	str	r3, [r7, #12]
 80015d0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80015d2:	230c      	movs	r3, #12
 80015d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d6:	2302      	movs	r3, #2
 80015d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015da:	2300      	movs	r3, #0
 80015dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015de:	2303      	movs	r3, #3
 80015e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015e2:	2307      	movs	r3, #7
 80015e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e6:	f107 0314 	add.w	r3, r7, #20
 80015ea:	4619      	mov	r1, r3
 80015ec:	4805      	ldr	r0, [pc, #20]	; (8001604 <HAL_UART_MspInit+0x8c>)
 80015ee:	f000 fa59 	bl	8001aa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80015f2:	bf00      	nop
 80015f4:	3728      	adds	r7, #40	; 0x28
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	40004400 	.word	0x40004400
 8001600:	40023800 	.word	0x40023800
 8001604:	40020000 	.word	0x40020000

08001608 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800160c:	e7fe      	b.n	800160c <NMI_Handler+0x4>

0800160e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800160e:	b480      	push	{r7}
 8001610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001612:	e7fe      	b.n	8001612 <HardFault_Handler+0x4>

08001614 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001618:	e7fe      	b.n	8001618 <MemManage_Handler+0x4>

0800161a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800161a:	b480      	push	{r7}
 800161c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800161e:	e7fe      	b.n	800161e <BusFault_Handler+0x4>

08001620 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001624:	e7fe      	b.n	8001624 <UsageFault_Handler+0x4>

08001626 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001626:	b480      	push	{r7}
 8001628:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800162a:	bf00      	nop
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr

08001634 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001638:	bf00      	nop
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr

08001642 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001642:	b480      	push	{r7}
 8001644:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001646:	bf00      	nop
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr

08001650 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001654:	f000 f8d0 	bl	80017f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001658:	bf00      	nop
 800165a:	bd80      	pop	{r7, pc}

0800165c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001660:	4802      	ldr	r0, [pc, #8]	; (800166c <OTG_FS_IRQHandler+0x10>)
 8001662:	f000 fe3f 	bl	80022e4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001666:	bf00      	nop
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	20000a38 	.word	0x20000a38

08001670 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b086      	sub	sp, #24
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001678:	4a14      	ldr	r2, [pc, #80]	; (80016cc <_sbrk+0x5c>)
 800167a:	4b15      	ldr	r3, [pc, #84]	; (80016d0 <_sbrk+0x60>)
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001684:	4b13      	ldr	r3, [pc, #76]	; (80016d4 <_sbrk+0x64>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d102      	bne.n	8001692 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800168c:	4b11      	ldr	r3, [pc, #68]	; (80016d4 <_sbrk+0x64>)
 800168e:	4a12      	ldr	r2, [pc, #72]	; (80016d8 <_sbrk+0x68>)
 8001690:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001692:	4b10      	ldr	r3, [pc, #64]	; (80016d4 <_sbrk+0x64>)
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4413      	add	r3, r2
 800169a:	693a      	ldr	r2, [r7, #16]
 800169c:	429a      	cmp	r2, r3
 800169e:	d207      	bcs.n	80016b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016a0:	f009 ffbc 	bl	800b61c <__errno>
 80016a4:	4603      	mov	r3, r0
 80016a6:	220c      	movs	r2, #12
 80016a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016aa:	f04f 33ff 	mov.w	r3, #4294967295
 80016ae:	e009      	b.n	80016c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016b0:	4b08      	ldr	r3, [pc, #32]	; (80016d4 <_sbrk+0x64>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016b6:	4b07      	ldr	r3, [pc, #28]	; (80016d4 <_sbrk+0x64>)
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4413      	add	r3, r2
 80016be:	4a05      	ldr	r2, [pc, #20]	; (80016d4 <_sbrk+0x64>)
 80016c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016c2:	68fb      	ldr	r3, [r7, #12]
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3718      	adds	r7, #24
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	20020000 	.word	0x20020000
 80016d0:	00000400 	.word	0x00000400
 80016d4:	200004ec 	.word	0x200004ec
 80016d8:	20000d50 	.word	0x20000d50

080016dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016e0:	4b06      	ldr	r3, [pc, #24]	; (80016fc <SystemInit+0x20>)
 80016e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016e6:	4a05      	ldr	r2, [pc, #20]	; (80016fc <SystemInit+0x20>)
 80016e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016f0:	bf00      	nop
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	e000ed00 	.word	0xe000ed00

08001700 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001700:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001738 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001704:	480d      	ldr	r0, [pc, #52]	; (800173c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001706:	490e      	ldr	r1, [pc, #56]	; (8001740 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001708:	4a0e      	ldr	r2, [pc, #56]	; (8001744 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800170a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800170c:	e002      	b.n	8001714 <LoopCopyDataInit>

0800170e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800170e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001710:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001712:	3304      	adds	r3, #4

08001714 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001714:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001716:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001718:	d3f9      	bcc.n	800170e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800171a:	4a0b      	ldr	r2, [pc, #44]	; (8001748 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800171c:	4c0b      	ldr	r4, [pc, #44]	; (800174c <LoopFillZerobss+0x26>)
  movs r3, #0
 800171e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001720:	e001      	b.n	8001726 <LoopFillZerobss>

08001722 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001722:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001724:	3204      	adds	r2, #4

08001726 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001726:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001728:	d3fb      	bcc.n	8001722 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800172a:	f7ff ffd7 	bl	80016dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800172e:	f009 ff7b 	bl	800b628 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001732:	f7ff fb71 	bl	8000e18 <main>
  bx  lr    
 8001736:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001738:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800173c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001740:	20000394 	.word	0x20000394
  ldr r2, =_sidata
 8001744:	0800bd90 	.word	0x0800bd90
  ldr r2, =_sbss
 8001748:	20000398 	.word	0x20000398
  ldr r4, =_ebss
 800174c:	20000d4c 	.word	0x20000d4c

08001750 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001750:	e7fe      	b.n	8001750 <ADC_IRQHandler>
	...

08001754 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001758:	4b0e      	ldr	r3, [pc, #56]	; (8001794 <HAL_Init+0x40>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a0d      	ldr	r2, [pc, #52]	; (8001794 <HAL_Init+0x40>)
 800175e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001762:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001764:	4b0b      	ldr	r3, [pc, #44]	; (8001794 <HAL_Init+0x40>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a0a      	ldr	r2, [pc, #40]	; (8001794 <HAL_Init+0x40>)
 800176a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800176e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001770:	4b08      	ldr	r3, [pc, #32]	; (8001794 <HAL_Init+0x40>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a07      	ldr	r2, [pc, #28]	; (8001794 <HAL_Init+0x40>)
 8001776:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800177a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800177c:	2003      	movs	r0, #3
 800177e:	f000 f94f 	bl	8001a20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001782:	2000      	movs	r0, #0
 8001784:	f000 f808 	bl	8001798 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001788:	f7ff fdbe 	bl	8001308 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800178c:	2300      	movs	r3, #0
}
 800178e:	4618      	mov	r0, r3
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	40023c00 	.word	0x40023c00

08001798 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017a0:	4b12      	ldr	r3, [pc, #72]	; (80017ec <HAL_InitTick+0x54>)
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	4b12      	ldr	r3, [pc, #72]	; (80017f0 <HAL_InitTick+0x58>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	4619      	mov	r1, r3
 80017aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80017b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017b6:	4618      	mov	r0, r3
 80017b8:	f000 f967 	bl	8001a8a <HAL_SYSTICK_Config>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e00e      	b.n	80017e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2b0f      	cmp	r3, #15
 80017ca:	d80a      	bhi.n	80017e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017cc:	2200      	movs	r2, #0
 80017ce:	6879      	ldr	r1, [r7, #4]
 80017d0:	f04f 30ff 	mov.w	r0, #4294967295
 80017d4:	f000 f92f 	bl	8001a36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017d8:	4a06      	ldr	r2, [pc, #24]	; (80017f4 <HAL_InitTick+0x5c>)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017de:	2300      	movs	r3, #0
 80017e0:	e000      	b.n	80017e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3708      	adds	r7, #8
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	20000000 	.word	0x20000000
 80017f0:	20000008 	.word	0x20000008
 80017f4:	20000004 	.word	0x20000004

080017f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017fc:	4b06      	ldr	r3, [pc, #24]	; (8001818 <HAL_IncTick+0x20>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	461a      	mov	r2, r3
 8001802:	4b06      	ldr	r3, [pc, #24]	; (800181c <HAL_IncTick+0x24>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4413      	add	r3, r2
 8001808:	4a04      	ldr	r2, [pc, #16]	; (800181c <HAL_IncTick+0x24>)
 800180a:	6013      	str	r3, [r2, #0]
}
 800180c:	bf00      	nop
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	20000008 	.word	0x20000008
 800181c:	200004f0 	.word	0x200004f0

08001820 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  return uwTick;
 8001824:	4b03      	ldr	r3, [pc, #12]	; (8001834 <HAL_GetTick+0x14>)
 8001826:	681b      	ldr	r3, [r3, #0]
}
 8001828:	4618      	mov	r0, r3
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	200004f0 	.word	0x200004f0

08001838 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001840:	f7ff ffee 	bl	8001820 <HAL_GetTick>
 8001844:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001850:	d005      	beq.n	800185e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001852:	4b0a      	ldr	r3, [pc, #40]	; (800187c <HAL_Delay+0x44>)
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	461a      	mov	r2, r3
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	4413      	add	r3, r2
 800185c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800185e:	bf00      	nop
 8001860:	f7ff ffde 	bl	8001820 <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	68fa      	ldr	r2, [r7, #12]
 800186c:	429a      	cmp	r2, r3
 800186e:	d8f7      	bhi.n	8001860 <HAL_Delay+0x28>
  {
  }
}
 8001870:	bf00      	nop
 8001872:	bf00      	nop
 8001874:	3710      	adds	r7, #16
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	20000008 	.word	0x20000008

08001880 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001880:	b480      	push	{r7}
 8001882:	b085      	sub	sp, #20
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	f003 0307 	and.w	r3, r3, #7
 800188e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001890:	4b0c      	ldr	r3, [pc, #48]	; (80018c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001896:	68ba      	ldr	r2, [r7, #8]
 8001898:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800189c:	4013      	ands	r3, r2
 800189e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018b2:	4a04      	ldr	r2, [pc, #16]	; (80018c4 <__NVIC_SetPriorityGrouping+0x44>)
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	60d3      	str	r3, [r2, #12]
}
 80018b8:	bf00      	nop
 80018ba:	3714      	adds	r7, #20
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr
 80018c4:	e000ed00 	.word	0xe000ed00

080018c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018cc:	4b04      	ldr	r3, [pc, #16]	; (80018e0 <__NVIC_GetPriorityGrouping+0x18>)
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	0a1b      	lsrs	r3, r3, #8
 80018d2:	f003 0307 	and.w	r3, r3, #7
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr
 80018e0:	e000ed00 	.word	0xe000ed00

080018e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	4603      	mov	r3, r0
 80018ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	db0b      	blt.n	800190e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018f6:	79fb      	ldrb	r3, [r7, #7]
 80018f8:	f003 021f 	and.w	r2, r3, #31
 80018fc:	4907      	ldr	r1, [pc, #28]	; (800191c <__NVIC_EnableIRQ+0x38>)
 80018fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001902:	095b      	lsrs	r3, r3, #5
 8001904:	2001      	movs	r0, #1
 8001906:	fa00 f202 	lsl.w	r2, r0, r2
 800190a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800190e:	bf00      	nop
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	e000e100 	.word	0xe000e100

08001920 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	4603      	mov	r3, r0
 8001928:	6039      	str	r1, [r7, #0]
 800192a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800192c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001930:	2b00      	cmp	r3, #0
 8001932:	db0a      	blt.n	800194a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	b2da      	uxtb	r2, r3
 8001938:	490c      	ldr	r1, [pc, #48]	; (800196c <__NVIC_SetPriority+0x4c>)
 800193a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193e:	0112      	lsls	r2, r2, #4
 8001940:	b2d2      	uxtb	r2, r2
 8001942:	440b      	add	r3, r1
 8001944:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001948:	e00a      	b.n	8001960 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	b2da      	uxtb	r2, r3
 800194e:	4908      	ldr	r1, [pc, #32]	; (8001970 <__NVIC_SetPriority+0x50>)
 8001950:	79fb      	ldrb	r3, [r7, #7]
 8001952:	f003 030f 	and.w	r3, r3, #15
 8001956:	3b04      	subs	r3, #4
 8001958:	0112      	lsls	r2, r2, #4
 800195a:	b2d2      	uxtb	r2, r2
 800195c:	440b      	add	r3, r1
 800195e:	761a      	strb	r2, [r3, #24]
}
 8001960:	bf00      	nop
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr
 800196c:	e000e100 	.word	0xe000e100
 8001970:	e000ed00 	.word	0xe000ed00

08001974 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001974:	b480      	push	{r7}
 8001976:	b089      	sub	sp, #36	; 0x24
 8001978:	af00      	add	r7, sp, #0
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	60b9      	str	r1, [r7, #8]
 800197e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	f003 0307 	and.w	r3, r3, #7
 8001986:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	f1c3 0307 	rsb	r3, r3, #7
 800198e:	2b04      	cmp	r3, #4
 8001990:	bf28      	it	cs
 8001992:	2304      	movcs	r3, #4
 8001994:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	3304      	adds	r3, #4
 800199a:	2b06      	cmp	r3, #6
 800199c:	d902      	bls.n	80019a4 <NVIC_EncodePriority+0x30>
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	3b03      	subs	r3, #3
 80019a2:	e000      	b.n	80019a6 <NVIC_EncodePriority+0x32>
 80019a4:	2300      	movs	r3, #0
 80019a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a8:	f04f 32ff 	mov.w	r2, #4294967295
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	fa02 f303 	lsl.w	r3, r2, r3
 80019b2:	43da      	mvns	r2, r3
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	401a      	ands	r2, r3
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019bc:	f04f 31ff 	mov.w	r1, #4294967295
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	fa01 f303 	lsl.w	r3, r1, r3
 80019c6:	43d9      	mvns	r1, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019cc:	4313      	orrs	r3, r2
         );
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3724      	adds	r7, #36	; 0x24
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
	...

080019dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	3b01      	subs	r3, #1
 80019e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019ec:	d301      	bcc.n	80019f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019ee:	2301      	movs	r3, #1
 80019f0:	e00f      	b.n	8001a12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019f2:	4a0a      	ldr	r2, [pc, #40]	; (8001a1c <SysTick_Config+0x40>)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	3b01      	subs	r3, #1
 80019f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019fa:	210f      	movs	r1, #15
 80019fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001a00:	f7ff ff8e 	bl	8001920 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a04:	4b05      	ldr	r3, [pc, #20]	; (8001a1c <SysTick_Config+0x40>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a0a:	4b04      	ldr	r3, [pc, #16]	; (8001a1c <SysTick_Config+0x40>)
 8001a0c:	2207      	movs	r2, #7
 8001a0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	e000e010 	.word	0xe000e010

08001a20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f7ff ff29 	bl	8001880 <__NVIC_SetPriorityGrouping>
}
 8001a2e:	bf00      	nop
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b086      	sub	sp, #24
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	60b9      	str	r1, [r7, #8]
 8001a40:	607a      	str	r2, [r7, #4]
 8001a42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a44:	2300      	movs	r3, #0
 8001a46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a48:	f7ff ff3e 	bl	80018c8 <__NVIC_GetPriorityGrouping>
 8001a4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	68b9      	ldr	r1, [r7, #8]
 8001a52:	6978      	ldr	r0, [r7, #20]
 8001a54:	f7ff ff8e 	bl	8001974 <NVIC_EncodePriority>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a5e:	4611      	mov	r1, r2
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7ff ff5d 	bl	8001920 <__NVIC_SetPriority>
}
 8001a66:	bf00      	nop
 8001a68:	3718      	adds	r7, #24
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	b082      	sub	sp, #8
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	4603      	mov	r3, r0
 8001a76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff ff31 	bl	80018e4 <__NVIC_EnableIRQ>
}
 8001a82:	bf00      	nop
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b082      	sub	sp, #8
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f7ff ffa2 	bl	80019dc <SysTick_Config>
 8001a98:	4603      	mov	r3, r0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
	...

08001aa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b089      	sub	sp, #36	; 0x24
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aba:	2300      	movs	r3, #0
 8001abc:	61fb      	str	r3, [r7, #28]
 8001abe:	e16b      	b.n	8001d98 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	697a      	ldr	r2, [r7, #20]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ad4:	693a      	ldr	r2, [r7, #16]
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	f040 815a 	bne.w	8001d92 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f003 0303 	and.w	r3, r3, #3
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d005      	beq.n	8001af6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d130      	bne.n	8001b58 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	005b      	lsls	r3, r3, #1
 8001b00:	2203      	movs	r2, #3
 8001b02:	fa02 f303 	lsl.w	r3, r2, r3
 8001b06:	43db      	mvns	r3, r3
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	68da      	ldr	r2, [r3, #12]
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	005b      	lsls	r3, r3, #1
 8001b16:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1a:	69ba      	ldr	r2, [r7, #24]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	43db      	mvns	r3, r3
 8001b36:	69ba      	ldr	r2, [r7, #24]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	091b      	lsrs	r3, r3, #4
 8001b42:	f003 0201 	and.w	r2, r3, #1
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f003 0303 	and.w	r3, r3, #3
 8001b60:	2b03      	cmp	r3, #3
 8001b62:	d017      	beq.n	8001b94 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	2203      	movs	r2, #3
 8001b70:	fa02 f303 	lsl.w	r3, r2, r3
 8001b74:	43db      	mvns	r3, r3
 8001b76:	69ba      	ldr	r2, [r7, #24]
 8001b78:	4013      	ands	r3, r2
 8001b7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	689a      	ldr	r2, [r3, #8]
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f003 0303 	and.w	r3, r3, #3
 8001b9c:	2b02      	cmp	r3, #2
 8001b9e:	d123      	bne.n	8001be8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	08da      	lsrs	r2, r3, #3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	3208      	adds	r2, #8
 8001ba8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	f003 0307 	and.w	r3, r3, #7
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	220f      	movs	r2, #15
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	43db      	mvns	r3, r3
 8001bbe:	69ba      	ldr	r2, [r7, #24]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	691a      	ldr	r2, [r3, #16]
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	f003 0307 	and.w	r3, r3, #7
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	08da      	lsrs	r2, r3, #3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	3208      	adds	r2, #8
 8001be2:	69b9      	ldr	r1, [r7, #24]
 8001be4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	2203      	movs	r2, #3
 8001bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf8:	43db      	mvns	r3, r3
 8001bfa:	69ba      	ldr	r2, [r7, #24]
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f003 0203 	and.w	r2, r3, #3
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	f000 80b4 	beq.w	8001d92 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	60fb      	str	r3, [r7, #12]
 8001c2e:	4b60      	ldr	r3, [pc, #384]	; (8001db0 <HAL_GPIO_Init+0x30c>)
 8001c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c32:	4a5f      	ldr	r2, [pc, #380]	; (8001db0 <HAL_GPIO_Init+0x30c>)
 8001c34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c38:	6453      	str	r3, [r2, #68]	; 0x44
 8001c3a:	4b5d      	ldr	r3, [pc, #372]	; (8001db0 <HAL_GPIO_Init+0x30c>)
 8001c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c42:	60fb      	str	r3, [r7, #12]
 8001c44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c46:	4a5b      	ldr	r2, [pc, #364]	; (8001db4 <HAL_GPIO_Init+0x310>)
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	089b      	lsrs	r3, r3, #2
 8001c4c:	3302      	adds	r3, #2
 8001c4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	f003 0303 	and.w	r3, r3, #3
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	220f      	movs	r2, #15
 8001c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c62:	43db      	mvns	r3, r3
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	4013      	ands	r3, r2
 8001c68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a52      	ldr	r2, [pc, #328]	; (8001db8 <HAL_GPIO_Init+0x314>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d02b      	beq.n	8001cca <HAL_GPIO_Init+0x226>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a51      	ldr	r2, [pc, #324]	; (8001dbc <HAL_GPIO_Init+0x318>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d025      	beq.n	8001cc6 <HAL_GPIO_Init+0x222>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a50      	ldr	r2, [pc, #320]	; (8001dc0 <HAL_GPIO_Init+0x31c>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d01f      	beq.n	8001cc2 <HAL_GPIO_Init+0x21e>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a4f      	ldr	r2, [pc, #316]	; (8001dc4 <HAL_GPIO_Init+0x320>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d019      	beq.n	8001cbe <HAL_GPIO_Init+0x21a>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4a4e      	ldr	r2, [pc, #312]	; (8001dc8 <HAL_GPIO_Init+0x324>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d013      	beq.n	8001cba <HAL_GPIO_Init+0x216>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4a4d      	ldr	r2, [pc, #308]	; (8001dcc <HAL_GPIO_Init+0x328>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d00d      	beq.n	8001cb6 <HAL_GPIO_Init+0x212>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4a4c      	ldr	r2, [pc, #304]	; (8001dd0 <HAL_GPIO_Init+0x32c>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d007      	beq.n	8001cb2 <HAL_GPIO_Init+0x20e>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4a4b      	ldr	r2, [pc, #300]	; (8001dd4 <HAL_GPIO_Init+0x330>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d101      	bne.n	8001cae <HAL_GPIO_Init+0x20a>
 8001caa:	2307      	movs	r3, #7
 8001cac:	e00e      	b.n	8001ccc <HAL_GPIO_Init+0x228>
 8001cae:	2308      	movs	r3, #8
 8001cb0:	e00c      	b.n	8001ccc <HAL_GPIO_Init+0x228>
 8001cb2:	2306      	movs	r3, #6
 8001cb4:	e00a      	b.n	8001ccc <HAL_GPIO_Init+0x228>
 8001cb6:	2305      	movs	r3, #5
 8001cb8:	e008      	b.n	8001ccc <HAL_GPIO_Init+0x228>
 8001cba:	2304      	movs	r3, #4
 8001cbc:	e006      	b.n	8001ccc <HAL_GPIO_Init+0x228>
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e004      	b.n	8001ccc <HAL_GPIO_Init+0x228>
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	e002      	b.n	8001ccc <HAL_GPIO_Init+0x228>
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e000      	b.n	8001ccc <HAL_GPIO_Init+0x228>
 8001cca:	2300      	movs	r3, #0
 8001ccc:	69fa      	ldr	r2, [r7, #28]
 8001cce:	f002 0203 	and.w	r2, r2, #3
 8001cd2:	0092      	lsls	r2, r2, #2
 8001cd4:	4093      	lsls	r3, r2
 8001cd6:	69ba      	ldr	r2, [r7, #24]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cdc:	4935      	ldr	r1, [pc, #212]	; (8001db4 <HAL_GPIO_Init+0x310>)
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	089b      	lsrs	r3, r3, #2
 8001ce2:	3302      	adds	r3, #2
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cea:	4b3b      	ldr	r3, [pc, #236]	; (8001dd8 <HAL_GPIO_Init+0x334>)
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	43db      	mvns	r3, r3
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d003      	beq.n	8001d0e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001d06:	69ba      	ldr	r2, [r7, #24]
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d0e:	4a32      	ldr	r2, [pc, #200]	; (8001dd8 <HAL_GPIO_Init+0x334>)
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d14:	4b30      	ldr	r3, [pc, #192]	; (8001dd8 <HAL_GPIO_Init+0x334>)
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	43db      	mvns	r3, r3
 8001d1e:	69ba      	ldr	r2, [r7, #24]
 8001d20:	4013      	ands	r3, r2
 8001d22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d003      	beq.n	8001d38 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d38:	4a27      	ldr	r2, [pc, #156]	; (8001dd8 <HAL_GPIO_Init+0x334>)
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d3e:	4b26      	ldr	r3, [pc, #152]	; (8001dd8 <HAL_GPIO_Init+0x334>)
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	43db      	mvns	r3, r3
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d003      	beq.n	8001d62 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001d5a:	69ba      	ldr	r2, [r7, #24]
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d62:	4a1d      	ldr	r2, [pc, #116]	; (8001dd8 <HAL_GPIO_Init+0x334>)
 8001d64:	69bb      	ldr	r3, [r7, #24]
 8001d66:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d68:	4b1b      	ldr	r3, [pc, #108]	; (8001dd8 <HAL_GPIO_Init+0x334>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	43db      	mvns	r3, r3
 8001d72:	69ba      	ldr	r2, [r7, #24]
 8001d74:	4013      	ands	r3, r2
 8001d76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d003      	beq.n	8001d8c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d8c:	4a12      	ldr	r2, [pc, #72]	; (8001dd8 <HAL_GPIO_Init+0x334>)
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	3301      	adds	r3, #1
 8001d96:	61fb      	str	r3, [r7, #28]
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	2b0f      	cmp	r3, #15
 8001d9c:	f67f ae90 	bls.w	8001ac0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001da0:	bf00      	nop
 8001da2:	bf00      	nop
 8001da4:	3724      	adds	r7, #36	; 0x24
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	40023800 	.word	0x40023800
 8001db4:	40013800 	.word	0x40013800
 8001db8:	40020000 	.word	0x40020000
 8001dbc:	40020400 	.word	0x40020400
 8001dc0:	40020800 	.word	0x40020800
 8001dc4:	40020c00 	.word	0x40020c00
 8001dc8:	40021000 	.word	0x40021000
 8001dcc:	40021400 	.word	0x40021400
 8001dd0:	40021800 	.word	0x40021800
 8001dd4:	40021c00 	.word	0x40021c00
 8001dd8:	40013c00 	.word	0x40013c00

08001ddc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	460b      	mov	r3, r1
 8001de6:	807b      	strh	r3, [r7, #2]
 8001de8:	4613      	mov	r3, r2
 8001dea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001dec:	787b      	ldrb	r3, [r7, #1]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d003      	beq.n	8001dfa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001df2:	887a      	ldrh	r2, [r7, #2]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001df8:	e003      	b.n	8001e02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001dfa:	887b      	ldrh	r3, [r7, #2]
 8001dfc:	041a      	lsls	r2, r3, #16
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	619a      	str	r2, [r3, #24]
}
 8001e02:	bf00      	nop
 8001e04:	370c      	adds	r7, #12
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr

08001e0e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001e0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e10:	b08f      	sub	sp, #60	; 0x3c
 8001e12:	af0a      	add	r7, sp, #40	; 0x28
 8001e14:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d101      	bne.n	8001e20 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e054      	b.n	8001eca <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d106      	bne.n	8001e40 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f009 f93c 	bl	800b0b8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2203      	movs	r2, #3
 8001e44:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d102      	bne.n	8001e5a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2200      	movs	r2, #0
 8001e58:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f003 fc58 	bl	8005714 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	603b      	str	r3, [r7, #0]
 8001e6a:	687e      	ldr	r6, [r7, #4]
 8001e6c:	466d      	mov	r5, sp
 8001e6e:	f106 0410 	add.w	r4, r6, #16
 8001e72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e7a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e7e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e82:	1d33      	adds	r3, r6, #4
 8001e84:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e86:	6838      	ldr	r0, [r7, #0]
 8001e88:	f003 fbd2 	bl	8005630 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	2101      	movs	r1, #1
 8001e92:	4618      	mov	r0, r3
 8001e94:	f003 fc4f 	bl	8005736 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	603b      	str	r3, [r7, #0]
 8001e9e:	687e      	ldr	r6, [r7, #4]
 8001ea0:	466d      	mov	r5, sp
 8001ea2:	f106 0410 	add.w	r4, r6, #16
 8001ea6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ea8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001eaa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001eac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001eae:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001eb2:	e885 0003 	stmia.w	r5, {r0, r1}
 8001eb6:	1d33      	adds	r3, r6, #4
 8001eb8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001eba:	6838      	ldr	r0, [r7, #0]
 8001ebc:	f003 fdd8 	bl	8005a70 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3714      	adds	r7, #20
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ed2 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001ed2:	b590      	push	{r4, r7, lr}
 8001ed4:	b089      	sub	sp, #36	; 0x24
 8001ed6:	af04      	add	r7, sp, #16
 8001ed8:	6078      	str	r0, [r7, #4]
 8001eda:	4608      	mov	r0, r1
 8001edc:	4611      	mov	r1, r2
 8001ede:	461a      	mov	r2, r3
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	70fb      	strb	r3, [r7, #3]
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	70bb      	strb	r3, [r7, #2]
 8001ee8:	4613      	mov	r3, r2
 8001eea:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d101      	bne.n	8001efa <HAL_HCD_HC_Init+0x28>
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	e076      	b.n	8001fe8 <HAL_HCD_HC_Init+0x116>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2201      	movs	r2, #1
 8001efe:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001f02:	78fb      	ldrb	r3, [r7, #3]
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	212c      	movs	r1, #44	; 0x2c
 8001f08:	fb01 f303 	mul.w	r3, r1, r3
 8001f0c:	4413      	add	r3, r2
 8001f0e:	333d      	adds	r3, #61	; 0x3d
 8001f10:	2200      	movs	r2, #0
 8001f12:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001f14:	78fb      	ldrb	r3, [r7, #3]
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	212c      	movs	r1, #44	; 0x2c
 8001f1a:	fb01 f303 	mul.w	r3, r1, r3
 8001f1e:	4413      	add	r3, r2
 8001f20:	3338      	adds	r3, #56	; 0x38
 8001f22:	787a      	ldrb	r2, [r7, #1]
 8001f24:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001f26:	78fb      	ldrb	r3, [r7, #3]
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	212c      	movs	r1, #44	; 0x2c
 8001f2c:	fb01 f303 	mul.w	r3, r1, r3
 8001f30:	4413      	add	r3, r2
 8001f32:	3340      	adds	r3, #64	; 0x40
 8001f34:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001f36:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001f38:	78fb      	ldrb	r3, [r7, #3]
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	212c      	movs	r1, #44	; 0x2c
 8001f3e:	fb01 f303 	mul.w	r3, r1, r3
 8001f42:	4413      	add	r3, r2
 8001f44:	3339      	adds	r3, #57	; 0x39
 8001f46:	78fa      	ldrb	r2, [r7, #3]
 8001f48:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001f4a:	78fb      	ldrb	r3, [r7, #3]
 8001f4c:	687a      	ldr	r2, [r7, #4]
 8001f4e:	212c      	movs	r1, #44	; 0x2c
 8001f50:	fb01 f303 	mul.w	r3, r1, r3
 8001f54:	4413      	add	r3, r2
 8001f56:	333f      	adds	r3, #63	; 0x3f
 8001f58:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001f5c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001f5e:	78fb      	ldrb	r3, [r7, #3]
 8001f60:	78ba      	ldrb	r2, [r7, #2]
 8001f62:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001f66:	b2d0      	uxtb	r0, r2
 8001f68:	687a      	ldr	r2, [r7, #4]
 8001f6a:	212c      	movs	r1, #44	; 0x2c
 8001f6c:	fb01 f303 	mul.w	r3, r1, r3
 8001f70:	4413      	add	r3, r2
 8001f72:	333a      	adds	r3, #58	; 0x3a
 8001f74:	4602      	mov	r2, r0
 8001f76:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001f78:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	da09      	bge.n	8001f94 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001f80:	78fb      	ldrb	r3, [r7, #3]
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	212c      	movs	r1, #44	; 0x2c
 8001f86:	fb01 f303 	mul.w	r3, r1, r3
 8001f8a:	4413      	add	r3, r2
 8001f8c:	333b      	adds	r3, #59	; 0x3b
 8001f8e:	2201      	movs	r2, #1
 8001f90:	701a      	strb	r2, [r3, #0]
 8001f92:	e008      	b.n	8001fa6 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001f94:	78fb      	ldrb	r3, [r7, #3]
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	212c      	movs	r1, #44	; 0x2c
 8001f9a:	fb01 f303 	mul.w	r3, r1, r3
 8001f9e:	4413      	add	r3, r2
 8001fa0:	333b      	adds	r3, #59	; 0x3b
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001fa6:	78fb      	ldrb	r3, [r7, #3]
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	212c      	movs	r1, #44	; 0x2c
 8001fac:	fb01 f303 	mul.w	r3, r1, r3
 8001fb0:	4413      	add	r3, r2
 8001fb2:	333c      	adds	r3, #60	; 0x3c
 8001fb4:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001fb8:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6818      	ldr	r0, [r3, #0]
 8001fbe:	787c      	ldrb	r4, [r7, #1]
 8001fc0:	78ba      	ldrb	r2, [r7, #2]
 8001fc2:	78f9      	ldrb	r1, [r7, #3]
 8001fc4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001fc6:	9302      	str	r3, [sp, #8]
 8001fc8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001fcc:	9301      	str	r3, [sp, #4]
 8001fce:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001fd2:	9300      	str	r3, [sp, #0]
 8001fd4:	4623      	mov	r3, r4
 8001fd6:	f003 fed1 	bl	8005d7c <USB_HC_Init>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001fe6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3714      	adds	r7, #20
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd90      	pop	{r4, r7, pc}

08001ff0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002006:	2b01      	cmp	r3, #1
 8002008:	d101      	bne.n	800200e <HAL_HCD_HC_Halt+0x1e>
 800200a:	2302      	movs	r3, #2
 800200c:	e00f      	b.n	800202e <HAL_HCD_HC_Halt+0x3e>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2201      	movs	r2, #1
 8002012:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	78fa      	ldrb	r2, [r7, #3]
 800201c:	4611      	mov	r1, r2
 800201e:	4618      	mov	r0, r3
 8002020:	f004 f921 	bl	8006266 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2200      	movs	r2, #0
 8002028:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800202c:	7bfb      	ldrb	r3, [r7, #15]
}
 800202e:	4618      	mov	r0, r3
 8002030:	3710      	adds	r7, #16
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
	...

08002038 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	4608      	mov	r0, r1
 8002042:	4611      	mov	r1, r2
 8002044:	461a      	mov	r2, r3
 8002046:	4603      	mov	r3, r0
 8002048:	70fb      	strb	r3, [r7, #3]
 800204a:	460b      	mov	r3, r1
 800204c:	70bb      	strb	r3, [r7, #2]
 800204e:	4613      	mov	r3, r2
 8002050:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002052:	78fb      	ldrb	r3, [r7, #3]
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	212c      	movs	r1, #44	; 0x2c
 8002058:	fb01 f303 	mul.w	r3, r1, r3
 800205c:	4413      	add	r3, r2
 800205e:	333b      	adds	r3, #59	; 0x3b
 8002060:	78ba      	ldrb	r2, [r7, #2]
 8002062:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002064:	78fb      	ldrb	r3, [r7, #3]
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	212c      	movs	r1, #44	; 0x2c
 800206a:	fb01 f303 	mul.w	r3, r1, r3
 800206e:	4413      	add	r3, r2
 8002070:	333f      	adds	r3, #63	; 0x3f
 8002072:	787a      	ldrb	r2, [r7, #1]
 8002074:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002076:	7c3b      	ldrb	r3, [r7, #16]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d112      	bne.n	80020a2 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800207c:	78fb      	ldrb	r3, [r7, #3]
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	212c      	movs	r1, #44	; 0x2c
 8002082:	fb01 f303 	mul.w	r3, r1, r3
 8002086:	4413      	add	r3, r2
 8002088:	3342      	adds	r3, #66	; 0x42
 800208a:	2203      	movs	r2, #3
 800208c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800208e:	78fb      	ldrb	r3, [r7, #3]
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	212c      	movs	r1, #44	; 0x2c
 8002094:	fb01 f303 	mul.w	r3, r1, r3
 8002098:	4413      	add	r3, r2
 800209a:	333d      	adds	r3, #61	; 0x3d
 800209c:	7f3a      	ldrb	r2, [r7, #28]
 800209e:	701a      	strb	r2, [r3, #0]
 80020a0:	e008      	b.n	80020b4 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80020a2:	78fb      	ldrb	r3, [r7, #3]
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	212c      	movs	r1, #44	; 0x2c
 80020a8:	fb01 f303 	mul.w	r3, r1, r3
 80020ac:	4413      	add	r3, r2
 80020ae:	3342      	adds	r3, #66	; 0x42
 80020b0:	2202      	movs	r2, #2
 80020b2:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80020b4:	787b      	ldrb	r3, [r7, #1]
 80020b6:	2b03      	cmp	r3, #3
 80020b8:	f200 80c6 	bhi.w	8002248 <HAL_HCD_HC_SubmitRequest+0x210>
 80020bc:	a201      	add	r2, pc, #4	; (adr r2, 80020c4 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80020be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020c2:	bf00      	nop
 80020c4:	080020d5 	.word	0x080020d5
 80020c8:	08002235 	.word	0x08002235
 80020cc:	08002139 	.word	0x08002139
 80020d0:	080021b7 	.word	0x080021b7
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80020d4:	7c3b      	ldrb	r3, [r7, #16]
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	f040 80b8 	bne.w	800224c <HAL_HCD_HC_SubmitRequest+0x214>
 80020dc:	78bb      	ldrb	r3, [r7, #2]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	f040 80b4 	bne.w	800224c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80020e4:	8b3b      	ldrh	r3, [r7, #24]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d108      	bne.n	80020fc <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80020ea:	78fb      	ldrb	r3, [r7, #3]
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	212c      	movs	r1, #44	; 0x2c
 80020f0:	fb01 f303 	mul.w	r3, r1, r3
 80020f4:	4413      	add	r3, r2
 80020f6:	3355      	adds	r3, #85	; 0x55
 80020f8:	2201      	movs	r2, #1
 80020fa:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80020fc:	78fb      	ldrb	r3, [r7, #3]
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	212c      	movs	r1, #44	; 0x2c
 8002102:	fb01 f303 	mul.w	r3, r1, r3
 8002106:	4413      	add	r3, r2
 8002108:	3355      	adds	r3, #85	; 0x55
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d109      	bne.n	8002124 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002110:	78fb      	ldrb	r3, [r7, #3]
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	212c      	movs	r1, #44	; 0x2c
 8002116:	fb01 f303 	mul.w	r3, r1, r3
 800211a:	4413      	add	r3, r2
 800211c:	3342      	adds	r3, #66	; 0x42
 800211e:	2200      	movs	r2, #0
 8002120:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002122:	e093      	b.n	800224c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002124:	78fb      	ldrb	r3, [r7, #3]
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	212c      	movs	r1, #44	; 0x2c
 800212a:	fb01 f303 	mul.w	r3, r1, r3
 800212e:	4413      	add	r3, r2
 8002130:	3342      	adds	r3, #66	; 0x42
 8002132:	2202      	movs	r2, #2
 8002134:	701a      	strb	r2, [r3, #0]
      break;
 8002136:	e089      	b.n	800224c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002138:	78bb      	ldrb	r3, [r7, #2]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d11d      	bne.n	800217a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800213e:	78fb      	ldrb	r3, [r7, #3]
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	212c      	movs	r1, #44	; 0x2c
 8002144:	fb01 f303 	mul.w	r3, r1, r3
 8002148:	4413      	add	r3, r2
 800214a:	3355      	adds	r3, #85	; 0x55
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d109      	bne.n	8002166 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002152:	78fb      	ldrb	r3, [r7, #3]
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	212c      	movs	r1, #44	; 0x2c
 8002158:	fb01 f303 	mul.w	r3, r1, r3
 800215c:	4413      	add	r3, r2
 800215e:	3342      	adds	r3, #66	; 0x42
 8002160:	2200      	movs	r2, #0
 8002162:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002164:	e073      	b.n	800224e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002166:	78fb      	ldrb	r3, [r7, #3]
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	212c      	movs	r1, #44	; 0x2c
 800216c:	fb01 f303 	mul.w	r3, r1, r3
 8002170:	4413      	add	r3, r2
 8002172:	3342      	adds	r3, #66	; 0x42
 8002174:	2202      	movs	r2, #2
 8002176:	701a      	strb	r2, [r3, #0]
      break;
 8002178:	e069      	b.n	800224e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800217a:	78fb      	ldrb	r3, [r7, #3]
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	212c      	movs	r1, #44	; 0x2c
 8002180:	fb01 f303 	mul.w	r3, r1, r3
 8002184:	4413      	add	r3, r2
 8002186:	3354      	adds	r3, #84	; 0x54
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d109      	bne.n	80021a2 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800218e:	78fb      	ldrb	r3, [r7, #3]
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	212c      	movs	r1, #44	; 0x2c
 8002194:	fb01 f303 	mul.w	r3, r1, r3
 8002198:	4413      	add	r3, r2
 800219a:	3342      	adds	r3, #66	; 0x42
 800219c:	2200      	movs	r2, #0
 800219e:	701a      	strb	r2, [r3, #0]
      break;
 80021a0:	e055      	b.n	800224e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80021a2:	78fb      	ldrb	r3, [r7, #3]
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	212c      	movs	r1, #44	; 0x2c
 80021a8:	fb01 f303 	mul.w	r3, r1, r3
 80021ac:	4413      	add	r3, r2
 80021ae:	3342      	adds	r3, #66	; 0x42
 80021b0:	2202      	movs	r2, #2
 80021b2:	701a      	strb	r2, [r3, #0]
      break;
 80021b4:	e04b      	b.n	800224e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80021b6:	78bb      	ldrb	r3, [r7, #2]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d11d      	bne.n	80021f8 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80021bc:	78fb      	ldrb	r3, [r7, #3]
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	212c      	movs	r1, #44	; 0x2c
 80021c2:	fb01 f303 	mul.w	r3, r1, r3
 80021c6:	4413      	add	r3, r2
 80021c8:	3355      	adds	r3, #85	; 0x55
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d109      	bne.n	80021e4 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80021d0:	78fb      	ldrb	r3, [r7, #3]
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	212c      	movs	r1, #44	; 0x2c
 80021d6:	fb01 f303 	mul.w	r3, r1, r3
 80021da:	4413      	add	r3, r2
 80021dc:	3342      	adds	r3, #66	; 0x42
 80021de:	2200      	movs	r2, #0
 80021e0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80021e2:	e034      	b.n	800224e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80021e4:	78fb      	ldrb	r3, [r7, #3]
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	212c      	movs	r1, #44	; 0x2c
 80021ea:	fb01 f303 	mul.w	r3, r1, r3
 80021ee:	4413      	add	r3, r2
 80021f0:	3342      	adds	r3, #66	; 0x42
 80021f2:	2202      	movs	r2, #2
 80021f4:	701a      	strb	r2, [r3, #0]
      break;
 80021f6:	e02a      	b.n	800224e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80021f8:	78fb      	ldrb	r3, [r7, #3]
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	212c      	movs	r1, #44	; 0x2c
 80021fe:	fb01 f303 	mul.w	r3, r1, r3
 8002202:	4413      	add	r3, r2
 8002204:	3354      	adds	r3, #84	; 0x54
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d109      	bne.n	8002220 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800220c:	78fb      	ldrb	r3, [r7, #3]
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	212c      	movs	r1, #44	; 0x2c
 8002212:	fb01 f303 	mul.w	r3, r1, r3
 8002216:	4413      	add	r3, r2
 8002218:	3342      	adds	r3, #66	; 0x42
 800221a:	2200      	movs	r2, #0
 800221c:	701a      	strb	r2, [r3, #0]
      break;
 800221e:	e016      	b.n	800224e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002220:	78fb      	ldrb	r3, [r7, #3]
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	212c      	movs	r1, #44	; 0x2c
 8002226:	fb01 f303 	mul.w	r3, r1, r3
 800222a:	4413      	add	r3, r2
 800222c:	3342      	adds	r3, #66	; 0x42
 800222e:	2202      	movs	r2, #2
 8002230:	701a      	strb	r2, [r3, #0]
      break;
 8002232:	e00c      	b.n	800224e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002234:	78fb      	ldrb	r3, [r7, #3]
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	212c      	movs	r1, #44	; 0x2c
 800223a:	fb01 f303 	mul.w	r3, r1, r3
 800223e:	4413      	add	r3, r2
 8002240:	3342      	adds	r3, #66	; 0x42
 8002242:	2200      	movs	r2, #0
 8002244:	701a      	strb	r2, [r3, #0]
      break;
 8002246:	e002      	b.n	800224e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002248:	bf00      	nop
 800224a:	e000      	b.n	800224e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 800224c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800224e:	78fb      	ldrb	r3, [r7, #3]
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	212c      	movs	r1, #44	; 0x2c
 8002254:	fb01 f303 	mul.w	r3, r1, r3
 8002258:	4413      	add	r3, r2
 800225a:	3344      	adds	r3, #68	; 0x44
 800225c:	697a      	ldr	r2, [r7, #20]
 800225e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002260:	78fb      	ldrb	r3, [r7, #3]
 8002262:	8b3a      	ldrh	r2, [r7, #24]
 8002264:	6879      	ldr	r1, [r7, #4]
 8002266:	202c      	movs	r0, #44	; 0x2c
 8002268:	fb00 f303 	mul.w	r3, r0, r3
 800226c:	440b      	add	r3, r1
 800226e:	334c      	adds	r3, #76	; 0x4c
 8002270:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002272:	78fb      	ldrb	r3, [r7, #3]
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	212c      	movs	r1, #44	; 0x2c
 8002278:	fb01 f303 	mul.w	r3, r1, r3
 800227c:	4413      	add	r3, r2
 800227e:	3360      	adds	r3, #96	; 0x60
 8002280:	2200      	movs	r2, #0
 8002282:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002284:	78fb      	ldrb	r3, [r7, #3]
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	212c      	movs	r1, #44	; 0x2c
 800228a:	fb01 f303 	mul.w	r3, r1, r3
 800228e:	4413      	add	r3, r2
 8002290:	3350      	adds	r3, #80	; 0x50
 8002292:	2200      	movs	r2, #0
 8002294:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002296:	78fb      	ldrb	r3, [r7, #3]
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	212c      	movs	r1, #44	; 0x2c
 800229c:	fb01 f303 	mul.w	r3, r1, r3
 80022a0:	4413      	add	r3, r2
 80022a2:	3339      	adds	r3, #57	; 0x39
 80022a4:	78fa      	ldrb	r2, [r7, #3]
 80022a6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80022a8:	78fb      	ldrb	r3, [r7, #3]
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	212c      	movs	r1, #44	; 0x2c
 80022ae:	fb01 f303 	mul.w	r3, r1, r3
 80022b2:	4413      	add	r3, r2
 80022b4:	3361      	adds	r3, #97	; 0x61
 80022b6:	2200      	movs	r2, #0
 80022b8:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6818      	ldr	r0, [r3, #0]
 80022be:	78fb      	ldrb	r3, [r7, #3]
 80022c0:	222c      	movs	r2, #44	; 0x2c
 80022c2:	fb02 f303 	mul.w	r3, r2, r3
 80022c6:	3338      	adds	r3, #56	; 0x38
 80022c8:	687a      	ldr	r2, [r7, #4]
 80022ca:	18d1      	adds	r1, r2, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	691b      	ldr	r3, [r3, #16]
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	461a      	mov	r2, r3
 80022d4:	f003 fe74 	bl	8005fc0 <USB_HC_StartXfer>
 80022d8:	4603      	mov	r3, r0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3708      	adds	r7, #8
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop

080022e4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b086      	sub	sp, #24
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4618      	mov	r0, r3
 80022fc:	f003 fb75 	bl	80059ea <USB_GetMode>
 8002300:	4603      	mov	r3, r0
 8002302:	2b01      	cmp	r3, #1
 8002304:	f040 80f6 	bne.w	80024f4 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4618      	mov	r0, r3
 800230e:	f003 fb59 	bl	80059c4 <USB_ReadInterrupts>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	f000 80ec 	beq.w	80024f2 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4618      	mov	r0, r3
 8002320:	f003 fb50 	bl	80059c4 <USB_ReadInterrupts>
 8002324:	4603      	mov	r3, r0
 8002326:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800232a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800232e:	d104      	bne.n	800233a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002338:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4618      	mov	r0, r3
 8002340:	f003 fb40 	bl	80059c4 <USB_ReadInterrupts>
 8002344:	4603      	mov	r3, r0
 8002346:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800234a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800234e:	d104      	bne.n	800235a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002358:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4618      	mov	r0, r3
 8002360:	f003 fb30 	bl	80059c4 <USB_ReadInterrupts>
 8002364:	4603      	mov	r3, r0
 8002366:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800236a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800236e:	d104      	bne.n	800237a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002378:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4618      	mov	r0, r3
 8002380:	f003 fb20 	bl	80059c4 <USB_ReadInterrupts>
 8002384:	4603      	mov	r3, r0
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	2b02      	cmp	r3, #2
 800238c:	d103      	bne.n	8002396 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2202      	movs	r2, #2
 8002394:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4618      	mov	r0, r3
 800239c:	f003 fb12 	bl	80059c4 <USB_ReadInterrupts>
 80023a0:	4603      	mov	r3, r0
 80023a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80023a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80023aa:	d11c      	bne.n	80023e6 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80023b4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0301 	and.w	r3, r3, #1
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d10f      	bne.n	80023e6 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80023c6:	2110      	movs	r1, #16
 80023c8:	6938      	ldr	r0, [r7, #16]
 80023ca:	f003 fa01 	bl	80057d0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80023ce:	6938      	ldr	r0, [r7, #16]
 80023d0:	f003 fa32 	bl	8005838 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2101      	movs	r1, #1
 80023da:	4618      	mov	r0, r3
 80023dc:	f003 fc08 	bl	8005bf0 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f008 fee7 	bl	800b1b4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4618      	mov	r0, r3
 80023ec:	f003 faea 	bl	80059c4 <USB_ReadInterrupts>
 80023f0:	4603      	mov	r3, r0
 80023f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023f6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023fa:	d102      	bne.n	8002402 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f001 f89e 	bl	800353e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4618      	mov	r0, r3
 8002408:	f003 fadc 	bl	80059c4 <USB_ReadInterrupts>
 800240c:	4603      	mov	r3, r0
 800240e:	f003 0308 	and.w	r3, r3, #8
 8002412:	2b08      	cmp	r3, #8
 8002414:	d106      	bne.n	8002424 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f008 feb0 	bl	800b17c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2208      	movs	r2, #8
 8002422:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4618      	mov	r0, r3
 800242a:	f003 facb 	bl	80059c4 <USB_ReadInterrupts>
 800242e:	4603      	mov	r3, r0
 8002430:	f003 0310 	and.w	r3, r3, #16
 8002434:	2b10      	cmp	r3, #16
 8002436:	d101      	bne.n	800243c <HAL_HCD_IRQHandler+0x158>
 8002438:	2301      	movs	r3, #1
 800243a:	e000      	b.n	800243e <HAL_HCD_IRQHandler+0x15a>
 800243c:	2300      	movs	r3, #0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d012      	beq.n	8002468 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	699a      	ldr	r2, [r3, #24]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f022 0210 	bic.w	r2, r2, #16
 8002450:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f000 ffa1 	bl	800339a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	699a      	ldr	r2, [r3, #24]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f042 0210 	orr.w	r2, r2, #16
 8002466:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4618      	mov	r0, r3
 800246e:	f003 faa9 	bl	80059c4 <USB_ReadInterrupts>
 8002472:	4603      	mov	r3, r0
 8002474:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002478:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800247c:	d13a      	bne.n	80024f4 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4618      	mov	r0, r3
 8002484:	f003 fede 	bl	8006244 <USB_HC_ReadInterrupt>
 8002488:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800248a:	2300      	movs	r3, #0
 800248c:	617b      	str	r3, [r7, #20]
 800248e:	e025      	b.n	80024dc <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	f003 030f 	and.w	r3, r3, #15
 8002496:	68ba      	ldr	r2, [r7, #8]
 8002498:	fa22 f303 	lsr.w	r3, r2, r3
 800249c:	f003 0301 	and.w	r3, r3, #1
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d018      	beq.n	80024d6 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	015a      	lsls	r2, r3, #5
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	4413      	add	r3, r2
 80024ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024ba:	d106      	bne.n	80024ca <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	4619      	mov	r1, r3
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f000 f8ab 	bl	800261e <HCD_HC_IN_IRQHandler>
 80024c8:	e005      	b.n	80024d6 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	4619      	mov	r1, r3
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f000 fbf9 	bl	8002cc8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	3301      	adds	r3, #1
 80024da:	617b      	str	r3, [r7, #20]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	697a      	ldr	r2, [r7, #20]
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d3d4      	bcc.n	8002490 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024ee:	615a      	str	r2, [r3, #20]
 80024f0:	e000      	b.n	80024f4 <HAL_HCD_IRQHandler+0x210>
      return;
 80024f2:	bf00      	nop
    }
  }
}
 80024f4:	3718      	adds	r7, #24
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}

080024fa <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80024fa:	b580      	push	{r7, lr}
 80024fc:	b082      	sub	sp, #8
 80024fe:	af00      	add	r7, sp, #0
 8002500:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002508:	2b01      	cmp	r3, #1
 800250a:	d101      	bne.n	8002510 <HAL_HCD_Start+0x16>
 800250c:	2302      	movs	r3, #2
 800250e:	e013      	b.n	8002538 <HAL_HCD_Start+0x3e>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2201      	movs	r2, #1
 8002514:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2101      	movs	r1, #1
 800251e:	4618      	mov	r0, r3
 8002520:	f003 fbca 	bl	8005cb8 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4618      	mov	r0, r3
 800252a:	f003 f8e2 	bl	80056f2 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002536:	2300      	movs	r3, #0
}
 8002538:	4618      	mov	r0, r3
 800253a:	3708      	adds	r7, #8
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}

08002540 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800254e:	2b01      	cmp	r3, #1
 8002550:	d101      	bne.n	8002556 <HAL_HCD_Stop+0x16>
 8002552:	2302      	movs	r3, #2
 8002554:	e00d      	b.n	8002572 <HAL_HCD_Stop+0x32>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2201      	movs	r2, #1
 800255a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4618      	mov	r0, r3
 8002564:	f003 ffb8 	bl	80064d8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2200      	movs	r2, #0
 800256c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002570:	2300      	movs	r3, #0
}
 8002572:	4618      	mov	r0, r3
 8002574:	3708      	adds	r7, #8
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}

0800257a <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800257a:	b580      	push	{r7, lr}
 800257c:	b082      	sub	sp, #8
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4618      	mov	r0, r3
 8002588:	f003 fb6c 	bl	8005c64 <USB_ResetPort>
 800258c:	4603      	mov	r3, r0
}
 800258e:	4618      	mov	r0, r3
 8002590:	3708      	adds	r7, #8
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}

08002596 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002596:	b480      	push	{r7}
 8002598:	b083      	sub	sp, #12
 800259a:	af00      	add	r7, sp, #0
 800259c:	6078      	str	r0, [r7, #4]
 800259e:	460b      	mov	r3, r1
 80025a0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80025a2:	78fb      	ldrb	r3, [r7, #3]
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	212c      	movs	r1, #44	; 0x2c
 80025a8:	fb01 f303 	mul.w	r3, r1, r3
 80025ac:	4413      	add	r3, r2
 80025ae:	3360      	adds	r3, #96	; 0x60
 80025b0:	781b      	ldrb	r3, [r3, #0]
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	370c      	adds	r7, #12
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr

080025be <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80025be:	b480      	push	{r7}
 80025c0:	b083      	sub	sp, #12
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
 80025c6:	460b      	mov	r3, r1
 80025c8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80025ca:	78fb      	ldrb	r3, [r7, #3]
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	212c      	movs	r1, #44	; 0x2c
 80025d0:	fb01 f303 	mul.w	r3, r1, r3
 80025d4:	4413      	add	r3, r2
 80025d6:	3350      	adds	r3, #80	; 0x50
 80025d8:	681b      	ldr	r3, [r3, #0]
}
 80025da:	4618      	mov	r0, r3
 80025dc:	370c      	adds	r7, #12
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr

080025e6 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80025e6:	b580      	push	{r7, lr}
 80025e8:	b082      	sub	sp, #8
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4618      	mov	r0, r3
 80025f4:	f003 fbb0 	bl	8005d58 <USB_GetCurrentFrame>
 80025f8:	4603      	mov	r3, r0
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3708      	adds	r7, #8
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}

08002602 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002602:	b580      	push	{r7, lr}
 8002604:	b082      	sub	sp, #8
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4618      	mov	r0, r3
 8002610:	f003 fb8b 	bl	8005d2a <USB_GetHostSpeed>
 8002614:	4603      	mov	r3, r0
}
 8002616:	4618      	mov	r0, r3
 8002618:	3708      	adds	r7, #8
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}

0800261e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800261e:	b580      	push	{r7, lr}
 8002620:	b086      	sub	sp, #24
 8002622:	af00      	add	r7, sp, #0
 8002624:	6078      	str	r0, [r7, #4]
 8002626:	460b      	mov	r3, r1
 8002628:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002634:	78fb      	ldrb	r3, [r7, #3]
 8002636:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	015a      	lsls	r2, r3, #5
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	4413      	add	r3, r2
 8002640:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	f003 0304 	and.w	r3, r3, #4
 800264a:	2b04      	cmp	r3, #4
 800264c:	d11a      	bne.n	8002684 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	015a      	lsls	r2, r3, #5
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	4413      	add	r3, r2
 8002656:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800265a:	461a      	mov	r2, r3
 800265c:	2304      	movs	r3, #4
 800265e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	212c      	movs	r1, #44	; 0x2c
 8002666:	fb01 f303 	mul.w	r3, r1, r3
 800266a:	4413      	add	r3, r2
 800266c:	3361      	adds	r3, #97	; 0x61
 800266e:	2206      	movs	r2, #6
 8002670:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	68fa      	ldr	r2, [r7, #12]
 8002678:	b2d2      	uxtb	r2, r2
 800267a:	4611      	mov	r1, r2
 800267c:	4618      	mov	r0, r3
 800267e:	f003 fdf2 	bl	8006266 <USB_HC_Halt>
 8002682:	e0af      	b.n	80027e4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	015a      	lsls	r2, r3, #5
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	4413      	add	r3, r2
 800268c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002696:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800269a:	d11b      	bne.n	80026d4 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	015a      	lsls	r2, r3, #5
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	4413      	add	r3, r2
 80026a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026a8:	461a      	mov	r2, r3
 80026aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026ae:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	212c      	movs	r1, #44	; 0x2c
 80026b6:	fb01 f303 	mul.w	r3, r1, r3
 80026ba:	4413      	add	r3, r2
 80026bc:	3361      	adds	r3, #97	; 0x61
 80026be:	2207      	movs	r2, #7
 80026c0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	68fa      	ldr	r2, [r7, #12]
 80026c8:	b2d2      	uxtb	r2, r2
 80026ca:	4611      	mov	r1, r2
 80026cc:	4618      	mov	r0, r3
 80026ce:	f003 fdca 	bl	8006266 <USB_HC_Halt>
 80026d2:	e087      	b.n	80027e4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	015a      	lsls	r2, r3, #5
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	4413      	add	r3, r2
 80026dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	f003 0320 	and.w	r3, r3, #32
 80026e6:	2b20      	cmp	r3, #32
 80026e8:	d109      	bne.n	80026fe <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	015a      	lsls	r2, r3, #5
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	4413      	add	r3, r2
 80026f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026f6:	461a      	mov	r2, r3
 80026f8:	2320      	movs	r3, #32
 80026fa:	6093      	str	r3, [r2, #8]
 80026fc:	e072      	b.n	80027e4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	015a      	lsls	r2, r3, #5
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	4413      	add	r3, r2
 8002706:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	f003 0308 	and.w	r3, r3, #8
 8002710:	2b08      	cmp	r3, #8
 8002712:	d11a      	bne.n	800274a <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	015a      	lsls	r2, r3, #5
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	4413      	add	r3, r2
 800271c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002720:	461a      	mov	r2, r3
 8002722:	2308      	movs	r3, #8
 8002724:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	212c      	movs	r1, #44	; 0x2c
 800272c:	fb01 f303 	mul.w	r3, r1, r3
 8002730:	4413      	add	r3, r2
 8002732:	3361      	adds	r3, #97	; 0x61
 8002734:	2205      	movs	r2, #5
 8002736:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	68fa      	ldr	r2, [r7, #12]
 800273e:	b2d2      	uxtb	r2, r2
 8002740:	4611      	mov	r1, r2
 8002742:	4618      	mov	r0, r3
 8002744:	f003 fd8f 	bl	8006266 <USB_HC_Halt>
 8002748:	e04c      	b.n	80027e4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	015a      	lsls	r2, r3, #5
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	4413      	add	r3, r2
 8002752:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800275c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002760:	d11b      	bne.n	800279a <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	015a      	lsls	r2, r3, #5
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	4413      	add	r3, r2
 800276a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800276e:	461a      	mov	r2, r3
 8002770:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002774:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	212c      	movs	r1, #44	; 0x2c
 800277c:	fb01 f303 	mul.w	r3, r1, r3
 8002780:	4413      	add	r3, r2
 8002782:	3361      	adds	r3, #97	; 0x61
 8002784:	2208      	movs	r2, #8
 8002786:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	68fa      	ldr	r2, [r7, #12]
 800278e:	b2d2      	uxtb	r2, r2
 8002790:	4611      	mov	r1, r2
 8002792:	4618      	mov	r0, r3
 8002794:	f003 fd67 	bl	8006266 <USB_HC_Halt>
 8002798:	e024      	b.n	80027e4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	015a      	lsls	r2, r3, #5
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	4413      	add	r3, r2
 80027a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027ac:	2b80      	cmp	r3, #128	; 0x80
 80027ae:	d119      	bne.n	80027e4 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	015a      	lsls	r2, r3, #5
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	4413      	add	r3, r2
 80027b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027bc:	461a      	mov	r2, r3
 80027be:	2380      	movs	r3, #128	; 0x80
 80027c0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	212c      	movs	r1, #44	; 0x2c
 80027c8:	fb01 f303 	mul.w	r3, r1, r3
 80027cc:	4413      	add	r3, r2
 80027ce:	3361      	adds	r3, #97	; 0x61
 80027d0:	2206      	movs	r2, #6
 80027d2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	68fa      	ldr	r2, [r7, #12]
 80027da:	b2d2      	uxtb	r2, r2
 80027dc:	4611      	mov	r1, r2
 80027de:	4618      	mov	r0, r3
 80027e0:	f003 fd41 	bl	8006266 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	015a      	lsls	r2, r3, #5
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	4413      	add	r3, r2
 80027ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027fa:	d112      	bne.n	8002822 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	68fa      	ldr	r2, [r7, #12]
 8002802:	b2d2      	uxtb	r2, r2
 8002804:	4611      	mov	r1, r2
 8002806:	4618      	mov	r0, r3
 8002808:	f003 fd2d 	bl	8006266 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	015a      	lsls	r2, r3, #5
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	4413      	add	r3, r2
 8002814:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002818:	461a      	mov	r2, r3
 800281a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800281e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002820:	e24e      	b.n	8002cc0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	015a      	lsls	r2, r3, #5
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	4413      	add	r3, r2
 800282a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	f003 0301 	and.w	r3, r3, #1
 8002834:	2b01      	cmp	r3, #1
 8002836:	f040 80df 	bne.w	80029f8 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	691b      	ldr	r3, [r3, #16]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d019      	beq.n	8002876 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	212c      	movs	r1, #44	; 0x2c
 8002848:	fb01 f303 	mul.w	r3, r1, r3
 800284c:	4413      	add	r3, r2
 800284e:	3348      	adds	r3, #72	; 0x48
 8002850:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	0159      	lsls	r1, r3, #5
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	440b      	add	r3, r1
 800285a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800285e:	691b      	ldr	r3, [r3, #16]
 8002860:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002864:	1ad2      	subs	r2, r2, r3
 8002866:	6879      	ldr	r1, [r7, #4]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	202c      	movs	r0, #44	; 0x2c
 800286c:	fb00 f303 	mul.w	r3, r0, r3
 8002870:	440b      	add	r3, r1
 8002872:	3350      	adds	r3, #80	; 0x50
 8002874:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	212c      	movs	r1, #44	; 0x2c
 800287c:	fb01 f303 	mul.w	r3, r1, r3
 8002880:	4413      	add	r3, r2
 8002882:	3361      	adds	r3, #97	; 0x61
 8002884:	2201      	movs	r2, #1
 8002886:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	212c      	movs	r1, #44	; 0x2c
 800288e:	fb01 f303 	mul.w	r3, r1, r3
 8002892:	4413      	add	r3, r2
 8002894:	335c      	adds	r3, #92	; 0x5c
 8002896:	2200      	movs	r2, #0
 8002898:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	015a      	lsls	r2, r3, #5
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	4413      	add	r3, r2
 80028a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028a6:	461a      	mov	r2, r3
 80028a8:	2301      	movs	r3, #1
 80028aa:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	212c      	movs	r1, #44	; 0x2c
 80028b2:	fb01 f303 	mul.w	r3, r1, r3
 80028b6:	4413      	add	r3, r2
 80028b8:	333f      	adds	r3, #63	; 0x3f
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d009      	beq.n	80028d4 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	212c      	movs	r1, #44	; 0x2c
 80028c6:	fb01 f303 	mul.w	r3, r1, r3
 80028ca:	4413      	add	r3, r2
 80028cc:	333f      	adds	r3, #63	; 0x3f
 80028ce:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d111      	bne.n	80028f8 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	68fa      	ldr	r2, [r7, #12]
 80028da:	b2d2      	uxtb	r2, r2
 80028dc:	4611      	mov	r1, r2
 80028de:	4618      	mov	r0, r3
 80028e0:	f003 fcc1 	bl	8006266 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	015a      	lsls	r2, r3, #5
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	4413      	add	r3, r2
 80028ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028f0:	461a      	mov	r2, r3
 80028f2:	2310      	movs	r3, #16
 80028f4:	6093      	str	r3, [r2, #8]
 80028f6:	e03a      	b.n	800296e <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	212c      	movs	r1, #44	; 0x2c
 80028fe:	fb01 f303 	mul.w	r3, r1, r3
 8002902:	4413      	add	r3, r2
 8002904:	333f      	adds	r3, #63	; 0x3f
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	2b03      	cmp	r3, #3
 800290a:	d009      	beq.n	8002920 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	212c      	movs	r1, #44	; 0x2c
 8002912:	fb01 f303 	mul.w	r3, r1, r3
 8002916:	4413      	add	r3, r2
 8002918:	333f      	adds	r3, #63	; 0x3f
 800291a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800291c:	2b01      	cmp	r3, #1
 800291e:	d126      	bne.n	800296e <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	015a      	lsls	r2, r3, #5
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	4413      	add	r3, r2
 8002928:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	0151      	lsls	r1, r2, #5
 8002932:	693a      	ldr	r2, [r7, #16]
 8002934:	440a      	add	r2, r1
 8002936:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800293a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800293e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	212c      	movs	r1, #44	; 0x2c
 8002946:	fb01 f303 	mul.w	r3, r1, r3
 800294a:	4413      	add	r3, r2
 800294c:	3360      	adds	r3, #96	; 0x60
 800294e:	2201      	movs	r2, #1
 8002950:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	b2d9      	uxtb	r1, r3
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	202c      	movs	r0, #44	; 0x2c
 800295c:	fb00 f303 	mul.w	r3, r0, r3
 8002960:	4413      	add	r3, r2
 8002962:	3360      	adds	r3, #96	; 0x60
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	461a      	mov	r2, r3
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	f008 fc31 	bl	800b1d0 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	691b      	ldr	r3, [r3, #16]
 8002972:	2b01      	cmp	r3, #1
 8002974:	d12b      	bne.n	80029ce <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	212c      	movs	r1, #44	; 0x2c
 800297c:	fb01 f303 	mul.w	r3, r1, r3
 8002980:	4413      	add	r3, r2
 8002982:	3348      	adds	r3, #72	; 0x48
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	6879      	ldr	r1, [r7, #4]
 8002988:	68fa      	ldr	r2, [r7, #12]
 800298a:	202c      	movs	r0, #44	; 0x2c
 800298c:	fb00 f202 	mul.w	r2, r0, r2
 8002990:	440a      	add	r2, r1
 8002992:	3240      	adds	r2, #64	; 0x40
 8002994:	8812      	ldrh	r2, [r2, #0]
 8002996:	fbb3 f3f2 	udiv	r3, r3, r2
 800299a:	f003 0301 	and.w	r3, r3, #1
 800299e:	2b00      	cmp	r3, #0
 80029a0:	f000 818e 	beq.w	8002cc0 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	212c      	movs	r1, #44	; 0x2c
 80029aa:	fb01 f303 	mul.w	r3, r1, r3
 80029ae:	4413      	add	r3, r2
 80029b0:	3354      	adds	r3, #84	; 0x54
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	f083 0301 	eor.w	r3, r3, #1
 80029b8:	b2d8      	uxtb	r0, r3
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	212c      	movs	r1, #44	; 0x2c
 80029c0:	fb01 f303 	mul.w	r3, r1, r3
 80029c4:	4413      	add	r3, r2
 80029c6:	3354      	adds	r3, #84	; 0x54
 80029c8:	4602      	mov	r2, r0
 80029ca:	701a      	strb	r2, [r3, #0]
}
 80029cc:	e178      	b.n	8002cc0 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	212c      	movs	r1, #44	; 0x2c
 80029d4:	fb01 f303 	mul.w	r3, r1, r3
 80029d8:	4413      	add	r3, r2
 80029da:	3354      	adds	r3, #84	; 0x54
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	f083 0301 	eor.w	r3, r3, #1
 80029e2:	b2d8      	uxtb	r0, r3
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	212c      	movs	r1, #44	; 0x2c
 80029ea:	fb01 f303 	mul.w	r3, r1, r3
 80029ee:	4413      	add	r3, r2
 80029f0:	3354      	adds	r3, #84	; 0x54
 80029f2:	4602      	mov	r2, r0
 80029f4:	701a      	strb	r2, [r3, #0]
}
 80029f6:	e163      	b.n	8002cc0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	015a      	lsls	r2, r3, #5
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	4413      	add	r3, r2
 8002a00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	f003 0302 	and.w	r3, r3, #2
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	f040 80f6 	bne.w	8002bfc <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	212c      	movs	r1, #44	; 0x2c
 8002a16:	fb01 f303 	mul.w	r3, r1, r3
 8002a1a:	4413      	add	r3, r2
 8002a1c:	3361      	adds	r3, #97	; 0x61
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d109      	bne.n	8002a38 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	212c      	movs	r1, #44	; 0x2c
 8002a2a:	fb01 f303 	mul.w	r3, r1, r3
 8002a2e:	4413      	add	r3, r2
 8002a30:	3360      	adds	r3, #96	; 0x60
 8002a32:	2201      	movs	r2, #1
 8002a34:	701a      	strb	r2, [r3, #0]
 8002a36:	e0c9      	b.n	8002bcc <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	212c      	movs	r1, #44	; 0x2c
 8002a3e:	fb01 f303 	mul.w	r3, r1, r3
 8002a42:	4413      	add	r3, r2
 8002a44:	3361      	adds	r3, #97	; 0x61
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	2b05      	cmp	r3, #5
 8002a4a:	d109      	bne.n	8002a60 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	212c      	movs	r1, #44	; 0x2c
 8002a52:	fb01 f303 	mul.w	r3, r1, r3
 8002a56:	4413      	add	r3, r2
 8002a58:	3360      	adds	r3, #96	; 0x60
 8002a5a:	2205      	movs	r2, #5
 8002a5c:	701a      	strb	r2, [r3, #0]
 8002a5e:	e0b5      	b.n	8002bcc <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	212c      	movs	r1, #44	; 0x2c
 8002a66:	fb01 f303 	mul.w	r3, r1, r3
 8002a6a:	4413      	add	r3, r2
 8002a6c:	3361      	adds	r3, #97	; 0x61
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	2b06      	cmp	r3, #6
 8002a72:	d009      	beq.n	8002a88 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	212c      	movs	r1, #44	; 0x2c
 8002a7a:	fb01 f303 	mul.w	r3, r1, r3
 8002a7e:	4413      	add	r3, r2
 8002a80:	3361      	adds	r3, #97	; 0x61
 8002a82:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002a84:	2b08      	cmp	r3, #8
 8002a86:	d150      	bne.n	8002b2a <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	212c      	movs	r1, #44	; 0x2c
 8002a8e:	fb01 f303 	mul.w	r3, r1, r3
 8002a92:	4413      	add	r3, r2
 8002a94:	335c      	adds	r3, #92	; 0x5c
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	1c5a      	adds	r2, r3, #1
 8002a9a:	6879      	ldr	r1, [r7, #4]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	202c      	movs	r0, #44	; 0x2c
 8002aa0:	fb00 f303 	mul.w	r3, r0, r3
 8002aa4:	440b      	add	r3, r1
 8002aa6:	335c      	adds	r3, #92	; 0x5c
 8002aa8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	212c      	movs	r1, #44	; 0x2c
 8002ab0:	fb01 f303 	mul.w	r3, r1, r3
 8002ab4:	4413      	add	r3, r2
 8002ab6:	335c      	adds	r3, #92	; 0x5c
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d912      	bls.n	8002ae4 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	212c      	movs	r1, #44	; 0x2c
 8002ac4:	fb01 f303 	mul.w	r3, r1, r3
 8002ac8:	4413      	add	r3, r2
 8002aca:	335c      	adds	r3, #92	; 0x5c
 8002acc:	2200      	movs	r2, #0
 8002ace:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	212c      	movs	r1, #44	; 0x2c
 8002ad6:	fb01 f303 	mul.w	r3, r1, r3
 8002ada:	4413      	add	r3, r2
 8002adc:	3360      	adds	r3, #96	; 0x60
 8002ade:	2204      	movs	r2, #4
 8002ae0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002ae2:	e073      	b.n	8002bcc <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	212c      	movs	r1, #44	; 0x2c
 8002aea:	fb01 f303 	mul.w	r3, r1, r3
 8002aee:	4413      	add	r3, r2
 8002af0:	3360      	adds	r3, #96	; 0x60
 8002af2:	2202      	movs	r2, #2
 8002af4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	015a      	lsls	r2, r3, #5
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	4413      	add	r3, r2
 8002afe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b0c:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b14:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	015a      	lsls	r2, r3, #5
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	4413      	add	r3, r2
 8002b1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b22:	461a      	mov	r2, r3
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002b28:	e050      	b.n	8002bcc <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	212c      	movs	r1, #44	; 0x2c
 8002b30:	fb01 f303 	mul.w	r3, r1, r3
 8002b34:	4413      	add	r3, r2
 8002b36:	3361      	adds	r3, #97	; 0x61
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	2b03      	cmp	r3, #3
 8002b3c:	d122      	bne.n	8002b84 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	212c      	movs	r1, #44	; 0x2c
 8002b44:	fb01 f303 	mul.w	r3, r1, r3
 8002b48:	4413      	add	r3, r2
 8002b4a:	3360      	adds	r3, #96	; 0x60
 8002b4c:	2202      	movs	r2, #2
 8002b4e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	015a      	lsls	r2, r3, #5
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	4413      	add	r3, r2
 8002b58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b66:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b6e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	015a      	lsls	r2, r3, #5
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	4413      	add	r3, r2
 8002b78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	6013      	str	r3, [r2, #0]
 8002b82:	e023      	b.n	8002bcc <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	212c      	movs	r1, #44	; 0x2c
 8002b8a:	fb01 f303 	mul.w	r3, r1, r3
 8002b8e:	4413      	add	r3, r2
 8002b90:	3361      	adds	r3, #97	; 0x61
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	2b07      	cmp	r3, #7
 8002b96:	d119      	bne.n	8002bcc <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	212c      	movs	r1, #44	; 0x2c
 8002b9e:	fb01 f303 	mul.w	r3, r1, r3
 8002ba2:	4413      	add	r3, r2
 8002ba4:	335c      	adds	r3, #92	; 0x5c
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	1c5a      	adds	r2, r3, #1
 8002baa:	6879      	ldr	r1, [r7, #4]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	202c      	movs	r0, #44	; 0x2c
 8002bb0:	fb00 f303 	mul.w	r3, r0, r3
 8002bb4:	440b      	add	r3, r1
 8002bb6:	335c      	adds	r3, #92	; 0x5c
 8002bb8:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	212c      	movs	r1, #44	; 0x2c
 8002bc0:	fb01 f303 	mul.w	r3, r1, r3
 8002bc4:	4413      	add	r3, r2
 8002bc6:	3360      	adds	r3, #96	; 0x60
 8002bc8:	2204      	movs	r2, #4
 8002bca:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	015a      	lsls	r2, r3, #5
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	4413      	add	r3, r2
 8002bd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bd8:	461a      	mov	r2, r3
 8002bda:	2302      	movs	r3, #2
 8002bdc:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	b2d9      	uxtb	r1, r3
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	202c      	movs	r0, #44	; 0x2c
 8002be8:	fb00 f303 	mul.w	r3, r0, r3
 8002bec:	4413      	add	r3, r2
 8002bee:	3360      	adds	r3, #96	; 0x60
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f008 faeb 	bl	800b1d0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002bfa:	e061      	b.n	8002cc0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	015a      	lsls	r2, r3, #5
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	4413      	add	r3, r2
 8002c04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	f003 0310 	and.w	r3, r3, #16
 8002c0e:	2b10      	cmp	r3, #16
 8002c10:	d156      	bne.n	8002cc0 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	212c      	movs	r1, #44	; 0x2c
 8002c18:	fb01 f303 	mul.w	r3, r1, r3
 8002c1c:	4413      	add	r3, r2
 8002c1e:	333f      	adds	r3, #63	; 0x3f
 8002c20:	781b      	ldrb	r3, [r3, #0]
 8002c22:	2b03      	cmp	r3, #3
 8002c24:	d111      	bne.n	8002c4a <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	212c      	movs	r1, #44	; 0x2c
 8002c2c:	fb01 f303 	mul.w	r3, r1, r3
 8002c30:	4413      	add	r3, r2
 8002c32:	335c      	adds	r3, #92	; 0x5c
 8002c34:	2200      	movs	r2, #0
 8002c36:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	68fa      	ldr	r2, [r7, #12]
 8002c3e:	b2d2      	uxtb	r2, r2
 8002c40:	4611      	mov	r1, r2
 8002c42:	4618      	mov	r0, r3
 8002c44:	f003 fb0f 	bl	8006266 <USB_HC_Halt>
 8002c48:	e031      	b.n	8002cae <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	212c      	movs	r1, #44	; 0x2c
 8002c50:	fb01 f303 	mul.w	r3, r1, r3
 8002c54:	4413      	add	r3, r2
 8002c56:	333f      	adds	r3, #63	; 0x3f
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d009      	beq.n	8002c72 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	212c      	movs	r1, #44	; 0x2c
 8002c64:	fb01 f303 	mul.w	r3, r1, r3
 8002c68:	4413      	add	r3, r2
 8002c6a:	333f      	adds	r3, #63	; 0x3f
 8002c6c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d11d      	bne.n	8002cae <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	212c      	movs	r1, #44	; 0x2c
 8002c78:	fb01 f303 	mul.w	r3, r1, r3
 8002c7c:	4413      	add	r3, r2
 8002c7e:	335c      	adds	r3, #92	; 0x5c
 8002c80:	2200      	movs	r2, #0
 8002c82:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	691b      	ldr	r3, [r3, #16]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d110      	bne.n	8002cae <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	212c      	movs	r1, #44	; 0x2c
 8002c92:	fb01 f303 	mul.w	r3, r1, r3
 8002c96:	4413      	add	r3, r2
 8002c98:	3361      	adds	r3, #97	; 0x61
 8002c9a:	2203      	movs	r2, #3
 8002c9c:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	68fa      	ldr	r2, [r7, #12]
 8002ca4:	b2d2      	uxtb	r2, r2
 8002ca6:	4611      	mov	r1, r2
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f003 fadc 	bl	8006266 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	015a      	lsls	r2, r3, #5
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	4413      	add	r3, r2
 8002cb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cba:	461a      	mov	r2, r3
 8002cbc:	2310      	movs	r3, #16
 8002cbe:	6093      	str	r3, [r2, #8]
}
 8002cc0:	bf00      	nop
 8002cc2:	3718      	adds	r7, #24
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b088      	sub	sp, #32
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	460b      	mov	r3, r1
 8002cd2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002cde:	78fb      	ldrb	r3, [r7, #3]
 8002ce0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	015a      	lsls	r2, r3, #5
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	4413      	add	r3, r2
 8002cea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f003 0304 	and.w	r3, r3, #4
 8002cf4:	2b04      	cmp	r3, #4
 8002cf6:	d11a      	bne.n	8002d2e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	015a      	lsls	r2, r3, #5
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	4413      	add	r3, r2
 8002d00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d04:	461a      	mov	r2, r3
 8002d06:	2304      	movs	r3, #4
 8002d08:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	212c      	movs	r1, #44	; 0x2c
 8002d10:	fb01 f303 	mul.w	r3, r1, r3
 8002d14:	4413      	add	r3, r2
 8002d16:	3361      	adds	r3, #97	; 0x61
 8002d18:	2206      	movs	r2, #6
 8002d1a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	697a      	ldr	r2, [r7, #20]
 8002d22:	b2d2      	uxtb	r2, r2
 8002d24:	4611      	mov	r1, r2
 8002d26:	4618      	mov	r0, r3
 8002d28:	f003 fa9d 	bl	8006266 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002d2c:	e331      	b.n	8003392 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	015a      	lsls	r2, r3, #5
 8002d32:	69bb      	ldr	r3, [r7, #24]
 8002d34:	4413      	add	r3, r2
 8002d36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	f003 0320 	and.w	r3, r3, #32
 8002d40:	2b20      	cmp	r3, #32
 8002d42:	d12e      	bne.n	8002da2 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	015a      	lsls	r2, r3, #5
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	4413      	add	r3, r2
 8002d4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d50:	461a      	mov	r2, r3
 8002d52:	2320      	movs	r3, #32
 8002d54:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	212c      	movs	r1, #44	; 0x2c
 8002d5c:	fb01 f303 	mul.w	r3, r1, r3
 8002d60:	4413      	add	r3, r2
 8002d62:	333d      	adds	r3, #61	; 0x3d
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	f040 8313 	bne.w	8003392 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	212c      	movs	r1, #44	; 0x2c
 8002d72:	fb01 f303 	mul.w	r3, r1, r3
 8002d76:	4413      	add	r3, r2
 8002d78:	333d      	adds	r3, #61	; 0x3d
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	212c      	movs	r1, #44	; 0x2c
 8002d84:	fb01 f303 	mul.w	r3, r1, r3
 8002d88:	4413      	add	r3, r2
 8002d8a:	3360      	adds	r3, #96	; 0x60
 8002d8c:	2202      	movs	r2, #2
 8002d8e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	697a      	ldr	r2, [r7, #20]
 8002d96:	b2d2      	uxtb	r2, r2
 8002d98:	4611      	mov	r1, r2
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f003 fa63 	bl	8006266 <USB_HC_Halt>
}
 8002da0:	e2f7      	b.n	8003392 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	015a      	lsls	r2, r3, #5
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	4413      	add	r3, r2
 8002daa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002db4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002db8:	d112      	bne.n	8002de0 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	015a      	lsls	r2, r3, #5
 8002dbe:	69bb      	ldr	r3, [r7, #24]
 8002dc0:	4413      	add	r3, r2
 8002dc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002dcc:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	697a      	ldr	r2, [r7, #20]
 8002dd4:	b2d2      	uxtb	r2, r2
 8002dd6:	4611      	mov	r1, r2
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f003 fa44 	bl	8006266 <USB_HC_Halt>
}
 8002dde:	e2d8      	b.n	8003392 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	015a      	lsls	r2, r3, #5
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	4413      	add	r3, r2
 8002de8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	f003 0301 	and.w	r3, r3, #1
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d140      	bne.n	8002e78 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	212c      	movs	r1, #44	; 0x2c
 8002dfc:	fb01 f303 	mul.w	r3, r1, r3
 8002e00:	4413      	add	r3, r2
 8002e02:	335c      	adds	r3, #92	; 0x5c
 8002e04:	2200      	movs	r2, #0
 8002e06:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	015a      	lsls	r2, r3, #5
 8002e0c:	69bb      	ldr	r3, [r7, #24]
 8002e0e:	4413      	add	r3, r2
 8002e10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e1a:	2b40      	cmp	r3, #64	; 0x40
 8002e1c:	d111      	bne.n	8002e42 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	212c      	movs	r1, #44	; 0x2c
 8002e24:	fb01 f303 	mul.w	r3, r1, r3
 8002e28:	4413      	add	r3, r2
 8002e2a:	333d      	adds	r3, #61	; 0x3d
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	015a      	lsls	r2, r3, #5
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	4413      	add	r3, r2
 8002e38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	2340      	movs	r3, #64	; 0x40
 8002e40:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	015a      	lsls	r2, r3, #5
 8002e46:	69bb      	ldr	r3, [r7, #24]
 8002e48:	4413      	add	r3, r2
 8002e4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e4e:	461a      	mov	r2, r3
 8002e50:	2301      	movs	r3, #1
 8002e52:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	212c      	movs	r1, #44	; 0x2c
 8002e5a:	fb01 f303 	mul.w	r3, r1, r3
 8002e5e:	4413      	add	r3, r2
 8002e60:	3361      	adds	r3, #97	; 0x61
 8002e62:	2201      	movs	r2, #1
 8002e64:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	697a      	ldr	r2, [r7, #20]
 8002e6c:	b2d2      	uxtb	r2, r2
 8002e6e:	4611      	mov	r1, r2
 8002e70:	4618      	mov	r0, r3
 8002e72:	f003 f9f8 	bl	8006266 <USB_HC_Halt>
}
 8002e76:	e28c      	b.n	8003392 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	015a      	lsls	r2, r3, #5
 8002e7c:	69bb      	ldr	r3, [r7, #24]
 8002e7e:	4413      	add	r3, r2
 8002e80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e8a:	2b40      	cmp	r3, #64	; 0x40
 8002e8c:	d12c      	bne.n	8002ee8 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	212c      	movs	r1, #44	; 0x2c
 8002e94:	fb01 f303 	mul.w	r3, r1, r3
 8002e98:	4413      	add	r3, r2
 8002e9a:	3361      	adds	r3, #97	; 0x61
 8002e9c:	2204      	movs	r2, #4
 8002e9e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	212c      	movs	r1, #44	; 0x2c
 8002ea6:	fb01 f303 	mul.w	r3, r1, r3
 8002eaa:	4413      	add	r3, r2
 8002eac:	333d      	adds	r3, #61	; 0x3d
 8002eae:	2201      	movs	r2, #1
 8002eb0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	212c      	movs	r1, #44	; 0x2c
 8002eb8:	fb01 f303 	mul.w	r3, r1, r3
 8002ebc:	4413      	add	r3, r2
 8002ebe:	335c      	adds	r3, #92	; 0x5c
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	697a      	ldr	r2, [r7, #20]
 8002eca:	b2d2      	uxtb	r2, r2
 8002ecc:	4611      	mov	r1, r2
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f003 f9c9 	bl	8006266 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	015a      	lsls	r2, r3, #5
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	4413      	add	r3, r2
 8002edc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	2340      	movs	r3, #64	; 0x40
 8002ee4:	6093      	str	r3, [r2, #8]
}
 8002ee6:	e254      	b.n	8003392 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	015a      	lsls	r2, r3, #5
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	4413      	add	r3, r2
 8002ef0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	f003 0308 	and.w	r3, r3, #8
 8002efa:	2b08      	cmp	r3, #8
 8002efc:	d11a      	bne.n	8002f34 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	015a      	lsls	r2, r3, #5
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	4413      	add	r3, r2
 8002f06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	2308      	movs	r3, #8
 8002f0e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	212c      	movs	r1, #44	; 0x2c
 8002f16:	fb01 f303 	mul.w	r3, r1, r3
 8002f1a:	4413      	add	r3, r2
 8002f1c:	3361      	adds	r3, #97	; 0x61
 8002f1e:	2205      	movs	r2, #5
 8002f20:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	697a      	ldr	r2, [r7, #20]
 8002f28:	b2d2      	uxtb	r2, r2
 8002f2a:	4611      	mov	r1, r2
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f003 f99a 	bl	8006266 <USB_HC_Halt>
}
 8002f32:	e22e      	b.n	8003392 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	015a      	lsls	r2, r3, #5
 8002f38:	69bb      	ldr	r3, [r7, #24]
 8002f3a:	4413      	add	r3, r2
 8002f3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f003 0310 	and.w	r3, r3, #16
 8002f46:	2b10      	cmp	r3, #16
 8002f48:	d140      	bne.n	8002fcc <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	212c      	movs	r1, #44	; 0x2c
 8002f50:	fb01 f303 	mul.w	r3, r1, r3
 8002f54:	4413      	add	r3, r2
 8002f56:	335c      	adds	r3, #92	; 0x5c
 8002f58:	2200      	movs	r2, #0
 8002f5a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002f5c:	687a      	ldr	r2, [r7, #4]
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	212c      	movs	r1, #44	; 0x2c
 8002f62:	fb01 f303 	mul.w	r3, r1, r3
 8002f66:	4413      	add	r3, r2
 8002f68:	3361      	adds	r3, #97	; 0x61
 8002f6a:	2203      	movs	r2, #3
 8002f6c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	212c      	movs	r1, #44	; 0x2c
 8002f74:	fb01 f303 	mul.w	r3, r1, r3
 8002f78:	4413      	add	r3, r2
 8002f7a:	333d      	adds	r3, #61	; 0x3d
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d112      	bne.n	8002fa8 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	212c      	movs	r1, #44	; 0x2c
 8002f88:	fb01 f303 	mul.w	r3, r1, r3
 8002f8c:	4413      	add	r3, r2
 8002f8e:	333c      	adds	r3, #60	; 0x3c
 8002f90:	781b      	ldrb	r3, [r3, #0]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d108      	bne.n	8002fa8 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	212c      	movs	r1, #44	; 0x2c
 8002f9c:	fb01 f303 	mul.w	r3, r1, r3
 8002fa0:	4413      	add	r3, r2
 8002fa2:	333d      	adds	r3, #61	; 0x3d
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	697a      	ldr	r2, [r7, #20]
 8002fae:	b2d2      	uxtb	r2, r2
 8002fb0:	4611      	mov	r1, r2
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f003 f957 	bl	8006266 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	015a      	lsls	r2, r3, #5
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	4413      	add	r3, r2
 8002fc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	2310      	movs	r3, #16
 8002fc8:	6093      	str	r3, [r2, #8]
}
 8002fca:	e1e2      	b.n	8003392 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	015a      	lsls	r2, r3, #5
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	4413      	add	r3, r2
 8002fd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fde:	2b80      	cmp	r3, #128	; 0x80
 8002fe0:	d164      	bne.n	80030ac <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	691b      	ldr	r3, [r3, #16]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d111      	bne.n	800300e <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	212c      	movs	r1, #44	; 0x2c
 8002ff0:	fb01 f303 	mul.w	r3, r1, r3
 8002ff4:	4413      	add	r3, r2
 8002ff6:	3361      	adds	r3, #97	; 0x61
 8002ff8:	2206      	movs	r2, #6
 8002ffa:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	697a      	ldr	r2, [r7, #20]
 8003002:	b2d2      	uxtb	r2, r2
 8003004:	4611      	mov	r1, r2
 8003006:	4618      	mov	r0, r3
 8003008:	f003 f92d 	bl	8006266 <USB_HC_Halt>
 800300c:	e044      	b.n	8003098 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	212c      	movs	r1, #44	; 0x2c
 8003014:	fb01 f303 	mul.w	r3, r1, r3
 8003018:	4413      	add	r3, r2
 800301a:	335c      	adds	r3, #92	; 0x5c
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	1c5a      	adds	r2, r3, #1
 8003020:	6879      	ldr	r1, [r7, #4]
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	202c      	movs	r0, #44	; 0x2c
 8003026:	fb00 f303 	mul.w	r3, r0, r3
 800302a:	440b      	add	r3, r1
 800302c:	335c      	adds	r3, #92	; 0x5c
 800302e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	212c      	movs	r1, #44	; 0x2c
 8003036:	fb01 f303 	mul.w	r3, r1, r3
 800303a:	4413      	add	r3, r2
 800303c:	335c      	adds	r3, #92	; 0x5c
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2b02      	cmp	r3, #2
 8003042:	d920      	bls.n	8003086 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	212c      	movs	r1, #44	; 0x2c
 800304a:	fb01 f303 	mul.w	r3, r1, r3
 800304e:	4413      	add	r3, r2
 8003050:	335c      	adds	r3, #92	; 0x5c
 8003052:	2200      	movs	r2, #0
 8003054:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	212c      	movs	r1, #44	; 0x2c
 800305c:	fb01 f303 	mul.w	r3, r1, r3
 8003060:	4413      	add	r3, r2
 8003062:	3360      	adds	r3, #96	; 0x60
 8003064:	2204      	movs	r2, #4
 8003066:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	b2d9      	uxtb	r1, r3
 800306c:	687a      	ldr	r2, [r7, #4]
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	202c      	movs	r0, #44	; 0x2c
 8003072:	fb00 f303 	mul.w	r3, r0, r3
 8003076:	4413      	add	r3, r2
 8003078:	3360      	adds	r3, #96	; 0x60
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	461a      	mov	r2, r3
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f008 f8a6 	bl	800b1d0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003084:	e008      	b.n	8003098 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	212c      	movs	r1, #44	; 0x2c
 800308c:	fb01 f303 	mul.w	r3, r1, r3
 8003090:	4413      	add	r3, r2
 8003092:	3360      	adds	r3, #96	; 0x60
 8003094:	2202      	movs	r2, #2
 8003096:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	015a      	lsls	r2, r3, #5
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	4413      	add	r3, r2
 80030a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030a4:	461a      	mov	r2, r3
 80030a6:	2380      	movs	r3, #128	; 0x80
 80030a8:	6093      	str	r3, [r2, #8]
}
 80030aa:	e172      	b.n	8003392 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	015a      	lsls	r2, r3, #5
 80030b0:	69bb      	ldr	r3, [r7, #24]
 80030b2:	4413      	add	r3, r2
 80030b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030c2:	d11b      	bne.n	80030fc <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	212c      	movs	r1, #44	; 0x2c
 80030ca:	fb01 f303 	mul.w	r3, r1, r3
 80030ce:	4413      	add	r3, r2
 80030d0:	3361      	adds	r3, #97	; 0x61
 80030d2:	2208      	movs	r2, #8
 80030d4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	697a      	ldr	r2, [r7, #20]
 80030dc:	b2d2      	uxtb	r2, r2
 80030de:	4611      	mov	r1, r2
 80030e0:	4618      	mov	r0, r3
 80030e2:	f003 f8c0 	bl	8006266 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	015a      	lsls	r2, r3, #5
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	4413      	add	r3, r2
 80030ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030f2:	461a      	mov	r2, r3
 80030f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030f8:	6093      	str	r3, [r2, #8]
}
 80030fa:	e14a      	b.n	8003392 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	015a      	lsls	r2, r3, #5
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	4413      	add	r3, r2
 8003104:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f003 0302 	and.w	r3, r3, #2
 800310e:	2b02      	cmp	r3, #2
 8003110:	f040 813f 	bne.w	8003392 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	212c      	movs	r1, #44	; 0x2c
 800311a:	fb01 f303 	mul.w	r3, r1, r3
 800311e:	4413      	add	r3, r2
 8003120:	3361      	adds	r3, #97	; 0x61
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	2b01      	cmp	r3, #1
 8003126:	d17d      	bne.n	8003224 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	212c      	movs	r1, #44	; 0x2c
 800312e:	fb01 f303 	mul.w	r3, r1, r3
 8003132:	4413      	add	r3, r2
 8003134:	3360      	adds	r3, #96	; 0x60
 8003136:	2201      	movs	r2, #1
 8003138:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	212c      	movs	r1, #44	; 0x2c
 8003140:	fb01 f303 	mul.w	r3, r1, r3
 8003144:	4413      	add	r3, r2
 8003146:	333f      	adds	r3, #63	; 0x3f
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	2b02      	cmp	r3, #2
 800314c:	d00a      	beq.n	8003164 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	212c      	movs	r1, #44	; 0x2c
 8003154:	fb01 f303 	mul.w	r3, r1, r3
 8003158:	4413      	add	r3, r2
 800315a:	333f      	adds	r3, #63	; 0x3f
 800315c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800315e:	2b03      	cmp	r3, #3
 8003160:	f040 8100 	bne.w	8003364 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	691b      	ldr	r3, [r3, #16]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d113      	bne.n	8003194 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	212c      	movs	r1, #44	; 0x2c
 8003172:	fb01 f303 	mul.w	r3, r1, r3
 8003176:	4413      	add	r3, r2
 8003178:	3355      	adds	r3, #85	; 0x55
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	f083 0301 	eor.w	r3, r3, #1
 8003180:	b2d8      	uxtb	r0, r3
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	212c      	movs	r1, #44	; 0x2c
 8003188:	fb01 f303 	mul.w	r3, r1, r3
 800318c:	4413      	add	r3, r2
 800318e:	3355      	adds	r3, #85	; 0x55
 8003190:	4602      	mov	r2, r0
 8003192:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	691b      	ldr	r3, [r3, #16]
 8003198:	2b01      	cmp	r3, #1
 800319a:	f040 80e3 	bne.w	8003364 <HCD_HC_OUT_IRQHandler+0x69c>
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	212c      	movs	r1, #44	; 0x2c
 80031a4:	fb01 f303 	mul.w	r3, r1, r3
 80031a8:	4413      	add	r3, r2
 80031aa:	334c      	adds	r3, #76	; 0x4c
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	f000 80d8 	beq.w	8003364 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	212c      	movs	r1, #44	; 0x2c
 80031ba:	fb01 f303 	mul.w	r3, r1, r3
 80031be:	4413      	add	r3, r2
 80031c0:	334c      	adds	r3, #76	; 0x4c
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	6879      	ldr	r1, [r7, #4]
 80031c6:	697a      	ldr	r2, [r7, #20]
 80031c8:	202c      	movs	r0, #44	; 0x2c
 80031ca:	fb00 f202 	mul.w	r2, r0, r2
 80031ce:	440a      	add	r2, r1
 80031d0:	3240      	adds	r2, #64	; 0x40
 80031d2:	8812      	ldrh	r2, [r2, #0]
 80031d4:	4413      	add	r3, r2
 80031d6:	3b01      	subs	r3, #1
 80031d8:	6879      	ldr	r1, [r7, #4]
 80031da:	697a      	ldr	r2, [r7, #20]
 80031dc:	202c      	movs	r0, #44	; 0x2c
 80031de:	fb00 f202 	mul.w	r2, r0, r2
 80031e2:	440a      	add	r2, r1
 80031e4:	3240      	adds	r2, #64	; 0x40
 80031e6:	8812      	ldrh	r2, [r2, #0]
 80031e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80031ec:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	f003 0301 	and.w	r3, r3, #1
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	f000 80b5 	beq.w	8003364 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	212c      	movs	r1, #44	; 0x2c
 8003200:	fb01 f303 	mul.w	r3, r1, r3
 8003204:	4413      	add	r3, r2
 8003206:	3355      	adds	r3, #85	; 0x55
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	f083 0301 	eor.w	r3, r3, #1
 800320e:	b2d8      	uxtb	r0, r3
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	212c      	movs	r1, #44	; 0x2c
 8003216:	fb01 f303 	mul.w	r3, r1, r3
 800321a:	4413      	add	r3, r2
 800321c:	3355      	adds	r3, #85	; 0x55
 800321e:	4602      	mov	r2, r0
 8003220:	701a      	strb	r2, [r3, #0]
 8003222:	e09f      	b.n	8003364 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	212c      	movs	r1, #44	; 0x2c
 800322a:	fb01 f303 	mul.w	r3, r1, r3
 800322e:	4413      	add	r3, r2
 8003230:	3361      	adds	r3, #97	; 0x61
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	2b03      	cmp	r3, #3
 8003236:	d109      	bne.n	800324c <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	212c      	movs	r1, #44	; 0x2c
 800323e:	fb01 f303 	mul.w	r3, r1, r3
 8003242:	4413      	add	r3, r2
 8003244:	3360      	adds	r3, #96	; 0x60
 8003246:	2202      	movs	r2, #2
 8003248:	701a      	strb	r2, [r3, #0]
 800324a:	e08b      	b.n	8003364 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	212c      	movs	r1, #44	; 0x2c
 8003252:	fb01 f303 	mul.w	r3, r1, r3
 8003256:	4413      	add	r3, r2
 8003258:	3361      	adds	r3, #97	; 0x61
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	2b04      	cmp	r3, #4
 800325e:	d109      	bne.n	8003274 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	212c      	movs	r1, #44	; 0x2c
 8003266:	fb01 f303 	mul.w	r3, r1, r3
 800326a:	4413      	add	r3, r2
 800326c:	3360      	adds	r3, #96	; 0x60
 800326e:	2202      	movs	r2, #2
 8003270:	701a      	strb	r2, [r3, #0]
 8003272:	e077      	b.n	8003364 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	212c      	movs	r1, #44	; 0x2c
 800327a:	fb01 f303 	mul.w	r3, r1, r3
 800327e:	4413      	add	r3, r2
 8003280:	3361      	adds	r3, #97	; 0x61
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	2b05      	cmp	r3, #5
 8003286:	d109      	bne.n	800329c <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	212c      	movs	r1, #44	; 0x2c
 800328e:	fb01 f303 	mul.w	r3, r1, r3
 8003292:	4413      	add	r3, r2
 8003294:	3360      	adds	r3, #96	; 0x60
 8003296:	2205      	movs	r2, #5
 8003298:	701a      	strb	r2, [r3, #0]
 800329a:	e063      	b.n	8003364 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	212c      	movs	r1, #44	; 0x2c
 80032a2:	fb01 f303 	mul.w	r3, r1, r3
 80032a6:	4413      	add	r3, r2
 80032a8:	3361      	adds	r3, #97	; 0x61
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	2b06      	cmp	r3, #6
 80032ae:	d009      	beq.n	80032c4 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	212c      	movs	r1, #44	; 0x2c
 80032b6:	fb01 f303 	mul.w	r3, r1, r3
 80032ba:	4413      	add	r3, r2
 80032bc:	3361      	adds	r3, #97	; 0x61
 80032be:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80032c0:	2b08      	cmp	r3, #8
 80032c2:	d14f      	bne.n	8003364 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	212c      	movs	r1, #44	; 0x2c
 80032ca:	fb01 f303 	mul.w	r3, r1, r3
 80032ce:	4413      	add	r3, r2
 80032d0:	335c      	adds	r3, #92	; 0x5c
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	1c5a      	adds	r2, r3, #1
 80032d6:	6879      	ldr	r1, [r7, #4]
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	202c      	movs	r0, #44	; 0x2c
 80032dc:	fb00 f303 	mul.w	r3, r0, r3
 80032e0:	440b      	add	r3, r1
 80032e2:	335c      	adds	r3, #92	; 0x5c
 80032e4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	212c      	movs	r1, #44	; 0x2c
 80032ec:	fb01 f303 	mul.w	r3, r1, r3
 80032f0:	4413      	add	r3, r2
 80032f2:	335c      	adds	r3, #92	; 0x5c
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d912      	bls.n	8003320 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	212c      	movs	r1, #44	; 0x2c
 8003300:	fb01 f303 	mul.w	r3, r1, r3
 8003304:	4413      	add	r3, r2
 8003306:	335c      	adds	r3, #92	; 0x5c
 8003308:	2200      	movs	r2, #0
 800330a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	212c      	movs	r1, #44	; 0x2c
 8003312:	fb01 f303 	mul.w	r3, r1, r3
 8003316:	4413      	add	r3, r2
 8003318:	3360      	adds	r3, #96	; 0x60
 800331a:	2204      	movs	r2, #4
 800331c:	701a      	strb	r2, [r3, #0]
 800331e:	e021      	b.n	8003364 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	212c      	movs	r1, #44	; 0x2c
 8003326:	fb01 f303 	mul.w	r3, r1, r3
 800332a:	4413      	add	r3, r2
 800332c:	3360      	adds	r3, #96	; 0x60
 800332e:	2202      	movs	r2, #2
 8003330:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	015a      	lsls	r2, r3, #5
 8003336:	69bb      	ldr	r3, [r7, #24]
 8003338:	4413      	add	r3, r2
 800333a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003348:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003350:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	015a      	lsls	r2, r3, #5
 8003356:	69bb      	ldr	r3, [r7, #24]
 8003358:	4413      	add	r3, r2
 800335a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800335e:	461a      	mov	r2, r3
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	015a      	lsls	r2, r3, #5
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	4413      	add	r3, r2
 800336c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003370:	461a      	mov	r2, r3
 8003372:	2302      	movs	r3, #2
 8003374:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	b2d9      	uxtb	r1, r3
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	202c      	movs	r0, #44	; 0x2c
 8003380:	fb00 f303 	mul.w	r3, r0, r3
 8003384:	4413      	add	r3, r2
 8003386:	3360      	adds	r3, #96	; 0x60
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	461a      	mov	r2, r3
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f007 ff1f 	bl	800b1d0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003392:	bf00      	nop
 8003394:	3720      	adds	r7, #32
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}

0800339a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800339a:	b580      	push	{r7, lr}
 800339c:	b08a      	sub	sp, #40	; 0x28
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033aa:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	6a1b      	ldr	r3, [r3, #32]
 80033b2:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	f003 030f 	and.w	r3, r3, #15
 80033ba:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	0c5b      	lsrs	r3, r3, #17
 80033c0:	f003 030f 	and.w	r3, r3, #15
 80033c4:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	091b      	lsrs	r3, r3, #4
 80033ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033ce:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d004      	beq.n	80033e0 <HCD_RXQLVL_IRQHandler+0x46>
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	2b05      	cmp	r3, #5
 80033da:	f000 80a9 	beq.w	8003530 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80033de:	e0aa      	b.n	8003536 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	f000 80a6 	beq.w	8003534 <HCD_RXQLVL_IRQHandler+0x19a>
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	69bb      	ldr	r3, [r7, #24]
 80033ec:	212c      	movs	r1, #44	; 0x2c
 80033ee:	fb01 f303 	mul.w	r3, r1, r3
 80033f2:	4413      	add	r3, r2
 80033f4:	3344      	adds	r3, #68	; 0x44
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	f000 809b 	beq.w	8003534 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	69bb      	ldr	r3, [r7, #24]
 8003402:	212c      	movs	r1, #44	; 0x2c
 8003404:	fb01 f303 	mul.w	r3, r1, r3
 8003408:	4413      	add	r3, r2
 800340a:	3350      	adds	r3, #80	; 0x50
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	441a      	add	r2, r3
 8003412:	6879      	ldr	r1, [r7, #4]
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	202c      	movs	r0, #44	; 0x2c
 8003418:	fb00 f303 	mul.w	r3, r0, r3
 800341c:	440b      	add	r3, r1
 800341e:	334c      	adds	r3, #76	; 0x4c
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	429a      	cmp	r2, r3
 8003424:	d87a      	bhi.n	800351c <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6818      	ldr	r0, [r3, #0]
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	212c      	movs	r1, #44	; 0x2c
 8003430:	fb01 f303 	mul.w	r3, r1, r3
 8003434:	4413      	add	r3, r2
 8003436:	3344      	adds	r3, #68	; 0x44
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	693a      	ldr	r2, [r7, #16]
 800343c:	b292      	uxth	r2, r2
 800343e:	4619      	mov	r1, r3
 8003440:	f002 fa68 	bl	8005914 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	69bb      	ldr	r3, [r7, #24]
 8003448:	212c      	movs	r1, #44	; 0x2c
 800344a:	fb01 f303 	mul.w	r3, r1, r3
 800344e:	4413      	add	r3, r2
 8003450:	3344      	adds	r3, #68	; 0x44
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	441a      	add	r2, r3
 8003458:	6879      	ldr	r1, [r7, #4]
 800345a:	69bb      	ldr	r3, [r7, #24]
 800345c:	202c      	movs	r0, #44	; 0x2c
 800345e:	fb00 f303 	mul.w	r3, r0, r3
 8003462:	440b      	add	r3, r1
 8003464:	3344      	adds	r3, #68	; 0x44
 8003466:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	69bb      	ldr	r3, [r7, #24]
 800346c:	212c      	movs	r1, #44	; 0x2c
 800346e:	fb01 f303 	mul.w	r3, r1, r3
 8003472:	4413      	add	r3, r2
 8003474:	3350      	adds	r3, #80	; 0x50
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	441a      	add	r2, r3
 800347c:	6879      	ldr	r1, [r7, #4]
 800347e:	69bb      	ldr	r3, [r7, #24]
 8003480:	202c      	movs	r0, #44	; 0x2c
 8003482:	fb00 f303 	mul.w	r3, r0, r3
 8003486:	440b      	add	r3, r1
 8003488:	3350      	adds	r3, #80	; 0x50
 800348a:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	015a      	lsls	r2, r3, #5
 8003490:	6a3b      	ldr	r3, [r7, #32]
 8003492:	4413      	add	r3, r2
 8003494:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003498:	691b      	ldr	r3, [r3, #16]
 800349a:	0cdb      	lsrs	r3, r3, #19
 800349c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034a0:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	69bb      	ldr	r3, [r7, #24]
 80034a6:	212c      	movs	r1, #44	; 0x2c
 80034a8:	fb01 f303 	mul.w	r3, r1, r3
 80034ac:	4413      	add	r3, r2
 80034ae:	3340      	adds	r3, #64	; 0x40
 80034b0:	881b      	ldrh	r3, [r3, #0]
 80034b2:	461a      	mov	r2, r3
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d13c      	bne.n	8003534 <HCD_RXQLVL_IRQHandler+0x19a>
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d039      	beq.n	8003534 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	015a      	lsls	r2, r3, #5
 80034c4:	6a3b      	ldr	r3, [r7, #32]
 80034c6:	4413      	add	r3, r2
 80034c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80034d6:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80034de:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80034e0:	69bb      	ldr	r3, [r7, #24]
 80034e2:	015a      	lsls	r2, r3, #5
 80034e4:	6a3b      	ldr	r3, [r7, #32]
 80034e6:	4413      	add	r3, r2
 80034e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034ec:	461a      	mov	r2, r3
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	212c      	movs	r1, #44	; 0x2c
 80034f8:	fb01 f303 	mul.w	r3, r1, r3
 80034fc:	4413      	add	r3, r2
 80034fe:	3354      	adds	r3, #84	; 0x54
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	f083 0301 	eor.w	r3, r3, #1
 8003506:	b2d8      	uxtb	r0, r3
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	69bb      	ldr	r3, [r7, #24]
 800350c:	212c      	movs	r1, #44	; 0x2c
 800350e:	fb01 f303 	mul.w	r3, r1, r3
 8003512:	4413      	add	r3, r2
 8003514:	3354      	adds	r3, #84	; 0x54
 8003516:	4602      	mov	r2, r0
 8003518:	701a      	strb	r2, [r3, #0]
      break;
 800351a:	e00b      	b.n	8003534 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	69bb      	ldr	r3, [r7, #24]
 8003520:	212c      	movs	r1, #44	; 0x2c
 8003522:	fb01 f303 	mul.w	r3, r1, r3
 8003526:	4413      	add	r3, r2
 8003528:	3360      	adds	r3, #96	; 0x60
 800352a:	2204      	movs	r2, #4
 800352c:	701a      	strb	r2, [r3, #0]
      break;
 800352e:	e001      	b.n	8003534 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003530:	bf00      	nop
 8003532:	e000      	b.n	8003536 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003534:	bf00      	nop
  }
}
 8003536:	bf00      	nop
 8003538:	3728      	adds	r7, #40	; 0x28
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}

0800353e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800353e:	b580      	push	{r7, lr}
 8003540:	b086      	sub	sp, #24
 8003542:	af00      	add	r7, sp, #0
 8003544:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800356a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f003 0302 	and.w	r3, r3, #2
 8003572:	2b02      	cmp	r3, #2
 8003574:	d10b      	bne.n	800358e <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	f003 0301 	and.w	r3, r3, #1
 800357c:	2b01      	cmp	r3, #1
 800357e:	d102      	bne.n	8003586 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f007 fe09 	bl	800b198 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	f043 0302 	orr.w	r3, r3, #2
 800358c:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	f003 0308 	and.w	r3, r3, #8
 8003594:	2b08      	cmp	r3, #8
 8003596:	d132      	bne.n	80035fe <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	f043 0308 	orr.w	r3, r3, #8
 800359e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f003 0304 	and.w	r3, r3, #4
 80035a6:	2b04      	cmp	r3, #4
 80035a8:	d126      	bne.n	80035f8 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	699b      	ldr	r3, [r3, #24]
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d113      	bne.n	80035da <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80035b8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80035bc:	d106      	bne.n	80035cc <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	2102      	movs	r1, #2
 80035c4:	4618      	mov	r0, r3
 80035c6:	f002 fb13 	bl	8005bf0 <USB_InitFSLSPClkSel>
 80035ca:	e011      	b.n	80035f0 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	2101      	movs	r1, #1
 80035d2:	4618      	mov	r0, r3
 80035d4:	f002 fb0c 	bl	8005bf0 <USB_InitFSLSPClkSel>
 80035d8:	e00a      	b.n	80035f0 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d106      	bne.n	80035f0 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80035e8:	461a      	mov	r2, r3
 80035ea:	f64e 2360 	movw	r3, #60000	; 0xea60
 80035ee:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f007 fdfb 	bl	800b1ec <HAL_HCD_PortEnabled_Callback>
 80035f6:	e002      	b.n	80035fe <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f007 fe05 	bl	800b208 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	f003 0320 	and.w	r3, r3, #32
 8003604:	2b20      	cmp	r3, #32
 8003606:	d103      	bne.n	8003610 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	f043 0320 	orr.w	r3, r3, #32
 800360e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003616:	461a      	mov	r2, r3
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	6013      	str	r3, [r2, #0]
}
 800361c:	bf00      	nop
 800361e:	3718      	adds	r7, #24
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}

08003624 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b084      	sub	sp, #16
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d101      	bne.n	8003636 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e12b      	b.n	800388e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800363c:	b2db      	uxtb	r3, r3
 800363e:	2b00      	cmp	r3, #0
 8003640:	d106      	bne.n	8003650 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f7fd fe84 	bl	8001358 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2224      	movs	r2, #36	; 0x24
 8003654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f022 0201 	bic.w	r2, r2, #1
 8003666:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003676:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003686:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003688:	f001 fa20 	bl	8004acc <HAL_RCC_GetPCLK1Freq>
 800368c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	4a81      	ldr	r2, [pc, #516]	; (8003898 <HAL_I2C_Init+0x274>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d807      	bhi.n	80036a8 <HAL_I2C_Init+0x84>
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	4a80      	ldr	r2, [pc, #512]	; (800389c <HAL_I2C_Init+0x278>)
 800369c:	4293      	cmp	r3, r2
 800369e:	bf94      	ite	ls
 80036a0:	2301      	movls	r3, #1
 80036a2:	2300      	movhi	r3, #0
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	e006      	b.n	80036b6 <HAL_I2C_Init+0x92>
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	4a7d      	ldr	r2, [pc, #500]	; (80038a0 <HAL_I2C_Init+0x27c>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	bf94      	ite	ls
 80036b0:	2301      	movls	r3, #1
 80036b2:	2300      	movhi	r3, #0
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d001      	beq.n	80036be <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e0e7      	b.n	800388e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	4a78      	ldr	r2, [pc, #480]	; (80038a4 <HAL_I2C_Init+0x280>)
 80036c2:	fba2 2303 	umull	r2, r3, r2, r3
 80036c6:	0c9b      	lsrs	r3, r3, #18
 80036c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	68ba      	ldr	r2, [r7, #8]
 80036da:	430a      	orrs	r2, r1
 80036dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	6a1b      	ldr	r3, [r3, #32]
 80036e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	4a6a      	ldr	r2, [pc, #424]	; (8003898 <HAL_I2C_Init+0x274>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d802      	bhi.n	80036f8 <HAL_I2C_Init+0xd4>
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	3301      	adds	r3, #1
 80036f6:	e009      	b.n	800370c <HAL_I2C_Init+0xe8>
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80036fe:	fb02 f303 	mul.w	r3, r2, r3
 8003702:	4a69      	ldr	r2, [pc, #420]	; (80038a8 <HAL_I2C_Init+0x284>)
 8003704:	fba2 2303 	umull	r2, r3, r2, r3
 8003708:	099b      	lsrs	r3, r3, #6
 800370a:	3301      	adds	r3, #1
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	6812      	ldr	r2, [r2, #0]
 8003710:	430b      	orrs	r3, r1
 8003712:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	69db      	ldr	r3, [r3, #28]
 800371a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800371e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	495c      	ldr	r1, [pc, #368]	; (8003898 <HAL_I2C_Init+0x274>)
 8003728:	428b      	cmp	r3, r1
 800372a:	d819      	bhi.n	8003760 <HAL_I2C_Init+0x13c>
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	1e59      	subs	r1, r3, #1
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	005b      	lsls	r3, r3, #1
 8003736:	fbb1 f3f3 	udiv	r3, r1, r3
 800373a:	1c59      	adds	r1, r3, #1
 800373c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003740:	400b      	ands	r3, r1
 8003742:	2b00      	cmp	r3, #0
 8003744:	d00a      	beq.n	800375c <HAL_I2C_Init+0x138>
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	1e59      	subs	r1, r3, #1
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	005b      	lsls	r3, r3, #1
 8003750:	fbb1 f3f3 	udiv	r3, r1, r3
 8003754:	3301      	adds	r3, #1
 8003756:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800375a:	e051      	b.n	8003800 <HAL_I2C_Init+0x1dc>
 800375c:	2304      	movs	r3, #4
 800375e:	e04f      	b.n	8003800 <HAL_I2C_Init+0x1dc>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d111      	bne.n	800378c <HAL_I2C_Init+0x168>
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	1e58      	subs	r0, r3, #1
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6859      	ldr	r1, [r3, #4]
 8003770:	460b      	mov	r3, r1
 8003772:	005b      	lsls	r3, r3, #1
 8003774:	440b      	add	r3, r1
 8003776:	fbb0 f3f3 	udiv	r3, r0, r3
 800377a:	3301      	adds	r3, #1
 800377c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003780:	2b00      	cmp	r3, #0
 8003782:	bf0c      	ite	eq
 8003784:	2301      	moveq	r3, #1
 8003786:	2300      	movne	r3, #0
 8003788:	b2db      	uxtb	r3, r3
 800378a:	e012      	b.n	80037b2 <HAL_I2C_Init+0x18e>
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	1e58      	subs	r0, r3, #1
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6859      	ldr	r1, [r3, #4]
 8003794:	460b      	mov	r3, r1
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	440b      	add	r3, r1
 800379a:	0099      	lsls	r1, r3, #2
 800379c:	440b      	add	r3, r1
 800379e:	fbb0 f3f3 	udiv	r3, r0, r3
 80037a2:	3301      	adds	r3, #1
 80037a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	bf0c      	ite	eq
 80037ac:	2301      	moveq	r3, #1
 80037ae:	2300      	movne	r3, #0
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d001      	beq.n	80037ba <HAL_I2C_Init+0x196>
 80037b6:	2301      	movs	r3, #1
 80037b8:	e022      	b.n	8003800 <HAL_I2C_Init+0x1dc>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d10e      	bne.n	80037e0 <HAL_I2C_Init+0x1bc>
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	1e58      	subs	r0, r3, #1
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6859      	ldr	r1, [r3, #4]
 80037ca:	460b      	mov	r3, r1
 80037cc:	005b      	lsls	r3, r3, #1
 80037ce:	440b      	add	r3, r1
 80037d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80037d4:	3301      	adds	r3, #1
 80037d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037de:	e00f      	b.n	8003800 <HAL_I2C_Init+0x1dc>
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	1e58      	subs	r0, r3, #1
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6859      	ldr	r1, [r3, #4]
 80037e8:	460b      	mov	r3, r1
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	440b      	add	r3, r1
 80037ee:	0099      	lsls	r1, r3, #2
 80037f0:	440b      	add	r3, r1
 80037f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80037f6:	3301      	adds	r3, #1
 80037f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003800:	6879      	ldr	r1, [r7, #4]
 8003802:	6809      	ldr	r1, [r1, #0]
 8003804:	4313      	orrs	r3, r2
 8003806:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	69da      	ldr	r2, [r3, #28]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a1b      	ldr	r3, [r3, #32]
 800381a:	431a      	orrs	r2, r3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	430a      	orrs	r2, r1
 8003822:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800382e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	6911      	ldr	r1, [r2, #16]
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	68d2      	ldr	r2, [r2, #12]
 800383a:	4311      	orrs	r1, r2
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	6812      	ldr	r2, [r2, #0]
 8003840:	430b      	orrs	r3, r1
 8003842:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	695a      	ldr	r2, [r3, #20]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	699b      	ldr	r3, [r3, #24]
 8003856:	431a      	orrs	r2, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	430a      	orrs	r2, r1
 800385e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f042 0201 	orr.w	r2, r2, #1
 800386e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2200      	movs	r2, #0
 8003874:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2220      	movs	r2, #32
 800387a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800388c:	2300      	movs	r3, #0
}
 800388e:	4618      	mov	r0, r3
 8003890:	3710      	adds	r7, #16
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	000186a0 	.word	0x000186a0
 800389c:	001e847f 	.word	0x001e847f
 80038a0:	003d08ff 	.word	0x003d08ff
 80038a4:	431bde83 	.word	0x431bde83
 80038a8:	10624dd3 	.word	0x10624dd3

080038ac <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b088      	sub	sp, #32
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d101      	bne.n	80038be <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e128      	b.n	8003b10 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d109      	bne.n	80038de <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a90      	ldr	r2, [pc, #576]	; (8003b18 <HAL_I2S_Init+0x26c>)
 80038d6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f7fd fd85 	bl	80013e8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2202      	movs	r2, #2
 80038e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	69db      	ldr	r3, [r3, #28]
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	6812      	ldr	r2, [r2, #0]
 80038f0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80038f4:	f023 030f 	bic.w	r3, r3, #15
 80038f8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	2202      	movs	r2, #2
 8003900:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	695b      	ldr	r3, [r3, #20]
 8003906:	2b02      	cmp	r3, #2
 8003908:	d060      	beq.n	80039cc <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d102      	bne.n	8003918 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003912:	2310      	movs	r3, #16
 8003914:	617b      	str	r3, [r7, #20]
 8003916:	e001      	b.n	800391c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003918:	2320      	movs	r3, #32
 800391a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	2b20      	cmp	r3, #32
 8003922:	d802      	bhi.n	800392a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	005b      	lsls	r3, r3, #1
 8003928:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800392a:	2001      	movs	r0, #1
 800392c:	f001 f9d8 	bl	8004ce0 <HAL_RCCEx_GetPeriphCLKFreq>
 8003930:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	691b      	ldr	r3, [r3, #16]
 8003936:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800393a:	d125      	bne.n	8003988 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d010      	beq.n	8003966 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	68fa      	ldr	r2, [r7, #12]
 800394a:	fbb2 f2f3 	udiv	r2, r2, r3
 800394e:	4613      	mov	r3, r2
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	4413      	add	r3, r2
 8003954:	005b      	lsls	r3, r3, #1
 8003956:	461a      	mov	r2, r3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	695b      	ldr	r3, [r3, #20]
 800395c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003960:	3305      	adds	r3, #5
 8003962:	613b      	str	r3, [r7, #16]
 8003964:	e01f      	b.n	80039a6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	00db      	lsls	r3, r3, #3
 800396a:	68fa      	ldr	r2, [r7, #12]
 800396c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003970:	4613      	mov	r3, r2
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	4413      	add	r3, r2
 8003976:	005b      	lsls	r3, r3, #1
 8003978:	461a      	mov	r2, r3
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	695b      	ldr	r3, [r3, #20]
 800397e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003982:	3305      	adds	r3, #5
 8003984:	613b      	str	r3, [r7, #16]
 8003986:	e00e      	b.n	80039a6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003988:	68fa      	ldr	r2, [r7, #12]
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003990:	4613      	mov	r3, r2
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	4413      	add	r3, r2
 8003996:	005b      	lsls	r3, r3, #1
 8003998:	461a      	mov	r2, r3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	695b      	ldr	r3, [r3, #20]
 800399e:	fbb2 f3f3 	udiv	r3, r2, r3
 80039a2:	3305      	adds	r3, #5
 80039a4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	4a5c      	ldr	r2, [pc, #368]	; (8003b1c <HAL_I2S_Init+0x270>)
 80039aa:	fba2 2303 	umull	r2, r3, r2, r3
 80039ae:	08db      	lsrs	r3, r3, #3
 80039b0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	f003 0301 	and.w	r3, r3, #1
 80039b8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80039ba:	693a      	ldr	r2, [r7, #16]
 80039bc:	69bb      	ldr	r3, [r7, #24]
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	085b      	lsrs	r3, r3, #1
 80039c2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80039c4:	69bb      	ldr	r3, [r7, #24]
 80039c6:	021b      	lsls	r3, r3, #8
 80039c8:	61bb      	str	r3, [r7, #24]
 80039ca:	e003      	b.n	80039d4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80039cc:	2302      	movs	r3, #2
 80039ce:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80039d0:	2300      	movs	r3, #0
 80039d2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d902      	bls.n	80039e0 <HAL_I2S_Init+0x134>
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	2bff      	cmp	r3, #255	; 0xff
 80039de:	d907      	bls.n	80039f0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e4:	f043 0210 	orr.w	r2, r3, #16
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e08f      	b.n	8003b10 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	691a      	ldr	r2, [r3, #16]
 80039f4:	69bb      	ldr	r3, [r7, #24]
 80039f6:	ea42 0103 	orr.w	r1, r2, r3
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	69fa      	ldr	r2, [r7, #28]
 8003a00:	430a      	orrs	r2, r1
 8003a02:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	69db      	ldr	r3, [r3, #28]
 8003a0a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003a0e:	f023 030f 	bic.w	r3, r3, #15
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	6851      	ldr	r1, [r2, #4]
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	6892      	ldr	r2, [r2, #8]
 8003a1a:	4311      	orrs	r1, r2
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	68d2      	ldr	r2, [r2, #12]
 8003a20:	4311      	orrs	r1, r2
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	6992      	ldr	r2, [r2, #24]
 8003a26:	430a      	orrs	r2, r1
 8003a28:	431a      	orrs	r2, r3
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a32:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6a1b      	ldr	r3, [r3, #32]
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d161      	bne.n	8003b00 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	4a38      	ldr	r2, [pc, #224]	; (8003b20 <HAL_I2S_Init+0x274>)
 8003a40:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a37      	ldr	r2, [pc, #220]	; (8003b24 <HAL_I2S_Init+0x278>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d101      	bne.n	8003a50 <HAL_I2S_Init+0x1a4>
 8003a4c:	4b36      	ldr	r3, [pc, #216]	; (8003b28 <HAL_I2S_Init+0x27c>)
 8003a4e:	e001      	b.n	8003a54 <HAL_I2S_Init+0x1a8>
 8003a50:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a54:	69db      	ldr	r3, [r3, #28]
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	6812      	ldr	r2, [r2, #0]
 8003a5a:	4932      	ldr	r1, [pc, #200]	; (8003b24 <HAL_I2S_Init+0x278>)
 8003a5c:	428a      	cmp	r2, r1
 8003a5e:	d101      	bne.n	8003a64 <HAL_I2S_Init+0x1b8>
 8003a60:	4a31      	ldr	r2, [pc, #196]	; (8003b28 <HAL_I2S_Init+0x27c>)
 8003a62:	e001      	b.n	8003a68 <HAL_I2S_Init+0x1bc>
 8003a64:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003a68:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003a6c:	f023 030f 	bic.w	r3, r3, #15
 8003a70:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a2b      	ldr	r2, [pc, #172]	; (8003b24 <HAL_I2S_Init+0x278>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d101      	bne.n	8003a80 <HAL_I2S_Init+0x1d4>
 8003a7c:	4b2a      	ldr	r3, [pc, #168]	; (8003b28 <HAL_I2S_Init+0x27c>)
 8003a7e:	e001      	b.n	8003a84 <HAL_I2S_Init+0x1d8>
 8003a80:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a84:	2202      	movs	r2, #2
 8003a86:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a25      	ldr	r2, [pc, #148]	; (8003b24 <HAL_I2S_Init+0x278>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d101      	bne.n	8003a96 <HAL_I2S_Init+0x1ea>
 8003a92:	4b25      	ldr	r3, [pc, #148]	; (8003b28 <HAL_I2S_Init+0x27c>)
 8003a94:	e001      	b.n	8003a9a <HAL_I2S_Init+0x1ee>
 8003a96:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a9a:	69db      	ldr	r3, [r3, #28]
 8003a9c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003aa6:	d003      	beq.n	8003ab0 <HAL_I2S_Init+0x204>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d103      	bne.n	8003ab8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003ab0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ab4:	613b      	str	r3, [r7, #16]
 8003ab6:	e001      	b.n	8003abc <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	699b      	ldr	r3, [r3, #24]
 8003ad8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003ada:	4313      	orrs	r3, r2
 8003adc:	b29a      	uxth	r2, r3
 8003ade:	897b      	ldrh	r3, [r7, #10]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003ae8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a0d      	ldr	r2, [pc, #52]	; (8003b24 <HAL_I2S_Init+0x278>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d101      	bne.n	8003af8 <HAL_I2S_Init+0x24c>
 8003af4:	4b0c      	ldr	r3, [pc, #48]	; (8003b28 <HAL_I2S_Init+0x27c>)
 8003af6:	e001      	b.n	8003afc <HAL_I2S_Init+0x250>
 8003af8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003afc:	897a      	ldrh	r2, [r7, #10]
 8003afe:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2201      	movs	r2, #1
 8003b0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003b0e:	2300      	movs	r3, #0
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3720      	adds	r7, #32
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}
 8003b18:	08003c23 	.word	0x08003c23
 8003b1c:	cccccccd 	.word	0xcccccccd
 8003b20:	08003d39 	.word	0x08003d39
 8003b24:	40003800 	.word	0x40003800
 8003b28:	40003400 	.word	0x40003400

08003b2c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003b34:	bf00      	nop
 8003b36:	370c      	adds	r7, #12
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr

08003b40 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003b48:	bf00      	nop
 8003b4a:	370c      	adds	r7, #12
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr

08003b54 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b083      	sub	sp, #12
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003b5c:	bf00      	nop
 8003b5e:	370c      	adds	r7, #12
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr

08003b68 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b082      	sub	sp, #8
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b74:	881a      	ldrh	r2, [r3, #0]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b80:	1c9a      	adds	r2, r3, #2
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	3b01      	subs	r3, #1
 8003b8e:	b29a      	uxth	r2, r3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d10e      	bne.n	8003bbc <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	685a      	ldr	r2, [r3, #4]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003bac:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f7ff ffb8 	bl	8003b2c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003bbc:	bf00      	nop
 8003bbe:	3708      	adds	r7, #8
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}

08003bc4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b082      	sub	sp, #8
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	68da      	ldr	r2, [r3, #12]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd6:	b292      	uxth	r2, r2
 8003bd8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bde:	1c9a      	adds	r2, r3, #2
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	3b01      	subs	r3, #1
 8003bec:	b29a      	uxth	r2, r3
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d10e      	bne.n	8003c1a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	685a      	ldr	r2, [r3, #4]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c0a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f7ff ff93 	bl	8003b40 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003c1a:	bf00      	nop
 8003c1c:	3708      	adds	r7, #8
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}

08003c22 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003c22:	b580      	push	{r7, lr}
 8003c24:	b086      	sub	sp, #24
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	2b04      	cmp	r3, #4
 8003c3c:	d13a      	bne.n	8003cb4 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	f003 0301 	and.w	r3, r3, #1
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d109      	bne.n	8003c5c <I2S_IRQHandler+0x3a>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c52:	2b40      	cmp	r3, #64	; 0x40
 8003c54:	d102      	bne.n	8003c5c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f7ff ffb4 	bl	8003bc4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c62:	2b40      	cmp	r3, #64	; 0x40
 8003c64:	d126      	bne.n	8003cb4 <I2S_IRQHandler+0x92>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f003 0320 	and.w	r3, r3, #32
 8003c70:	2b20      	cmp	r3, #32
 8003c72:	d11f      	bne.n	8003cb4 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	685a      	ldr	r2, [r3, #4]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c82:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003c84:	2300      	movs	r3, #0
 8003c86:	613b      	str	r3, [r7, #16]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	68db      	ldr	r3, [r3, #12]
 8003c8e:	613b      	str	r3, [r7, #16]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	613b      	str	r3, [r7, #16]
 8003c98:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ca6:	f043 0202 	orr.w	r2, r3, #2
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f7ff ff50 	bl	8003b54 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	2b03      	cmp	r3, #3
 8003cbe:	d136      	bne.n	8003d2e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	f003 0302 	and.w	r3, r3, #2
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d109      	bne.n	8003cde <I2S_IRQHandler+0xbc>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cd4:	2b80      	cmp	r3, #128	; 0x80
 8003cd6:	d102      	bne.n	8003cde <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f7ff ff45 	bl	8003b68 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	f003 0308 	and.w	r3, r3, #8
 8003ce4:	2b08      	cmp	r3, #8
 8003ce6:	d122      	bne.n	8003d2e <I2S_IRQHandler+0x10c>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	f003 0320 	and.w	r3, r3, #32
 8003cf2:	2b20      	cmp	r3, #32
 8003cf4:	d11b      	bne.n	8003d2e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	685a      	ldr	r2, [r3, #4]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d04:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003d06:	2300      	movs	r3, #0
 8003d08:	60fb      	str	r3, [r7, #12]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	60fb      	str	r3, [r7, #12]
 8003d12:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d20:	f043 0204 	orr.w	r2, r3, #4
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f7ff ff13 	bl	8003b54 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003d2e:	bf00      	nop
 8003d30:	3718      	adds	r7, #24
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
	...

08003d38 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b088      	sub	sp, #32
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a92      	ldr	r2, [pc, #584]	; (8003f98 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d101      	bne.n	8003d56 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003d52:	4b92      	ldr	r3, [pc, #584]	; (8003f9c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003d54:	e001      	b.n	8003d5a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003d56:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a8b      	ldr	r2, [pc, #556]	; (8003f98 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d101      	bne.n	8003d74 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003d70:	4b8a      	ldr	r3, [pc, #552]	; (8003f9c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003d72:	e001      	b.n	8003d78 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003d74:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d84:	d004      	beq.n	8003d90 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	f040 8099 	bne.w	8003ec2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	f003 0302 	and.w	r3, r3, #2
 8003d96:	2b02      	cmp	r3, #2
 8003d98:	d107      	bne.n	8003daa <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d002      	beq.n	8003daa <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f000 f925 	bl	8003ff4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003daa:	69bb      	ldr	r3, [r7, #24]
 8003dac:	f003 0301 	and.w	r3, r3, #1
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d107      	bne.n	8003dc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d002      	beq.n	8003dc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f000 f9c8 	bl	8004154 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003dc4:	69bb      	ldr	r3, [r7, #24]
 8003dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dca:	2b40      	cmp	r3, #64	; 0x40
 8003dcc:	d13a      	bne.n	8003e44 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	f003 0320 	and.w	r3, r3, #32
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d035      	beq.n	8003e44 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a6e      	ldr	r2, [pc, #440]	; (8003f98 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d101      	bne.n	8003de6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003de2:	4b6e      	ldr	r3, [pc, #440]	; (8003f9c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003de4:	e001      	b.n	8003dea <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003de6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003dea:	685a      	ldr	r2, [r3, #4]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4969      	ldr	r1, [pc, #420]	; (8003f98 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003df2:	428b      	cmp	r3, r1
 8003df4:	d101      	bne.n	8003dfa <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003df6:	4b69      	ldr	r3, [pc, #420]	; (8003f9c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003df8:	e001      	b.n	8003dfe <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003dfa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003dfe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003e02:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	685a      	ldr	r2, [r3, #4]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003e12:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003e14:	2300      	movs	r3, #0
 8003e16:	60fb      	str	r3, [r7, #12]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	60fb      	str	r3, [r7, #12]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	60fb      	str	r3, [r7, #12]
 8003e28:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e36:	f043 0202 	orr.w	r2, r3, #2
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f7ff fe88 	bl	8003b54 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003e44:	69fb      	ldr	r3, [r7, #28]
 8003e46:	f003 0308 	and.w	r3, r3, #8
 8003e4a:	2b08      	cmp	r3, #8
 8003e4c:	f040 80c3 	bne.w	8003fd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	f003 0320 	and.w	r3, r3, #32
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	f000 80bd 	beq.w	8003fd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	685a      	ldr	r2, [r3, #4]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003e6a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a49      	ldr	r2, [pc, #292]	; (8003f98 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d101      	bne.n	8003e7a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003e76:	4b49      	ldr	r3, [pc, #292]	; (8003f9c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e78:	e001      	b.n	8003e7e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003e7a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e7e:	685a      	ldr	r2, [r3, #4]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4944      	ldr	r1, [pc, #272]	; (8003f98 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e86:	428b      	cmp	r3, r1
 8003e88:	d101      	bne.n	8003e8e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003e8a:	4b44      	ldr	r3, [pc, #272]	; (8003f9c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e8c:	e001      	b.n	8003e92 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003e8e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e92:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003e96:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003e98:	2300      	movs	r3, #0
 8003e9a:	60bb      	str	r3, [r7, #8]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	60bb      	str	r3, [r7, #8]
 8003ea4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eb2:	f043 0204 	orr.w	r2, r3, #4
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f7ff fe4a 	bl	8003b54 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003ec0:	e089      	b.n	8003fd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003ec2:	69bb      	ldr	r3, [r7, #24]
 8003ec4:	f003 0302 	and.w	r3, r3, #2
 8003ec8:	2b02      	cmp	r3, #2
 8003eca:	d107      	bne.n	8003edc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d002      	beq.n	8003edc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f000 f8be 	bl	8004058 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	f003 0301 	and.w	r3, r3, #1
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d107      	bne.n	8003ef6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d002      	beq.n	8003ef6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	f000 f8fd 	bl	80040f0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003efc:	2b40      	cmp	r3, #64	; 0x40
 8003efe:	d12f      	bne.n	8003f60 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	f003 0320 	and.w	r3, r3, #32
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d02a      	beq.n	8003f60 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	685a      	ldr	r2, [r3, #4]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003f18:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a1e      	ldr	r2, [pc, #120]	; (8003f98 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d101      	bne.n	8003f28 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003f24:	4b1d      	ldr	r3, [pc, #116]	; (8003f9c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f26:	e001      	b.n	8003f2c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003f28:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f2c:	685a      	ldr	r2, [r3, #4]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4919      	ldr	r1, [pc, #100]	; (8003f98 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f34:	428b      	cmp	r3, r1
 8003f36:	d101      	bne.n	8003f3c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003f38:	4b18      	ldr	r3, [pc, #96]	; (8003f9c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f3a:	e001      	b.n	8003f40 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003f3c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f40:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003f44:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2201      	movs	r2, #1
 8003f4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f52:	f043 0202 	orr.w	r2, r3, #2
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f7ff fdfa 	bl	8003b54 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	f003 0308 	and.w	r3, r3, #8
 8003f66:	2b08      	cmp	r3, #8
 8003f68:	d136      	bne.n	8003fd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	f003 0320 	and.w	r3, r3, #32
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d031      	beq.n	8003fd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a07      	ldr	r2, [pc, #28]	; (8003f98 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d101      	bne.n	8003f82 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003f7e:	4b07      	ldr	r3, [pc, #28]	; (8003f9c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f80:	e001      	b.n	8003f86 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003f82:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f86:	685a      	ldr	r2, [r3, #4]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4902      	ldr	r1, [pc, #8]	; (8003f98 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f8e:	428b      	cmp	r3, r1
 8003f90:	d106      	bne.n	8003fa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003f92:	4b02      	ldr	r3, [pc, #8]	; (8003f9c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f94:	e006      	b.n	8003fa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003f96:	bf00      	nop
 8003f98:	40003800 	.word	0x40003800
 8003f9c:	40003400 	.word	0x40003400
 8003fa0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fa4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003fa8:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	685a      	ldr	r2, [r3, #4]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003fb8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fc6:	f043 0204 	orr.w	r2, r3, #4
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f7ff fdc0 	bl	8003b54 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003fd4:	e000      	b.n	8003fd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003fd6:	bf00      	nop
}
 8003fd8:	bf00      	nop
 8003fda:	3720      	adds	r7, #32
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}

08003fe0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b083      	sub	sp, #12
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003fe8:	bf00      	nop
 8003fea:	370c      	adds	r7, #12
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr

08003ff4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b082      	sub	sp, #8
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004000:	1c99      	adds	r1, r3, #2
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	6251      	str	r1, [r2, #36]	; 0x24
 8004006:	881a      	ldrh	r2, [r3, #0]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004012:	b29b      	uxth	r3, r3
 8004014:	3b01      	subs	r3, #1
 8004016:	b29a      	uxth	r2, r3
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004020:	b29b      	uxth	r3, r3
 8004022:	2b00      	cmp	r3, #0
 8004024:	d113      	bne.n	800404e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	685a      	ldr	r2, [r3, #4]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004034:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800403a:	b29b      	uxth	r3, r3
 800403c:	2b00      	cmp	r3, #0
 800403e:	d106      	bne.n	800404e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f7ff ffc9 	bl	8003fe0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800404e:	bf00      	nop
 8004050:	3708      	adds	r7, #8
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
	...

08004058 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004064:	1c99      	adds	r1, r3, #2
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	6251      	str	r1, [r2, #36]	; 0x24
 800406a:	8819      	ldrh	r1, [r3, #0]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a1d      	ldr	r2, [pc, #116]	; (80040e8 <I2SEx_TxISR_I2SExt+0x90>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d101      	bne.n	800407a <I2SEx_TxISR_I2SExt+0x22>
 8004076:	4b1d      	ldr	r3, [pc, #116]	; (80040ec <I2SEx_TxISR_I2SExt+0x94>)
 8004078:	e001      	b.n	800407e <I2SEx_TxISR_I2SExt+0x26>
 800407a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800407e:	460a      	mov	r2, r1
 8004080:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004086:	b29b      	uxth	r3, r3
 8004088:	3b01      	subs	r3, #1
 800408a:	b29a      	uxth	r2, r3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004094:	b29b      	uxth	r3, r3
 8004096:	2b00      	cmp	r3, #0
 8004098:	d121      	bne.n	80040de <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a12      	ldr	r2, [pc, #72]	; (80040e8 <I2SEx_TxISR_I2SExt+0x90>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d101      	bne.n	80040a8 <I2SEx_TxISR_I2SExt+0x50>
 80040a4:	4b11      	ldr	r3, [pc, #68]	; (80040ec <I2SEx_TxISR_I2SExt+0x94>)
 80040a6:	e001      	b.n	80040ac <I2SEx_TxISR_I2SExt+0x54>
 80040a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040ac:	685a      	ldr	r2, [r3, #4]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	490d      	ldr	r1, [pc, #52]	; (80040e8 <I2SEx_TxISR_I2SExt+0x90>)
 80040b4:	428b      	cmp	r3, r1
 80040b6:	d101      	bne.n	80040bc <I2SEx_TxISR_I2SExt+0x64>
 80040b8:	4b0c      	ldr	r3, [pc, #48]	; (80040ec <I2SEx_TxISR_I2SExt+0x94>)
 80040ba:	e001      	b.n	80040c0 <I2SEx_TxISR_I2SExt+0x68>
 80040bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040c0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80040c4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d106      	bne.n	80040de <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f7ff ff81 	bl	8003fe0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80040de:	bf00      	nop
 80040e0:	3708      	adds	r7, #8
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	40003800 	.word	0x40003800
 80040ec:	40003400 	.word	0x40003400

080040f0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b082      	sub	sp, #8
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	68d8      	ldr	r0, [r3, #12]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004102:	1c99      	adds	r1, r3, #2
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004108:	b282      	uxth	r2, r0
 800410a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004110:	b29b      	uxth	r3, r3
 8004112:	3b01      	subs	r3, #1
 8004114:	b29a      	uxth	r2, r3
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800411e:	b29b      	uxth	r3, r3
 8004120:	2b00      	cmp	r3, #0
 8004122:	d113      	bne.n	800414c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	685a      	ldr	r2, [r3, #4]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004132:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004138:	b29b      	uxth	r3, r3
 800413a:	2b00      	cmp	r3, #0
 800413c:	d106      	bne.n	800414c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2201      	movs	r2, #1
 8004142:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f7ff ff4a 	bl	8003fe0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800414c:	bf00      	nop
 800414e:	3708      	adds	r7, #8
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}

08004154 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b082      	sub	sp, #8
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a20      	ldr	r2, [pc, #128]	; (80041e4 <I2SEx_RxISR_I2SExt+0x90>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d101      	bne.n	800416a <I2SEx_RxISR_I2SExt+0x16>
 8004166:	4b20      	ldr	r3, [pc, #128]	; (80041e8 <I2SEx_RxISR_I2SExt+0x94>)
 8004168:	e001      	b.n	800416e <I2SEx_RxISR_I2SExt+0x1a>
 800416a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800416e:	68d8      	ldr	r0, [r3, #12]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004174:	1c99      	adds	r1, r3, #2
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	62d1      	str	r1, [r2, #44]	; 0x2c
 800417a:	b282      	uxth	r2, r0
 800417c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004182:	b29b      	uxth	r3, r3
 8004184:	3b01      	subs	r3, #1
 8004186:	b29a      	uxth	r2, r3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004190:	b29b      	uxth	r3, r3
 8004192:	2b00      	cmp	r3, #0
 8004194:	d121      	bne.n	80041da <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a12      	ldr	r2, [pc, #72]	; (80041e4 <I2SEx_RxISR_I2SExt+0x90>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d101      	bne.n	80041a4 <I2SEx_RxISR_I2SExt+0x50>
 80041a0:	4b11      	ldr	r3, [pc, #68]	; (80041e8 <I2SEx_RxISR_I2SExt+0x94>)
 80041a2:	e001      	b.n	80041a8 <I2SEx_RxISR_I2SExt+0x54>
 80041a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041a8:	685a      	ldr	r2, [r3, #4]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	490d      	ldr	r1, [pc, #52]	; (80041e4 <I2SEx_RxISR_I2SExt+0x90>)
 80041b0:	428b      	cmp	r3, r1
 80041b2:	d101      	bne.n	80041b8 <I2SEx_RxISR_I2SExt+0x64>
 80041b4:	4b0c      	ldr	r3, [pc, #48]	; (80041e8 <I2SEx_RxISR_I2SExt+0x94>)
 80041b6:	e001      	b.n	80041bc <I2SEx_RxISR_I2SExt+0x68>
 80041b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041bc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80041c0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d106      	bne.n	80041da <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f7ff ff03 	bl	8003fe0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80041da:	bf00      	nop
 80041dc:	3708      	adds	r7, #8
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	40003800 	.word	0x40003800
 80041e8:	40003400 	.word	0x40003400

080041ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b086      	sub	sp, #24
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d101      	bne.n	80041fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e267      	b.n	80046ce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 0301 	and.w	r3, r3, #1
 8004206:	2b00      	cmp	r3, #0
 8004208:	d075      	beq.n	80042f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800420a:	4b88      	ldr	r3, [pc, #544]	; (800442c <HAL_RCC_OscConfig+0x240>)
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	f003 030c 	and.w	r3, r3, #12
 8004212:	2b04      	cmp	r3, #4
 8004214:	d00c      	beq.n	8004230 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004216:	4b85      	ldr	r3, [pc, #532]	; (800442c <HAL_RCC_OscConfig+0x240>)
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800421e:	2b08      	cmp	r3, #8
 8004220:	d112      	bne.n	8004248 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004222:	4b82      	ldr	r3, [pc, #520]	; (800442c <HAL_RCC_OscConfig+0x240>)
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800422a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800422e:	d10b      	bne.n	8004248 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004230:	4b7e      	ldr	r3, [pc, #504]	; (800442c <HAL_RCC_OscConfig+0x240>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004238:	2b00      	cmp	r3, #0
 800423a:	d05b      	beq.n	80042f4 <HAL_RCC_OscConfig+0x108>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d157      	bne.n	80042f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	e242      	b.n	80046ce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004250:	d106      	bne.n	8004260 <HAL_RCC_OscConfig+0x74>
 8004252:	4b76      	ldr	r3, [pc, #472]	; (800442c <HAL_RCC_OscConfig+0x240>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a75      	ldr	r2, [pc, #468]	; (800442c <HAL_RCC_OscConfig+0x240>)
 8004258:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800425c:	6013      	str	r3, [r2, #0]
 800425e:	e01d      	b.n	800429c <HAL_RCC_OscConfig+0xb0>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004268:	d10c      	bne.n	8004284 <HAL_RCC_OscConfig+0x98>
 800426a:	4b70      	ldr	r3, [pc, #448]	; (800442c <HAL_RCC_OscConfig+0x240>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a6f      	ldr	r2, [pc, #444]	; (800442c <HAL_RCC_OscConfig+0x240>)
 8004270:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004274:	6013      	str	r3, [r2, #0]
 8004276:	4b6d      	ldr	r3, [pc, #436]	; (800442c <HAL_RCC_OscConfig+0x240>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a6c      	ldr	r2, [pc, #432]	; (800442c <HAL_RCC_OscConfig+0x240>)
 800427c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004280:	6013      	str	r3, [r2, #0]
 8004282:	e00b      	b.n	800429c <HAL_RCC_OscConfig+0xb0>
 8004284:	4b69      	ldr	r3, [pc, #420]	; (800442c <HAL_RCC_OscConfig+0x240>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a68      	ldr	r2, [pc, #416]	; (800442c <HAL_RCC_OscConfig+0x240>)
 800428a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800428e:	6013      	str	r3, [r2, #0]
 8004290:	4b66      	ldr	r3, [pc, #408]	; (800442c <HAL_RCC_OscConfig+0x240>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a65      	ldr	r2, [pc, #404]	; (800442c <HAL_RCC_OscConfig+0x240>)
 8004296:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800429a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d013      	beq.n	80042cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042a4:	f7fd fabc 	bl	8001820 <HAL_GetTick>
 80042a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042aa:	e008      	b.n	80042be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042ac:	f7fd fab8 	bl	8001820 <HAL_GetTick>
 80042b0:	4602      	mov	r2, r0
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	2b64      	cmp	r3, #100	; 0x64
 80042b8:	d901      	bls.n	80042be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80042ba:	2303      	movs	r3, #3
 80042bc:	e207      	b.n	80046ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042be:	4b5b      	ldr	r3, [pc, #364]	; (800442c <HAL_RCC_OscConfig+0x240>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d0f0      	beq.n	80042ac <HAL_RCC_OscConfig+0xc0>
 80042ca:	e014      	b.n	80042f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042cc:	f7fd faa8 	bl	8001820 <HAL_GetTick>
 80042d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042d2:	e008      	b.n	80042e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042d4:	f7fd faa4 	bl	8001820 <HAL_GetTick>
 80042d8:	4602      	mov	r2, r0
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	2b64      	cmp	r3, #100	; 0x64
 80042e0:	d901      	bls.n	80042e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80042e2:	2303      	movs	r3, #3
 80042e4:	e1f3      	b.n	80046ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042e6:	4b51      	ldr	r3, [pc, #324]	; (800442c <HAL_RCC_OscConfig+0x240>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d1f0      	bne.n	80042d4 <HAL_RCC_OscConfig+0xe8>
 80042f2:	e000      	b.n	80042f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 0302 	and.w	r3, r3, #2
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d063      	beq.n	80043ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004302:	4b4a      	ldr	r3, [pc, #296]	; (800442c <HAL_RCC_OscConfig+0x240>)
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	f003 030c 	and.w	r3, r3, #12
 800430a:	2b00      	cmp	r3, #0
 800430c:	d00b      	beq.n	8004326 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800430e:	4b47      	ldr	r3, [pc, #284]	; (800442c <HAL_RCC_OscConfig+0x240>)
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004316:	2b08      	cmp	r3, #8
 8004318:	d11c      	bne.n	8004354 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800431a:	4b44      	ldr	r3, [pc, #272]	; (800442c <HAL_RCC_OscConfig+0x240>)
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004322:	2b00      	cmp	r3, #0
 8004324:	d116      	bne.n	8004354 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004326:	4b41      	ldr	r3, [pc, #260]	; (800442c <HAL_RCC_OscConfig+0x240>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 0302 	and.w	r3, r3, #2
 800432e:	2b00      	cmp	r3, #0
 8004330:	d005      	beq.n	800433e <HAL_RCC_OscConfig+0x152>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	68db      	ldr	r3, [r3, #12]
 8004336:	2b01      	cmp	r3, #1
 8004338:	d001      	beq.n	800433e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e1c7      	b.n	80046ce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800433e:	4b3b      	ldr	r3, [pc, #236]	; (800442c <HAL_RCC_OscConfig+0x240>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	691b      	ldr	r3, [r3, #16]
 800434a:	00db      	lsls	r3, r3, #3
 800434c:	4937      	ldr	r1, [pc, #220]	; (800442c <HAL_RCC_OscConfig+0x240>)
 800434e:	4313      	orrs	r3, r2
 8004350:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004352:	e03a      	b.n	80043ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d020      	beq.n	800439e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800435c:	4b34      	ldr	r3, [pc, #208]	; (8004430 <HAL_RCC_OscConfig+0x244>)
 800435e:	2201      	movs	r2, #1
 8004360:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004362:	f7fd fa5d 	bl	8001820 <HAL_GetTick>
 8004366:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004368:	e008      	b.n	800437c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800436a:	f7fd fa59 	bl	8001820 <HAL_GetTick>
 800436e:	4602      	mov	r2, r0
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	1ad3      	subs	r3, r2, r3
 8004374:	2b02      	cmp	r3, #2
 8004376:	d901      	bls.n	800437c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004378:	2303      	movs	r3, #3
 800437a:	e1a8      	b.n	80046ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800437c:	4b2b      	ldr	r3, [pc, #172]	; (800442c <HAL_RCC_OscConfig+0x240>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 0302 	and.w	r3, r3, #2
 8004384:	2b00      	cmp	r3, #0
 8004386:	d0f0      	beq.n	800436a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004388:	4b28      	ldr	r3, [pc, #160]	; (800442c <HAL_RCC_OscConfig+0x240>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	691b      	ldr	r3, [r3, #16]
 8004394:	00db      	lsls	r3, r3, #3
 8004396:	4925      	ldr	r1, [pc, #148]	; (800442c <HAL_RCC_OscConfig+0x240>)
 8004398:	4313      	orrs	r3, r2
 800439a:	600b      	str	r3, [r1, #0]
 800439c:	e015      	b.n	80043ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800439e:	4b24      	ldr	r3, [pc, #144]	; (8004430 <HAL_RCC_OscConfig+0x244>)
 80043a0:	2200      	movs	r2, #0
 80043a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043a4:	f7fd fa3c 	bl	8001820 <HAL_GetTick>
 80043a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043aa:	e008      	b.n	80043be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043ac:	f7fd fa38 	bl	8001820 <HAL_GetTick>
 80043b0:	4602      	mov	r2, r0
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	2b02      	cmp	r3, #2
 80043b8:	d901      	bls.n	80043be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e187      	b.n	80046ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043be:	4b1b      	ldr	r3, [pc, #108]	; (800442c <HAL_RCC_OscConfig+0x240>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 0302 	and.w	r3, r3, #2
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d1f0      	bne.n	80043ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0308 	and.w	r3, r3, #8
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d036      	beq.n	8004444 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	695b      	ldr	r3, [r3, #20]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d016      	beq.n	800440c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043de:	4b15      	ldr	r3, [pc, #84]	; (8004434 <HAL_RCC_OscConfig+0x248>)
 80043e0:	2201      	movs	r2, #1
 80043e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043e4:	f7fd fa1c 	bl	8001820 <HAL_GetTick>
 80043e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043ea:	e008      	b.n	80043fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043ec:	f7fd fa18 	bl	8001820 <HAL_GetTick>
 80043f0:	4602      	mov	r2, r0
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	2b02      	cmp	r3, #2
 80043f8:	d901      	bls.n	80043fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	e167      	b.n	80046ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043fe:	4b0b      	ldr	r3, [pc, #44]	; (800442c <HAL_RCC_OscConfig+0x240>)
 8004400:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004402:	f003 0302 	and.w	r3, r3, #2
 8004406:	2b00      	cmp	r3, #0
 8004408:	d0f0      	beq.n	80043ec <HAL_RCC_OscConfig+0x200>
 800440a:	e01b      	b.n	8004444 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800440c:	4b09      	ldr	r3, [pc, #36]	; (8004434 <HAL_RCC_OscConfig+0x248>)
 800440e:	2200      	movs	r2, #0
 8004410:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004412:	f7fd fa05 	bl	8001820 <HAL_GetTick>
 8004416:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004418:	e00e      	b.n	8004438 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800441a:	f7fd fa01 	bl	8001820 <HAL_GetTick>
 800441e:	4602      	mov	r2, r0
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	1ad3      	subs	r3, r2, r3
 8004424:	2b02      	cmp	r3, #2
 8004426:	d907      	bls.n	8004438 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004428:	2303      	movs	r3, #3
 800442a:	e150      	b.n	80046ce <HAL_RCC_OscConfig+0x4e2>
 800442c:	40023800 	.word	0x40023800
 8004430:	42470000 	.word	0x42470000
 8004434:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004438:	4b88      	ldr	r3, [pc, #544]	; (800465c <HAL_RCC_OscConfig+0x470>)
 800443a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800443c:	f003 0302 	and.w	r3, r3, #2
 8004440:	2b00      	cmp	r3, #0
 8004442:	d1ea      	bne.n	800441a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 0304 	and.w	r3, r3, #4
 800444c:	2b00      	cmp	r3, #0
 800444e:	f000 8097 	beq.w	8004580 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004452:	2300      	movs	r3, #0
 8004454:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004456:	4b81      	ldr	r3, [pc, #516]	; (800465c <HAL_RCC_OscConfig+0x470>)
 8004458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d10f      	bne.n	8004482 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004462:	2300      	movs	r3, #0
 8004464:	60bb      	str	r3, [r7, #8]
 8004466:	4b7d      	ldr	r3, [pc, #500]	; (800465c <HAL_RCC_OscConfig+0x470>)
 8004468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446a:	4a7c      	ldr	r2, [pc, #496]	; (800465c <HAL_RCC_OscConfig+0x470>)
 800446c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004470:	6413      	str	r3, [r2, #64]	; 0x40
 8004472:	4b7a      	ldr	r3, [pc, #488]	; (800465c <HAL_RCC_OscConfig+0x470>)
 8004474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800447a:	60bb      	str	r3, [r7, #8]
 800447c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800447e:	2301      	movs	r3, #1
 8004480:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004482:	4b77      	ldr	r3, [pc, #476]	; (8004660 <HAL_RCC_OscConfig+0x474>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800448a:	2b00      	cmp	r3, #0
 800448c:	d118      	bne.n	80044c0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800448e:	4b74      	ldr	r3, [pc, #464]	; (8004660 <HAL_RCC_OscConfig+0x474>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a73      	ldr	r2, [pc, #460]	; (8004660 <HAL_RCC_OscConfig+0x474>)
 8004494:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004498:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800449a:	f7fd f9c1 	bl	8001820 <HAL_GetTick>
 800449e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044a0:	e008      	b.n	80044b4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044a2:	f7fd f9bd 	bl	8001820 <HAL_GetTick>
 80044a6:	4602      	mov	r2, r0
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	d901      	bls.n	80044b4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80044b0:	2303      	movs	r3, #3
 80044b2:	e10c      	b.n	80046ce <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044b4:	4b6a      	ldr	r3, [pc, #424]	; (8004660 <HAL_RCC_OscConfig+0x474>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d0f0      	beq.n	80044a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d106      	bne.n	80044d6 <HAL_RCC_OscConfig+0x2ea>
 80044c8:	4b64      	ldr	r3, [pc, #400]	; (800465c <HAL_RCC_OscConfig+0x470>)
 80044ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044cc:	4a63      	ldr	r2, [pc, #396]	; (800465c <HAL_RCC_OscConfig+0x470>)
 80044ce:	f043 0301 	orr.w	r3, r3, #1
 80044d2:	6713      	str	r3, [r2, #112]	; 0x70
 80044d4:	e01c      	b.n	8004510 <HAL_RCC_OscConfig+0x324>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	2b05      	cmp	r3, #5
 80044dc:	d10c      	bne.n	80044f8 <HAL_RCC_OscConfig+0x30c>
 80044de:	4b5f      	ldr	r3, [pc, #380]	; (800465c <HAL_RCC_OscConfig+0x470>)
 80044e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e2:	4a5e      	ldr	r2, [pc, #376]	; (800465c <HAL_RCC_OscConfig+0x470>)
 80044e4:	f043 0304 	orr.w	r3, r3, #4
 80044e8:	6713      	str	r3, [r2, #112]	; 0x70
 80044ea:	4b5c      	ldr	r3, [pc, #368]	; (800465c <HAL_RCC_OscConfig+0x470>)
 80044ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ee:	4a5b      	ldr	r2, [pc, #364]	; (800465c <HAL_RCC_OscConfig+0x470>)
 80044f0:	f043 0301 	orr.w	r3, r3, #1
 80044f4:	6713      	str	r3, [r2, #112]	; 0x70
 80044f6:	e00b      	b.n	8004510 <HAL_RCC_OscConfig+0x324>
 80044f8:	4b58      	ldr	r3, [pc, #352]	; (800465c <HAL_RCC_OscConfig+0x470>)
 80044fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044fc:	4a57      	ldr	r2, [pc, #348]	; (800465c <HAL_RCC_OscConfig+0x470>)
 80044fe:	f023 0301 	bic.w	r3, r3, #1
 8004502:	6713      	str	r3, [r2, #112]	; 0x70
 8004504:	4b55      	ldr	r3, [pc, #340]	; (800465c <HAL_RCC_OscConfig+0x470>)
 8004506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004508:	4a54      	ldr	r2, [pc, #336]	; (800465c <HAL_RCC_OscConfig+0x470>)
 800450a:	f023 0304 	bic.w	r3, r3, #4
 800450e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d015      	beq.n	8004544 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004518:	f7fd f982 	bl	8001820 <HAL_GetTick>
 800451c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800451e:	e00a      	b.n	8004536 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004520:	f7fd f97e 	bl	8001820 <HAL_GetTick>
 8004524:	4602      	mov	r2, r0
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	f241 3288 	movw	r2, #5000	; 0x1388
 800452e:	4293      	cmp	r3, r2
 8004530:	d901      	bls.n	8004536 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	e0cb      	b.n	80046ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004536:	4b49      	ldr	r3, [pc, #292]	; (800465c <HAL_RCC_OscConfig+0x470>)
 8004538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800453a:	f003 0302 	and.w	r3, r3, #2
 800453e:	2b00      	cmp	r3, #0
 8004540:	d0ee      	beq.n	8004520 <HAL_RCC_OscConfig+0x334>
 8004542:	e014      	b.n	800456e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004544:	f7fd f96c 	bl	8001820 <HAL_GetTick>
 8004548:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800454a:	e00a      	b.n	8004562 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800454c:	f7fd f968 	bl	8001820 <HAL_GetTick>
 8004550:	4602      	mov	r2, r0
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	f241 3288 	movw	r2, #5000	; 0x1388
 800455a:	4293      	cmp	r3, r2
 800455c:	d901      	bls.n	8004562 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800455e:	2303      	movs	r3, #3
 8004560:	e0b5      	b.n	80046ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004562:	4b3e      	ldr	r3, [pc, #248]	; (800465c <HAL_RCC_OscConfig+0x470>)
 8004564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004566:	f003 0302 	and.w	r3, r3, #2
 800456a:	2b00      	cmp	r3, #0
 800456c:	d1ee      	bne.n	800454c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800456e:	7dfb      	ldrb	r3, [r7, #23]
 8004570:	2b01      	cmp	r3, #1
 8004572:	d105      	bne.n	8004580 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004574:	4b39      	ldr	r3, [pc, #228]	; (800465c <HAL_RCC_OscConfig+0x470>)
 8004576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004578:	4a38      	ldr	r2, [pc, #224]	; (800465c <HAL_RCC_OscConfig+0x470>)
 800457a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800457e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	699b      	ldr	r3, [r3, #24]
 8004584:	2b00      	cmp	r3, #0
 8004586:	f000 80a1 	beq.w	80046cc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800458a:	4b34      	ldr	r3, [pc, #208]	; (800465c <HAL_RCC_OscConfig+0x470>)
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	f003 030c 	and.w	r3, r3, #12
 8004592:	2b08      	cmp	r3, #8
 8004594:	d05c      	beq.n	8004650 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	699b      	ldr	r3, [r3, #24]
 800459a:	2b02      	cmp	r3, #2
 800459c:	d141      	bne.n	8004622 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800459e:	4b31      	ldr	r3, [pc, #196]	; (8004664 <HAL_RCC_OscConfig+0x478>)
 80045a0:	2200      	movs	r2, #0
 80045a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045a4:	f7fd f93c 	bl	8001820 <HAL_GetTick>
 80045a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045aa:	e008      	b.n	80045be <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045ac:	f7fd f938 	bl	8001820 <HAL_GetTick>
 80045b0:	4602      	mov	r2, r0
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	2b02      	cmp	r3, #2
 80045b8:	d901      	bls.n	80045be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80045ba:	2303      	movs	r3, #3
 80045bc:	e087      	b.n	80046ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045be:	4b27      	ldr	r3, [pc, #156]	; (800465c <HAL_RCC_OscConfig+0x470>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d1f0      	bne.n	80045ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	69da      	ldr	r2, [r3, #28]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6a1b      	ldr	r3, [r3, #32]
 80045d2:	431a      	orrs	r2, r3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d8:	019b      	lsls	r3, r3, #6
 80045da:	431a      	orrs	r2, r3
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e0:	085b      	lsrs	r3, r3, #1
 80045e2:	3b01      	subs	r3, #1
 80045e4:	041b      	lsls	r3, r3, #16
 80045e6:	431a      	orrs	r2, r3
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ec:	061b      	lsls	r3, r3, #24
 80045ee:	491b      	ldr	r1, [pc, #108]	; (800465c <HAL_RCC_OscConfig+0x470>)
 80045f0:	4313      	orrs	r3, r2
 80045f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045f4:	4b1b      	ldr	r3, [pc, #108]	; (8004664 <HAL_RCC_OscConfig+0x478>)
 80045f6:	2201      	movs	r2, #1
 80045f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045fa:	f7fd f911 	bl	8001820 <HAL_GetTick>
 80045fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004600:	e008      	b.n	8004614 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004602:	f7fd f90d 	bl	8001820 <HAL_GetTick>
 8004606:	4602      	mov	r2, r0
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	1ad3      	subs	r3, r2, r3
 800460c:	2b02      	cmp	r3, #2
 800460e:	d901      	bls.n	8004614 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004610:	2303      	movs	r3, #3
 8004612:	e05c      	b.n	80046ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004614:	4b11      	ldr	r3, [pc, #68]	; (800465c <HAL_RCC_OscConfig+0x470>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800461c:	2b00      	cmp	r3, #0
 800461e:	d0f0      	beq.n	8004602 <HAL_RCC_OscConfig+0x416>
 8004620:	e054      	b.n	80046cc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004622:	4b10      	ldr	r3, [pc, #64]	; (8004664 <HAL_RCC_OscConfig+0x478>)
 8004624:	2200      	movs	r2, #0
 8004626:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004628:	f7fd f8fa 	bl	8001820 <HAL_GetTick>
 800462c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800462e:	e008      	b.n	8004642 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004630:	f7fd f8f6 	bl	8001820 <HAL_GetTick>
 8004634:	4602      	mov	r2, r0
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	2b02      	cmp	r3, #2
 800463c:	d901      	bls.n	8004642 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800463e:	2303      	movs	r3, #3
 8004640:	e045      	b.n	80046ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004642:	4b06      	ldr	r3, [pc, #24]	; (800465c <HAL_RCC_OscConfig+0x470>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800464a:	2b00      	cmp	r3, #0
 800464c:	d1f0      	bne.n	8004630 <HAL_RCC_OscConfig+0x444>
 800464e:	e03d      	b.n	80046cc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	699b      	ldr	r3, [r3, #24]
 8004654:	2b01      	cmp	r3, #1
 8004656:	d107      	bne.n	8004668 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	e038      	b.n	80046ce <HAL_RCC_OscConfig+0x4e2>
 800465c:	40023800 	.word	0x40023800
 8004660:	40007000 	.word	0x40007000
 8004664:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004668:	4b1b      	ldr	r3, [pc, #108]	; (80046d8 <HAL_RCC_OscConfig+0x4ec>)
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	699b      	ldr	r3, [r3, #24]
 8004672:	2b01      	cmp	r3, #1
 8004674:	d028      	beq.n	80046c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004680:	429a      	cmp	r2, r3
 8004682:	d121      	bne.n	80046c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800468e:	429a      	cmp	r2, r3
 8004690:	d11a      	bne.n	80046c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004692:	68fa      	ldr	r2, [r7, #12]
 8004694:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004698:	4013      	ands	r3, r2
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800469e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d111      	bne.n	80046c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ae:	085b      	lsrs	r3, r3, #1
 80046b0:	3b01      	subs	r3, #1
 80046b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d107      	bne.n	80046c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d001      	beq.n	80046cc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	e000      	b.n	80046ce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80046cc:	2300      	movs	r3, #0
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3718      	adds	r7, #24
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	bf00      	nop
 80046d8:	40023800 	.word	0x40023800

080046dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b084      	sub	sp, #16
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d101      	bne.n	80046f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e0cc      	b.n	800488a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80046f0:	4b68      	ldr	r3, [pc, #416]	; (8004894 <HAL_RCC_ClockConfig+0x1b8>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 0307 	and.w	r3, r3, #7
 80046f8:	683a      	ldr	r2, [r7, #0]
 80046fa:	429a      	cmp	r2, r3
 80046fc:	d90c      	bls.n	8004718 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046fe:	4b65      	ldr	r3, [pc, #404]	; (8004894 <HAL_RCC_ClockConfig+0x1b8>)
 8004700:	683a      	ldr	r2, [r7, #0]
 8004702:	b2d2      	uxtb	r2, r2
 8004704:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004706:	4b63      	ldr	r3, [pc, #396]	; (8004894 <HAL_RCC_ClockConfig+0x1b8>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 0307 	and.w	r3, r3, #7
 800470e:	683a      	ldr	r2, [r7, #0]
 8004710:	429a      	cmp	r2, r3
 8004712:	d001      	beq.n	8004718 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	e0b8      	b.n	800488a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 0302 	and.w	r3, r3, #2
 8004720:	2b00      	cmp	r3, #0
 8004722:	d020      	beq.n	8004766 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 0304 	and.w	r3, r3, #4
 800472c:	2b00      	cmp	r3, #0
 800472e:	d005      	beq.n	800473c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004730:	4b59      	ldr	r3, [pc, #356]	; (8004898 <HAL_RCC_ClockConfig+0x1bc>)
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	4a58      	ldr	r2, [pc, #352]	; (8004898 <HAL_RCC_ClockConfig+0x1bc>)
 8004736:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800473a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 0308 	and.w	r3, r3, #8
 8004744:	2b00      	cmp	r3, #0
 8004746:	d005      	beq.n	8004754 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004748:	4b53      	ldr	r3, [pc, #332]	; (8004898 <HAL_RCC_ClockConfig+0x1bc>)
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	4a52      	ldr	r2, [pc, #328]	; (8004898 <HAL_RCC_ClockConfig+0x1bc>)
 800474e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004752:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004754:	4b50      	ldr	r3, [pc, #320]	; (8004898 <HAL_RCC_ClockConfig+0x1bc>)
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	494d      	ldr	r1, [pc, #308]	; (8004898 <HAL_RCC_ClockConfig+0x1bc>)
 8004762:	4313      	orrs	r3, r2
 8004764:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 0301 	and.w	r3, r3, #1
 800476e:	2b00      	cmp	r3, #0
 8004770:	d044      	beq.n	80047fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	2b01      	cmp	r3, #1
 8004778:	d107      	bne.n	800478a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800477a:	4b47      	ldr	r3, [pc, #284]	; (8004898 <HAL_RCC_ClockConfig+0x1bc>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004782:	2b00      	cmp	r3, #0
 8004784:	d119      	bne.n	80047ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e07f      	b.n	800488a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	2b02      	cmp	r3, #2
 8004790:	d003      	beq.n	800479a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004796:	2b03      	cmp	r3, #3
 8004798:	d107      	bne.n	80047aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800479a:	4b3f      	ldr	r3, [pc, #252]	; (8004898 <HAL_RCC_ClockConfig+0x1bc>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d109      	bne.n	80047ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e06f      	b.n	800488a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047aa:	4b3b      	ldr	r3, [pc, #236]	; (8004898 <HAL_RCC_ClockConfig+0x1bc>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 0302 	and.w	r3, r3, #2
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d101      	bne.n	80047ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e067      	b.n	800488a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047ba:	4b37      	ldr	r3, [pc, #220]	; (8004898 <HAL_RCC_ClockConfig+0x1bc>)
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	f023 0203 	bic.w	r2, r3, #3
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	4934      	ldr	r1, [pc, #208]	; (8004898 <HAL_RCC_ClockConfig+0x1bc>)
 80047c8:	4313      	orrs	r3, r2
 80047ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047cc:	f7fd f828 	bl	8001820 <HAL_GetTick>
 80047d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047d2:	e00a      	b.n	80047ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047d4:	f7fd f824 	bl	8001820 <HAL_GetTick>
 80047d8:	4602      	mov	r2, r0
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	f241 3288 	movw	r2, #5000	; 0x1388
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d901      	bls.n	80047ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	e04f      	b.n	800488a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047ea:	4b2b      	ldr	r3, [pc, #172]	; (8004898 <HAL_RCC_ClockConfig+0x1bc>)
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	f003 020c 	and.w	r2, r3, #12
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d1eb      	bne.n	80047d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80047fc:	4b25      	ldr	r3, [pc, #148]	; (8004894 <HAL_RCC_ClockConfig+0x1b8>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0307 	and.w	r3, r3, #7
 8004804:	683a      	ldr	r2, [r7, #0]
 8004806:	429a      	cmp	r2, r3
 8004808:	d20c      	bcs.n	8004824 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800480a:	4b22      	ldr	r3, [pc, #136]	; (8004894 <HAL_RCC_ClockConfig+0x1b8>)
 800480c:	683a      	ldr	r2, [r7, #0]
 800480e:	b2d2      	uxtb	r2, r2
 8004810:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004812:	4b20      	ldr	r3, [pc, #128]	; (8004894 <HAL_RCC_ClockConfig+0x1b8>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 0307 	and.w	r3, r3, #7
 800481a:	683a      	ldr	r2, [r7, #0]
 800481c:	429a      	cmp	r2, r3
 800481e:	d001      	beq.n	8004824 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	e032      	b.n	800488a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 0304 	and.w	r3, r3, #4
 800482c:	2b00      	cmp	r3, #0
 800482e:	d008      	beq.n	8004842 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004830:	4b19      	ldr	r3, [pc, #100]	; (8004898 <HAL_RCC_ClockConfig+0x1bc>)
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	4916      	ldr	r1, [pc, #88]	; (8004898 <HAL_RCC_ClockConfig+0x1bc>)
 800483e:	4313      	orrs	r3, r2
 8004840:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 0308 	and.w	r3, r3, #8
 800484a:	2b00      	cmp	r3, #0
 800484c:	d009      	beq.n	8004862 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800484e:	4b12      	ldr	r3, [pc, #72]	; (8004898 <HAL_RCC_ClockConfig+0x1bc>)
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	691b      	ldr	r3, [r3, #16]
 800485a:	00db      	lsls	r3, r3, #3
 800485c:	490e      	ldr	r1, [pc, #56]	; (8004898 <HAL_RCC_ClockConfig+0x1bc>)
 800485e:	4313      	orrs	r3, r2
 8004860:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004862:	f000 f821 	bl	80048a8 <HAL_RCC_GetSysClockFreq>
 8004866:	4602      	mov	r2, r0
 8004868:	4b0b      	ldr	r3, [pc, #44]	; (8004898 <HAL_RCC_ClockConfig+0x1bc>)
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	091b      	lsrs	r3, r3, #4
 800486e:	f003 030f 	and.w	r3, r3, #15
 8004872:	490a      	ldr	r1, [pc, #40]	; (800489c <HAL_RCC_ClockConfig+0x1c0>)
 8004874:	5ccb      	ldrb	r3, [r1, r3]
 8004876:	fa22 f303 	lsr.w	r3, r2, r3
 800487a:	4a09      	ldr	r2, [pc, #36]	; (80048a0 <HAL_RCC_ClockConfig+0x1c4>)
 800487c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800487e:	4b09      	ldr	r3, [pc, #36]	; (80048a4 <HAL_RCC_ClockConfig+0x1c8>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4618      	mov	r0, r3
 8004884:	f7fc ff88 	bl	8001798 <HAL_InitTick>

  return HAL_OK;
 8004888:	2300      	movs	r3, #0
}
 800488a:	4618      	mov	r0, r3
 800488c:	3710      	adds	r7, #16
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
 8004892:	bf00      	nop
 8004894:	40023c00 	.word	0x40023c00
 8004898:	40023800 	.word	0x40023800
 800489c:	0800bd38 	.word	0x0800bd38
 80048a0:	20000000 	.word	0x20000000
 80048a4:	20000004 	.word	0x20000004

080048a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048ac:	b094      	sub	sp, #80	; 0x50
 80048ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80048b0:	2300      	movs	r3, #0
 80048b2:	647b      	str	r3, [r7, #68]	; 0x44
 80048b4:	2300      	movs	r3, #0
 80048b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048b8:	2300      	movs	r3, #0
 80048ba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80048bc:	2300      	movs	r3, #0
 80048be:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048c0:	4b79      	ldr	r3, [pc, #484]	; (8004aa8 <HAL_RCC_GetSysClockFreq+0x200>)
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	f003 030c 	and.w	r3, r3, #12
 80048c8:	2b08      	cmp	r3, #8
 80048ca:	d00d      	beq.n	80048e8 <HAL_RCC_GetSysClockFreq+0x40>
 80048cc:	2b08      	cmp	r3, #8
 80048ce:	f200 80e1 	bhi.w	8004a94 <HAL_RCC_GetSysClockFreq+0x1ec>
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d002      	beq.n	80048dc <HAL_RCC_GetSysClockFreq+0x34>
 80048d6:	2b04      	cmp	r3, #4
 80048d8:	d003      	beq.n	80048e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80048da:	e0db      	b.n	8004a94 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80048dc:	4b73      	ldr	r3, [pc, #460]	; (8004aac <HAL_RCC_GetSysClockFreq+0x204>)
 80048de:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80048e0:	e0db      	b.n	8004a9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80048e2:	4b73      	ldr	r3, [pc, #460]	; (8004ab0 <HAL_RCC_GetSysClockFreq+0x208>)
 80048e4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80048e6:	e0d8      	b.n	8004a9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048e8:	4b6f      	ldr	r3, [pc, #444]	; (8004aa8 <HAL_RCC_GetSysClockFreq+0x200>)
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048f0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80048f2:	4b6d      	ldr	r3, [pc, #436]	; (8004aa8 <HAL_RCC_GetSysClockFreq+0x200>)
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d063      	beq.n	80049c6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048fe:	4b6a      	ldr	r3, [pc, #424]	; (8004aa8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	099b      	lsrs	r3, r3, #6
 8004904:	2200      	movs	r2, #0
 8004906:	63bb      	str	r3, [r7, #56]	; 0x38
 8004908:	63fa      	str	r2, [r7, #60]	; 0x3c
 800490a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800490c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004910:	633b      	str	r3, [r7, #48]	; 0x30
 8004912:	2300      	movs	r3, #0
 8004914:	637b      	str	r3, [r7, #52]	; 0x34
 8004916:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800491a:	4622      	mov	r2, r4
 800491c:	462b      	mov	r3, r5
 800491e:	f04f 0000 	mov.w	r0, #0
 8004922:	f04f 0100 	mov.w	r1, #0
 8004926:	0159      	lsls	r1, r3, #5
 8004928:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800492c:	0150      	lsls	r0, r2, #5
 800492e:	4602      	mov	r2, r0
 8004930:	460b      	mov	r3, r1
 8004932:	4621      	mov	r1, r4
 8004934:	1a51      	subs	r1, r2, r1
 8004936:	6139      	str	r1, [r7, #16]
 8004938:	4629      	mov	r1, r5
 800493a:	eb63 0301 	sbc.w	r3, r3, r1
 800493e:	617b      	str	r3, [r7, #20]
 8004940:	f04f 0200 	mov.w	r2, #0
 8004944:	f04f 0300 	mov.w	r3, #0
 8004948:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800494c:	4659      	mov	r1, fp
 800494e:	018b      	lsls	r3, r1, #6
 8004950:	4651      	mov	r1, sl
 8004952:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004956:	4651      	mov	r1, sl
 8004958:	018a      	lsls	r2, r1, #6
 800495a:	4651      	mov	r1, sl
 800495c:	ebb2 0801 	subs.w	r8, r2, r1
 8004960:	4659      	mov	r1, fp
 8004962:	eb63 0901 	sbc.w	r9, r3, r1
 8004966:	f04f 0200 	mov.w	r2, #0
 800496a:	f04f 0300 	mov.w	r3, #0
 800496e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004972:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004976:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800497a:	4690      	mov	r8, r2
 800497c:	4699      	mov	r9, r3
 800497e:	4623      	mov	r3, r4
 8004980:	eb18 0303 	adds.w	r3, r8, r3
 8004984:	60bb      	str	r3, [r7, #8]
 8004986:	462b      	mov	r3, r5
 8004988:	eb49 0303 	adc.w	r3, r9, r3
 800498c:	60fb      	str	r3, [r7, #12]
 800498e:	f04f 0200 	mov.w	r2, #0
 8004992:	f04f 0300 	mov.w	r3, #0
 8004996:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800499a:	4629      	mov	r1, r5
 800499c:	024b      	lsls	r3, r1, #9
 800499e:	4621      	mov	r1, r4
 80049a0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80049a4:	4621      	mov	r1, r4
 80049a6:	024a      	lsls	r2, r1, #9
 80049a8:	4610      	mov	r0, r2
 80049aa:	4619      	mov	r1, r3
 80049ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049ae:	2200      	movs	r2, #0
 80049b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80049b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80049b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80049b8:	f7fc f8ac 	bl	8000b14 <__aeabi_uldivmod>
 80049bc:	4602      	mov	r2, r0
 80049be:	460b      	mov	r3, r1
 80049c0:	4613      	mov	r3, r2
 80049c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049c4:	e058      	b.n	8004a78 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049c6:	4b38      	ldr	r3, [pc, #224]	; (8004aa8 <HAL_RCC_GetSysClockFreq+0x200>)
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	099b      	lsrs	r3, r3, #6
 80049cc:	2200      	movs	r2, #0
 80049ce:	4618      	mov	r0, r3
 80049d0:	4611      	mov	r1, r2
 80049d2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80049d6:	623b      	str	r3, [r7, #32]
 80049d8:	2300      	movs	r3, #0
 80049da:	627b      	str	r3, [r7, #36]	; 0x24
 80049dc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80049e0:	4642      	mov	r2, r8
 80049e2:	464b      	mov	r3, r9
 80049e4:	f04f 0000 	mov.w	r0, #0
 80049e8:	f04f 0100 	mov.w	r1, #0
 80049ec:	0159      	lsls	r1, r3, #5
 80049ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049f2:	0150      	lsls	r0, r2, #5
 80049f4:	4602      	mov	r2, r0
 80049f6:	460b      	mov	r3, r1
 80049f8:	4641      	mov	r1, r8
 80049fa:	ebb2 0a01 	subs.w	sl, r2, r1
 80049fe:	4649      	mov	r1, r9
 8004a00:	eb63 0b01 	sbc.w	fp, r3, r1
 8004a04:	f04f 0200 	mov.w	r2, #0
 8004a08:	f04f 0300 	mov.w	r3, #0
 8004a0c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004a10:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004a14:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004a18:	ebb2 040a 	subs.w	r4, r2, sl
 8004a1c:	eb63 050b 	sbc.w	r5, r3, fp
 8004a20:	f04f 0200 	mov.w	r2, #0
 8004a24:	f04f 0300 	mov.w	r3, #0
 8004a28:	00eb      	lsls	r3, r5, #3
 8004a2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a2e:	00e2      	lsls	r2, r4, #3
 8004a30:	4614      	mov	r4, r2
 8004a32:	461d      	mov	r5, r3
 8004a34:	4643      	mov	r3, r8
 8004a36:	18e3      	adds	r3, r4, r3
 8004a38:	603b      	str	r3, [r7, #0]
 8004a3a:	464b      	mov	r3, r9
 8004a3c:	eb45 0303 	adc.w	r3, r5, r3
 8004a40:	607b      	str	r3, [r7, #4]
 8004a42:	f04f 0200 	mov.w	r2, #0
 8004a46:	f04f 0300 	mov.w	r3, #0
 8004a4a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004a4e:	4629      	mov	r1, r5
 8004a50:	028b      	lsls	r3, r1, #10
 8004a52:	4621      	mov	r1, r4
 8004a54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a58:	4621      	mov	r1, r4
 8004a5a:	028a      	lsls	r2, r1, #10
 8004a5c:	4610      	mov	r0, r2
 8004a5e:	4619      	mov	r1, r3
 8004a60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a62:	2200      	movs	r2, #0
 8004a64:	61bb      	str	r3, [r7, #24]
 8004a66:	61fa      	str	r2, [r7, #28]
 8004a68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a6c:	f7fc f852 	bl	8000b14 <__aeabi_uldivmod>
 8004a70:	4602      	mov	r2, r0
 8004a72:	460b      	mov	r3, r1
 8004a74:	4613      	mov	r3, r2
 8004a76:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a78:	4b0b      	ldr	r3, [pc, #44]	; (8004aa8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	0c1b      	lsrs	r3, r3, #16
 8004a7e:	f003 0303 	and.w	r3, r3, #3
 8004a82:	3301      	adds	r3, #1
 8004a84:	005b      	lsls	r3, r3, #1
 8004a86:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004a88:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004a8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a90:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a92:	e002      	b.n	8004a9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a94:	4b05      	ldr	r3, [pc, #20]	; (8004aac <HAL_RCC_GetSysClockFreq+0x204>)
 8004a96:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3750      	adds	r7, #80	; 0x50
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004aa6:	bf00      	nop
 8004aa8:	40023800 	.word	0x40023800
 8004aac:	00f42400 	.word	0x00f42400
 8004ab0:	007a1200 	.word	0x007a1200

08004ab4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ab8:	4b03      	ldr	r3, [pc, #12]	; (8004ac8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004aba:	681b      	ldr	r3, [r3, #0]
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr
 8004ac6:	bf00      	nop
 8004ac8:	20000000 	.word	0x20000000

08004acc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ad0:	f7ff fff0 	bl	8004ab4 <HAL_RCC_GetHCLKFreq>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	4b05      	ldr	r3, [pc, #20]	; (8004aec <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	0a9b      	lsrs	r3, r3, #10
 8004adc:	f003 0307 	and.w	r3, r3, #7
 8004ae0:	4903      	ldr	r1, [pc, #12]	; (8004af0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ae2:	5ccb      	ldrb	r3, [r1, r3]
 8004ae4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	bd80      	pop	{r7, pc}
 8004aec:	40023800 	.word	0x40023800
 8004af0:	0800bd48 	.word	0x0800bd48

08004af4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004af8:	f7ff ffdc 	bl	8004ab4 <HAL_RCC_GetHCLKFreq>
 8004afc:	4602      	mov	r2, r0
 8004afe:	4b05      	ldr	r3, [pc, #20]	; (8004b14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	0b5b      	lsrs	r3, r3, #13
 8004b04:	f003 0307 	and.w	r3, r3, #7
 8004b08:	4903      	ldr	r1, [pc, #12]	; (8004b18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b0a:	5ccb      	ldrb	r3, [r1, r3]
 8004b0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	bd80      	pop	{r7, pc}
 8004b14:	40023800 	.word	0x40023800
 8004b18:	0800bd48 	.word	0x0800bd48

08004b1c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b086      	sub	sp, #24
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004b24:	2300      	movs	r3, #0
 8004b26:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 0301 	and.w	r3, r3, #1
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d105      	bne.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d035      	beq.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004b44:	4b62      	ldr	r3, [pc, #392]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004b46:	2200      	movs	r2, #0
 8004b48:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004b4a:	f7fc fe69 	bl	8001820 <HAL_GetTick>
 8004b4e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b50:	e008      	b.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004b52:	f7fc fe65 	bl	8001820 <HAL_GetTick>
 8004b56:	4602      	mov	r2, r0
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	1ad3      	subs	r3, r2, r3
 8004b5c:	2b02      	cmp	r3, #2
 8004b5e:	d901      	bls.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b60:	2303      	movs	r3, #3
 8004b62:	e0b0      	b.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b64:	4b5b      	ldr	r3, [pc, #364]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d1f0      	bne.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	019a      	lsls	r2, r3, #6
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	071b      	lsls	r3, r3, #28
 8004b7c:	4955      	ldr	r1, [pc, #340]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004b84:	4b52      	ldr	r3, [pc, #328]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004b86:	2201      	movs	r2, #1
 8004b88:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004b8a:	f7fc fe49 	bl	8001820 <HAL_GetTick>
 8004b8e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b90:	e008      	b.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004b92:	f7fc fe45 	bl	8001820 <HAL_GetTick>
 8004b96:	4602      	mov	r2, r0
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	1ad3      	subs	r3, r2, r3
 8004b9c:	2b02      	cmp	r3, #2
 8004b9e:	d901      	bls.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ba0:	2303      	movs	r3, #3
 8004ba2:	e090      	b.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ba4:	4b4b      	ldr	r3, [pc, #300]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d0f0      	beq.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 0302 	and.w	r3, r3, #2
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	f000 8083 	beq.w	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	60fb      	str	r3, [r7, #12]
 8004bc2:	4b44      	ldr	r3, [pc, #272]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc6:	4a43      	ldr	r2, [pc, #268]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bcc:	6413      	str	r3, [r2, #64]	; 0x40
 8004bce:	4b41      	ldr	r3, [pc, #260]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bd6:	60fb      	str	r3, [r7, #12]
 8004bd8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004bda:	4b3f      	ldr	r3, [pc, #252]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a3e      	ldr	r2, [pc, #248]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004be0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004be4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004be6:	f7fc fe1b 	bl	8001820 <HAL_GetTick>
 8004bea:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004bec:	e008      	b.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004bee:	f7fc fe17 	bl	8001820 <HAL_GetTick>
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	1ad3      	subs	r3, r2, r3
 8004bf8:	2b02      	cmp	r3, #2
 8004bfa:	d901      	bls.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004bfc:	2303      	movs	r3, #3
 8004bfe:	e062      	b.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004c00:	4b35      	ldr	r3, [pc, #212]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d0f0      	beq.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004c0c:	4b31      	ldr	r3, [pc, #196]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c14:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d02f      	beq.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	68db      	ldr	r3, [r3, #12]
 8004c20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c24:	693a      	ldr	r2, [r7, #16]
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d028      	beq.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c2a:	4b2a      	ldr	r3, [pc, #168]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c32:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c34:	4b29      	ldr	r3, [pc, #164]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004c36:	2201      	movs	r2, #1
 8004c38:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c3a:	4b28      	ldr	r3, [pc, #160]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004c40:	4a24      	ldr	r2, [pc, #144]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004c46:	4b23      	ldr	r3, [pc, #140]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c4a:	f003 0301 	and.w	r3, r3, #1
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d114      	bne.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004c52:	f7fc fde5 	bl	8001820 <HAL_GetTick>
 8004c56:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c58:	e00a      	b.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c5a:	f7fc fde1 	bl	8001820 <HAL_GetTick>
 8004c5e:	4602      	mov	r2, r0
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	1ad3      	subs	r3, r2, r3
 8004c64:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d901      	bls.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004c6c:	2303      	movs	r3, #3
 8004c6e:	e02a      	b.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c70:	4b18      	ldr	r3, [pc, #96]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c74:	f003 0302 	and.w	r3, r3, #2
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d0ee      	beq.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c84:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c88:	d10d      	bne.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004c8a:	4b12      	ldr	r3, [pc, #72]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	68db      	ldr	r3, [r3, #12]
 8004c96:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004c9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c9e:	490d      	ldr	r1, [pc, #52]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	608b      	str	r3, [r1, #8]
 8004ca4:	e005      	b.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004ca6:	4b0b      	ldr	r3, [pc, #44]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	4a0a      	ldr	r2, [pc, #40]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cac:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004cb0:	6093      	str	r3, [r2, #8]
 8004cb2:	4b08      	ldr	r3, [pc, #32]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cb4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	68db      	ldr	r3, [r3, #12]
 8004cba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cbe:	4905      	ldr	r1, [pc, #20]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004cc4:	2300      	movs	r3, #0
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3718      	adds	r7, #24
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	bf00      	nop
 8004cd0:	42470068 	.word	0x42470068
 8004cd4:	40023800 	.word	0x40023800
 8004cd8:	40007000 	.word	0x40007000
 8004cdc:	42470e40 	.word	0x42470e40

08004ce0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b087      	sub	sp, #28
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004cec:	2300      	movs	r3, #0
 8004cee:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d13e      	bne.n	8004d7c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004cfe:	4b23      	ldr	r3, [pc, #140]	; (8004d8c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d06:	60fb      	str	r3, [r7, #12]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d005      	beq.n	8004d1a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d12f      	bne.n	8004d74 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004d14:	4b1e      	ldr	r3, [pc, #120]	; (8004d90 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004d16:	617b      	str	r3, [r7, #20]
          break;
 8004d18:	e02f      	b.n	8004d7a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004d1a:	4b1c      	ldr	r3, [pc, #112]	; (8004d8c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d26:	d108      	bne.n	8004d3a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004d28:	4b18      	ldr	r3, [pc, #96]	; (8004d8c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d30:	4a18      	ldr	r2, [pc, #96]	; (8004d94 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004d32:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d36:	613b      	str	r3, [r7, #16]
 8004d38:	e007      	b.n	8004d4a <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004d3a:	4b14      	ldr	r3, [pc, #80]	; (8004d8c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d42:	4a15      	ldr	r2, [pc, #84]	; (8004d98 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d48:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004d4a:	4b10      	ldr	r3, [pc, #64]	; (8004d8c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004d4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d50:	099b      	lsrs	r3, r3, #6
 8004d52:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	fb02 f303 	mul.w	r3, r2, r3
 8004d5c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004d5e:	4b0b      	ldr	r3, [pc, #44]	; (8004d8c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004d60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d64:	0f1b      	lsrs	r3, r3, #28
 8004d66:	f003 0307 	and.w	r3, r3, #7
 8004d6a:	68ba      	ldr	r2, [r7, #8]
 8004d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d70:	617b      	str	r3, [r7, #20]
          break;
 8004d72:	e002      	b.n	8004d7a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004d74:	2300      	movs	r3, #0
 8004d76:	617b      	str	r3, [r7, #20]
          break;
 8004d78:	bf00      	nop
        }
      }
      break;
 8004d7a:	bf00      	nop
    }
  }
  return frequency;
 8004d7c:	697b      	ldr	r3, [r7, #20]
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	371c      	adds	r7, #28
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr
 8004d8a:	bf00      	nop
 8004d8c:	40023800 	.word	0x40023800
 8004d90:	00bb8000 	.word	0x00bb8000
 8004d94:	007a1200 	.word	0x007a1200
 8004d98:	00f42400 	.word	0x00f42400

08004d9c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b082      	sub	sp, #8
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d101      	bne.n	8004dae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e07b      	b.n	8004ea6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d108      	bne.n	8004dc8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004dbe:	d009      	beq.n	8004dd4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	61da      	str	r2, [r3, #28]
 8004dc6:	e005      	b.n	8004dd4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d106      	bne.n	8004df4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2200      	movs	r2, #0
 8004dea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f7fc fb7a 	bl	80014e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2202      	movs	r2, #2
 8004df8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e0a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004e1c:	431a      	orrs	r2, r3
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	68db      	ldr	r3, [r3, #12]
 8004e22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e26:	431a      	orrs	r2, r3
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	691b      	ldr	r3, [r3, #16]
 8004e2c:	f003 0302 	and.w	r3, r3, #2
 8004e30:	431a      	orrs	r2, r3
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	695b      	ldr	r3, [r3, #20]
 8004e36:	f003 0301 	and.w	r3, r3, #1
 8004e3a:	431a      	orrs	r2, r3
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	699b      	ldr	r3, [r3, #24]
 8004e40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e44:	431a      	orrs	r2, r3
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	69db      	ldr	r3, [r3, #28]
 8004e4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e4e:	431a      	orrs	r2, r3
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6a1b      	ldr	r3, [r3, #32]
 8004e54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e58:	ea42 0103 	orr.w	r1, r2, r3
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e60:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	430a      	orrs	r2, r1
 8004e6a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	699b      	ldr	r3, [r3, #24]
 8004e70:	0c1b      	lsrs	r3, r3, #16
 8004e72:	f003 0104 	and.w	r1, r3, #4
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7a:	f003 0210 	and.w	r2, r3, #16
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	430a      	orrs	r2, r1
 8004e84:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	69da      	ldr	r2, [r3, #28]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e94:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004ea4:	2300      	movs	r3, #0
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3708      	adds	r7, #8
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}

08004eae <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004eae:	b580      	push	{r7, lr}
 8004eb0:	b082      	sub	sp, #8
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d101      	bne.n	8004ec0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e03f      	b.n	8004f40 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d106      	bne.n	8004eda <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	f7fc fb4f 	bl	8001578 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2224      	movs	r2, #36	; 0x24
 8004ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	68da      	ldr	r2, [r3, #12]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ef0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f000 f928 	bl	8005148 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	691a      	ldr	r2, [r3, #16]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f06:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	695a      	ldr	r2, [r3, #20]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f16:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	68da      	ldr	r2, [r3, #12]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f26:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2220      	movs	r2, #32
 8004f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2220      	movs	r2, #32
 8004f3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004f3e:	2300      	movs	r3, #0
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3708      	adds	r7, #8
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}

08004f48 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b08a      	sub	sp, #40	; 0x28
 8004f4c:	af02      	add	r7, sp, #8
 8004f4e:	60f8      	str	r0, [r7, #12]
 8004f50:	60b9      	str	r1, [r7, #8]
 8004f52:	603b      	str	r3, [r7, #0]
 8004f54:	4613      	mov	r3, r2
 8004f56:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f62:	b2db      	uxtb	r3, r3
 8004f64:	2b20      	cmp	r3, #32
 8004f66:	d17c      	bne.n	8005062 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d002      	beq.n	8004f74 <HAL_UART_Transmit+0x2c>
 8004f6e:	88fb      	ldrh	r3, [r7, #6]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d101      	bne.n	8004f78 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	e075      	b.n	8005064 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d101      	bne.n	8004f86 <HAL_UART_Transmit+0x3e>
 8004f82:	2302      	movs	r3, #2
 8004f84:	e06e      	b.n	8005064 <HAL_UART_Transmit+0x11c>
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2201      	movs	r2, #1
 8004f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2200      	movs	r2, #0
 8004f92:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2221      	movs	r2, #33	; 0x21
 8004f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f9c:	f7fc fc40 	bl	8001820 <HAL_GetTick>
 8004fa0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	88fa      	ldrh	r2, [r7, #6]
 8004fa6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	88fa      	ldrh	r2, [r7, #6]
 8004fac:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fb6:	d108      	bne.n	8004fca <HAL_UART_Transmit+0x82>
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	691b      	ldr	r3, [r3, #16]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d104      	bne.n	8004fca <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	61bb      	str	r3, [r7, #24]
 8004fc8:	e003      	b.n	8004fd2 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004fda:	e02a      	b.n	8005032 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	9300      	str	r3, [sp, #0]
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	2180      	movs	r1, #128	; 0x80
 8004fe6:	68f8      	ldr	r0, [r7, #12]
 8004fe8:	f000 f840 	bl	800506c <UART_WaitOnFlagUntilTimeout>
 8004fec:	4603      	mov	r3, r0
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d001      	beq.n	8004ff6 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004ff2:	2303      	movs	r3, #3
 8004ff4:	e036      	b.n	8005064 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004ff6:	69fb      	ldr	r3, [r7, #28]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d10b      	bne.n	8005014 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ffc:	69bb      	ldr	r3, [r7, #24]
 8004ffe:	881b      	ldrh	r3, [r3, #0]
 8005000:	461a      	mov	r2, r3
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800500a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800500c:	69bb      	ldr	r3, [r7, #24]
 800500e:	3302      	adds	r3, #2
 8005010:	61bb      	str	r3, [r7, #24]
 8005012:	e007      	b.n	8005024 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005014:	69fb      	ldr	r3, [r7, #28]
 8005016:	781a      	ldrb	r2, [r3, #0]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	3301      	adds	r3, #1
 8005022:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005028:	b29b      	uxth	r3, r3
 800502a:	3b01      	subs	r3, #1
 800502c:	b29a      	uxth	r2, r3
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005036:	b29b      	uxth	r3, r3
 8005038:	2b00      	cmp	r3, #0
 800503a:	d1cf      	bne.n	8004fdc <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	9300      	str	r3, [sp, #0]
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	2200      	movs	r2, #0
 8005044:	2140      	movs	r1, #64	; 0x40
 8005046:	68f8      	ldr	r0, [r7, #12]
 8005048:	f000 f810 	bl	800506c <UART_WaitOnFlagUntilTimeout>
 800504c:	4603      	mov	r3, r0
 800504e:	2b00      	cmp	r3, #0
 8005050:	d001      	beq.n	8005056 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005052:	2303      	movs	r3, #3
 8005054:	e006      	b.n	8005064 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2220      	movs	r2, #32
 800505a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800505e:	2300      	movs	r3, #0
 8005060:	e000      	b.n	8005064 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005062:	2302      	movs	r3, #2
  }
}
 8005064:	4618      	mov	r0, r3
 8005066:	3720      	adds	r7, #32
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}

0800506c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b090      	sub	sp, #64	; 0x40
 8005070:	af00      	add	r7, sp, #0
 8005072:	60f8      	str	r0, [r7, #12]
 8005074:	60b9      	str	r1, [r7, #8]
 8005076:	603b      	str	r3, [r7, #0]
 8005078:	4613      	mov	r3, r2
 800507a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800507c:	e050      	b.n	8005120 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800507e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005084:	d04c      	beq.n	8005120 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005086:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005088:	2b00      	cmp	r3, #0
 800508a:	d007      	beq.n	800509c <UART_WaitOnFlagUntilTimeout+0x30>
 800508c:	f7fc fbc8 	bl	8001820 <HAL_GetTick>
 8005090:	4602      	mov	r2, r0
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	1ad3      	subs	r3, r2, r3
 8005096:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005098:	429a      	cmp	r2, r3
 800509a:	d241      	bcs.n	8005120 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	330c      	adds	r3, #12
 80050a2:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050a6:	e853 3f00 	ldrex	r3, [r3]
 80050aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80050ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ae:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80050b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	330c      	adds	r3, #12
 80050ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80050bc:	637a      	str	r2, [r7, #52]	; 0x34
 80050be:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80050c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80050c4:	e841 2300 	strex	r3, r2, [r1]
 80050c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80050ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d1e5      	bne.n	800509c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	3314      	adds	r3, #20
 80050d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	e853 3f00 	ldrex	r3, [r3]
 80050de:	613b      	str	r3, [r7, #16]
   return(result);
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	f023 0301 	bic.w	r3, r3, #1
 80050e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	3314      	adds	r3, #20
 80050ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80050f0:	623a      	str	r2, [r7, #32]
 80050f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f4:	69f9      	ldr	r1, [r7, #28]
 80050f6:	6a3a      	ldr	r2, [r7, #32]
 80050f8:	e841 2300 	strex	r3, r2, [r1]
 80050fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80050fe:	69bb      	ldr	r3, [r7, #24]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d1e5      	bne.n	80050d0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2220      	movs	r2, #32
 8005108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2220      	movs	r2, #32
 8005110:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2200      	movs	r2, #0
 8005118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800511c:	2303      	movs	r3, #3
 800511e:	e00f      	b.n	8005140 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	4013      	ands	r3, r2
 800512a:	68ba      	ldr	r2, [r7, #8]
 800512c:	429a      	cmp	r2, r3
 800512e:	bf0c      	ite	eq
 8005130:	2301      	moveq	r3, #1
 8005132:	2300      	movne	r3, #0
 8005134:	b2db      	uxtb	r3, r3
 8005136:	461a      	mov	r2, r3
 8005138:	79fb      	ldrb	r3, [r7, #7]
 800513a:	429a      	cmp	r2, r3
 800513c:	d09f      	beq.n	800507e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800513e:	2300      	movs	r3, #0
}
 8005140:	4618      	mov	r0, r3
 8005142:	3740      	adds	r7, #64	; 0x40
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}

08005148 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005148:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800514c:	b0c0      	sub	sp, #256	; 0x100
 800514e:	af00      	add	r7, sp, #0
 8005150:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	691b      	ldr	r3, [r3, #16]
 800515c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005164:	68d9      	ldr	r1, [r3, #12]
 8005166:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	ea40 0301 	orr.w	r3, r0, r1
 8005170:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005172:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005176:	689a      	ldr	r2, [r3, #8]
 8005178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800517c:	691b      	ldr	r3, [r3, #16]
 800517e:	431a      	orrs	r2, r3
 8005180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005184:	695b      	ldr	r3, [r3, #20]
 8005186:	431a      	orrs	r2, r3
 8005188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800518c:	69db      	ldr	r3, [r3, #28]
 800518e:	4313      	orrs	r3, r2
 8005190:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80051a0:	f021 010c 	bic.w	r1, r1, #12
 80051a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80051ae:	430b      	orrs	r3, r1
 80051b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80051b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	695b      	ldr	r3, [r3, #20]
 80051ba:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80051be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051c2:	6999      	ldr	r1, [r3, #24]
 80051c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	ea40 0301 	orr.w	r3, r0, r1
 80051ce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80051d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	4b8f      	ldr	r3, [pc, #572]	; (8005414 <UART_SetConfig+0x2cc>)
 80051d8:	429a      	cmp	r2, r3
 80051da:	d005      	beq.n	80051e8 <UART_SetConfig+0xa0>
 80051dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051e0:	681a      	ldr	r2, [r3, #0]
 80051e2:	4b8d      	ldr	r3, [pc, #564]	; (8005418 <UART_SetConfig+0x2d0>)
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d104      	bne.n	80051f2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80051e8:	f7ff fc84 	bl	8004af4 <HAL_RCC_GetPCLK2Freq>
 80051ec:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80051f0:	e003      	b.n	80051fa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80051f2:	f7ff fc6b 	bl	8004acc <HAL_RCC_GetPCLK1Freq>
 80051f6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051fe:	69db      	ldr	r3, [r3, #28]
 8005200:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005204:	f040 810c 	bne.w	8005420 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005208:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800520c:	2200      	movs	r2, #0
 800520e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005212:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005216:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800521a:	4622      	mov	r2, r4
 800521c:	462b      	mov	r3, r5
 800521e:	1891      	adds	r1, r2, r2
 8005220:	65b9      	str	r1, [r7, #88]	; 0x58
 8005222:	415b      	adcs	r3, r3
 8005224:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005226:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800522a:	4621      	mov	r1, r4
 800522c:	eb12 0801 	adds.w	r8, r2, r1
 8005230:	4629      	mov	r1, r5
 8005232:	eb43 0901 	adc.w	r9, r3, r1
 8005236:	f04f 0200 	mov.w	r2, #0
 800523a:	f04f 0300 	mov.w	r3, #0
 800523e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005242:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005246:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800524a:	4690      	mov	r8, r2
 800524c:	4699      	mov	r9, r3
 800524e:	4623      	mov	r3, r4
 8005250:	eb18 0303 	adds.w	r3, r8, r3
 8005254:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005258:	462b      	mov	r3, r5
 800525a:	eb49 0303 	adc.w	r3, r9, r3
 800525e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005262:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	2200      	movs	r2, #0
 800526a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800526e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005272:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005276:	460b      	mov	r3, r1
 8005278:	18db      	adds	r3, r3, r3
 800527a:	653b      	str	r3, [r7, #80]	; 0x50
 800527c:	4613      	mov	r3, r2
 800527e:	eb42 0303 	adc.w	r3, r2, r3
 8005282:	657b      	str	r3, [r7, #84]	; 0x54
 8005284:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005288:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800528c:	f7fb fc42 	bl	8000b14 <__aeabi_uldivmod>
 8005290:	4602      	mov	r2, r0
 8005292:	460b      	mov	r3, r1
 8005294:	4b61      	ldr	r3, [pc, #388]	; (800541c <UART_SetConfig+0x2d4>)
 8005296:	fba3 2302 	umull	r2, r3, r3, r2
 800529a:	095b      	lsrs	r3, r3, #5
 800529c:	011c      	lsls	r4, r3, #4
 800529e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052a2:	2200      	movs	r2, #0
 80052a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80052a8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80052ac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80052b0:	4642      	mov	r2, r8
 80052b2:	464b      	mov	r3, r9
 80052b4:	1891      	adds	r1, r2, r2
 80052b6:	64b9      	str	r1, [r7, #72]	; 0x48
 80052b8:	415b      	adcs	r3, r3
 80052ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80052c0:	4641      	mov	r1, r8
 80052c2:	eb12 0a01 	adds.w	sl, r2, r1
 80052c6:	4649      	mov	r1, r9
 80052c8:	eb43 0b01 	adc.w	fp, r3, r1
 80052cc:	f04f 0200 	mov.w	r2, #0
 80052d0:	f04f 0300 	mov.w	r3, #0
 80052d4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80052d8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80052dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80052e0:	4692      	mov	sl, r2
 80052e2:	469b      	mov	fp, r3
 80052e4:	4643      	mov	r3, r8
 80052e6:	eb1a 0303 	adds.w	r3, sl, r3
 80052ea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80052ee:	464b      	mov	r3, r9
 80052f0:	eb4b 0303 	adc.w	r3, fp, r3
 80052f4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80052f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	2200      	movs	r2, #0
 8005300:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005304:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005308:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800530c:	460b      	mov	r3, r1
 800530e:	18db      	adds	r3, r3, r3
 8005310:	643b      	str	r3, [r7, #64]	; 0x40
 8005312:	4613      	mov	r3, r2
 8005314:	eb42 0303 	adc.w	r3, r2, r3
 8005318:	647b      	str	r3, [r7, #68]	; 0x44
 800531a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800531e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005322:	f7fb fbf7 	bl	8000b14 <__aeabi_uldivmod>
 8005326:	4602      	mov	r2, r0
 8005328:	460b      	mov	r3, r1
 800532a:	4611      	mov	r1, r2
 800532c:	4b3b      	ldr	r3, [pc, #236]	; (800541c <UART_SetConfig+0x2d4>)
 800532e:	fba3 2301 	umull	r2, r3, r3, r1
 8005332:	095b      	lsrs	r3, r3, #5
 8005334:	2264      	movs	r2, #100	; 0x64
 8005336:	fb02 f303 	mul.w	r3, r2, r3
 800533a:	1acb      	subs	r3, r1, r3
 800533c:	00db      	lsls	r3, r3, #3
 800533e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005342:	4b36      	ldr	r3, [pc, #216]	; (800541c <UART_SetConfig+0x2d4>)
 8005344:	fba3 2302 	umull	r2, r3, r3, r2
 8005348:	095b      	lsrs	r3, r3, #5
 800534a:	005b      	lsls	r3, r3, #1
 800534c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005350:	441c      	add	r4, r3
 8005352:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005356:	2200      	movs	r2, #0
 8005358:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800535c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005360:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005364:	4642      	mov	r2, r8
 8005366:	464b      	mov	r3, r9
 8005368:	1891      	adds	r1, r2, r2
 800536a:	63b9      	str	r1, [r7, #56]	; 0x38
 800536c:	415b      	adcs	r3, r3
 800536e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005370:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005374:	4641      	mov	r1, r8
 8005376:	1851      	adds	r1, r2, r1
 8005378:	6339      	str	r1, [r7, #48]	; 0x30
 800537a:	4649      	mov	r1, r9
 800537c:	414b      	adcs	r3, r1
 800537e:	637b      	str	r3, [r7, #52]	; 0x34
 8005380:	f04f 0200 	mov.w	r2, #0
 8005384:	f04f 0300 	mov.w	r3, #0
 8005388:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800538c:	4659      	mov	r1, fp
 800538e:	00cb      	lsls	r3, r1, #3
 8005390:	4651      	mov	r1, sl
 8005392:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005396:	4651      	mov	r1, sl
 8005398:	00ca      	lsls	r2, r1, #3
 800539a:	4610      	mov	r0, r2
 800539c:	4619      	mov	r1, r3
 800539e:	4603      	mov	r3, r0
 80053a0:	4642      	mov	r2, r8
 80053a2:	189b      	adds	r3, r3, r2
 80053a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80053a8:	464b      	mov	r3, r9
 80053aa:	460a      	mov	r2, r1
 80053ac:	eb42 0303 	adc.w	r3, r2, r3
 80053b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80053b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	2200      	movs	r2, #0
 80053bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80053c0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80053c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80053c8:	460b      	mov	r3, r1
 80053ca:	18db      	adds	r3, r3, r3
 80053cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80053ce:	4613      	mov	r3, r2
 80053d0:	eb42 0303 	adc.w	r3, r2, r3
 80053d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80053da:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80053de:	f7fb fb99 	bl	8000b14 <__aeabi_uldivmod>
 80053e2:	4602      	mov	r2, r0
 80053e4:	460b      	mov	r3, r1
 80053e6:	4b0d      	ldr	r3, [pc, #52]	; (800541c <UART_SetConfig+0x2d4>)
 80053e8:	fba3 1302 	umull	r1, r3, r3, r2
 80053ec:	095b      	lsrs	r3, r3, #5
 80053ee:	2164      	movs	r1, #100	; 0x64
 80053f0:	fb01 f303 	mul.w	r3, r1, r3
 80053f4:	1ad3      	subs	r3, r2, r3
 80053f6:	00db      	lsls	r3, r3, #3
 80053f8:	3332      	adds	r3, #50	; 0x32
 80053fa:	4a08      	ldr	r2, [pc, #32]	; (800541c <UART_SetConfig+0x2d4>)
 80053fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005400:	095b      	lsrs	r3, r3, #5
 8005402:	f003 0207 	and.w	r2, r3, #7
 8005406:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4422      	add	r2, r4
 800540e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005410:	e105      	b.n	800561e <UART_SetConfig+0x4d6>
 8005412:	bf00      	nop
 8005414:	40011000 	.word	0x40011000
 8005418:	40011400 	.word	0x40011400
 800541c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005420:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005424:	2200      	movs	r2, #0
 8005426:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800542a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800542e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005432:	4642      	mov	r2, r8
 8005434:	464b      	mov	r3, r9
 8005436:	1891      	adds	r1, r2, r2
 8005438:	6239      	str	r1, [r7, #32]
 800543a:	415b      	adcs	r3, r3
 800543c:	627b      	str	r3, [r7, #36]	; 0x24
 800543e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005442:	4641      	mov	r1, r8
 8005444:	1854      	adds	r4, r2, r1
 8005446:	4649      	mov	r1, r9
 8005448:	eb43 0501 	adc.w	r5, r3, r1
 800544c:	f04f 0200 	mov.w	r2, #0
 8005450:	f04f 0300 	mov.w	r3, #0
 8005454:	00eb      	lsls	r3, r5, #3
 8005456:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800545a:	00e2      	lsls	r2, r4, #3
 800545c:	4614      	mov	r4, r2
 800545e:	461d      	mov	r5, r3
 8005460:	4643      	mov	r3, r8
 8005462:	18e3      	adds	r3, r4, r3
 8005464:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005468:	464b      	mov	r3, r9
 800546a:	eb45 0303 	adc.w	r3, r5, r3
 800546e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005472:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	2200      	movs	r2, #0
 800547a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800547e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005482:	f04f 0200 	mov.w	r2, #0
 8005486:	f04f 0300 	mov.w	r3, #0
 800548a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800548e:	4629      	mov	r1, r5
 8005490:	008b      	lsls	r3, r1, #2
 8005492:	4621      	mov	r1, r4
 8005494:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005498:	4621      	mov	r1, r4
 800549a:	008a      	lsls	r2, r1, #2
 800549c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80054a0:	f7fb fb38 	bl	8000b14 <__aeabi_uldivmod>
 80054a4:	4602      	mov	r2, r0
 80054a6:	460b      	mov	r3, r1
 80054a8:	4b60      	ldr	r3, [pc, #384]	; (800562c <UART_SetConfig+0x4e4>)
 80054aa:	fba3 2302 	umull	r2, r3, r3, r2
 80054ae:	095b      	lsrs	r3, r3, #5
 80054b0:	011c      	lsls	r4, r3, #4
 80054b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054b6:	2200      	movs	r2, #0
 80054b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80054bc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80054c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80054c4:	4642      	mov	r2, r8
 80054c6:	464b      	mov	r3, r9
 80054c8:	1891      	adds	r1, r2, r2
 80054ca:	61b9      	str	r1, [r7, #24]
 80054cc:	415b      	adcs	r3, r3
 80054ce:	61fb      	str	r3, [r7, #28]
 80054d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80054d4:	4641      	mov	r1, r8
 80054d6:	1851      	adds	r1, r2, r1
 80054d8:	6139      	str	r1, [r7, #16]
 80054da:	4649      	mov	r1, r9
 80054dc:	414b      	adcs	r3, r1
 80054de:	617b      	str	r3, [r7, #20]
 80054e0:	f04f 0200 	mov.w	r2, #0
 80054e4:	f04f 0300 	mov.w	r3, #0
 80054e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80054ec:	4659      	mov	r1, fp
 80054ee:	00cb      	lsls	r3, r1, #3
 80054f0:	4651      	mov	r1, sl
 80054f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80054f6:	4651      	mov	r1, sl
 80054f8:	00ca      	lsls	r2, r1, #3
 80054fa:	4610      	mov	r0, r2
 80054fc:	4619      	mov	r1, r3
 80054fe:	4603      	mov	r3, r0
 8005500:	4642      	mov	r2, r8
 8005502:	189b      	adds	r3, r3, r2
 8005504:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005508:	464b      	mov	r3, r9
 800550a:	460a      	mov	r2, r1
 800550c:	eb42 0303 	adc.w	r3, r2, r3
 8005510:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	2200      	movs	r2, #0
 800551c:	67bb      	str	r3, [r7, #120]	; 0x78
 800551e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005520:	f04f 0200 	mov.w	r2, #0
 8005524:	f04f 0300 	mov.w	r3, #0
 8005528:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800552c:	4649      	mov	r1, r9
 800552e:	008b      	lsls	r3, r1, #2
 8005530:	4641      	mov	r1, r8
 8005532:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005536:	4641      	mov	r1, r8
 8005538:	008a      	lsls	r2, r1, #2
 800553a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800553e:	f7fb fae9 	bl	8000b14 <__aeabi_uldivmod>
 8005542:	4602      	mov	r2, r0
 8005544:	460b      	mov	r3, r1
 8005546:	4b39      	ldr	r3, [pc, #228]	; (800562c <UART_SetConfig+0x4e4>)
 8005548:	fba3 1302 	umull	r1, r3, r3, r2
 800554c:	095b      	lsrs	r3, r3, #5
 800554e:	2164      	movs	r1, #100	; 0x64
 8005550:	fb01 f303 	mul.w	r3, r1, r3
 8005554:	1ad3      	subs	r3, r2, r3
 8005556:	011b      	lsls	r3, r3, #4
 8005558:	3332      	adds	r3, #50	; 0x32
 800555a:	4a34      	ldr	r2, [pc, #208]	; (800562c <UART_SetConfig+0x4e4>)
 800555c:	fba2 2303 	umull	r2, r3, r2, r3
 8005560:	095b      	lsrs	r3, r3, #5
 8005562:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005566:	441c      	add	r4, r3
 8005568:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800556c:	2200      	movs	r2, #0
 800556e:	673b      	str	r3, [r7, #112]	; 0x70
 8005570:	677a      	str	r2, [r7, #116]	; 0x74
 8005572:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005576:	4642      	mov	r2, r8
 8005578:	464b      	mov	r3, r9
 800557a:	1891      	adds	r1, r2, r2
 800557c:	60b9      	str	r1, [r7, #8]
 800557e:	415b      	adcs	r3, r3
 8005580:	60fb      	str	r3, [r7, #12]
 8005582:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005586:	4641      	mov	r1, r8
 8005588:	1851      	adds	r1, r2, r1
 800558a:	6039      	str	r1, [r7, #0]
 800558c:	4649      	mov	r1, r9
 800558e:	414b      	adcs	r3, r1
 8005590:	607b      	str	r3, [r7, #4]
 8005592:	f04f 0200 	mov.w	r2, #0
 8005596:	f04f 0300 	mov.w	r3, #0
 800559a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800559e:	4659      	mov	r1, fp
 80055a0:	00cb      	lsls	r3, r1, #3
 80055a2:	4651      	mov	r1, sl
 80055a4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055a8:	4651      	mov	r1, sl
 80055aa:	00ca      	lsls	r2, r1, #3
 80055ac:	4610      	mov	r0, r2
 80055ae:	4619      	mov	r1, r3
 80055b0:	4603      	mov	r3, r0
 80055b2:	4642      	mov	r2, r8
 80055b4:	189b      	adds	r3, r3, r2
 80055b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80055b8:	464b      	mov	r3, r9
 80055ba:	460a      	mov	r2, r1
 80055bc:	eb42 0303 	adc.w	r3, r2, r3
 80055c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80055c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	2200      	movs	r2, #0
 80055ca:	663b      	str	r3, [r7, #96]	; 0x60
 80055cc:	667a      	str	r2, [r7, #100]	; 0x64
 80055ce:	f04f 0200 	mov.w	r2, #0
 80055d2:	f04f 0300 	mov.w	r3, #0
 80055d6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80055da:	4649      	mov	r1, r9
 80055dc:	008b      	lsls	r3, r1, #2
 80055de:	4641      	mov	r1, r8
 80055e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80055e4:	4641      	mov	r1, r8
 80055e6:	008a      	lsls	r2, r1, #2
 80055e8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80055ec:	f7fb fa92 	bl	8000b14 <__aeabi_uldivmod>
 80055f0:	4602      	mov	r2, r0
 80055f2:	460b      	mov	r3, r1
 80055f4:	4b0d      	ldr	r3, [pc, #52]	; (800562c <UART_SetConfig+0x4e4>)
 80055f6:	fba3 1302 	umull	r1, r3, r3, r2
 80055fa:	095b      	lsrs	r3, r3, #5
 80055fc:	2164      	movs	r1, #100	; 0x64
 80055fe:	fb01 f303 	mul.w	r3, r1, r3
 8005602:	1ad3      	subs	r3, r2, r3
 8005604:	011b      	lsls	r3, r3, #4
 8005606:	3332      	adds	r3, #50	; 0x32
 8005608:	4a08      	ldr	r2, [pc, #32]	; (800562c <UART_SetConfig+0x4e4>)
 800560a:	fba2 2303 	umull	r2, r3, r2, r3
 800560e:	095b      	lsrs	r3, r3, #5
 8005610:	f003 020f 	and.w	r2, r3, #15
 8005614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4422      	add	r2, r4
 800561c:	609a      	str	r2, [r3, #8]
}
 800561e:	bf00      	nop
 8005620:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005624:	46bd      	mov	sp, r7
 8005626:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800562a:	bf00      	nop
 800562c:	51eb851f 	.word	0x51eb851f

08005630 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005630:	b084      	sub	sp, #16
 8005632:	b580      	push	{r7, lr}
 8005634:	b084      	sub	sp, #16
 8005636:	af00      	add	r7, sp, #0
 8005638:	6078      	str	r0, [r7, #4]
 800563a:	f107 001c 	add.w	r0, r7, #28
 800563e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005644:	2b01      	cmp	r3, #1
 8005646:	d122      	bne.n	800568e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800564c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	68db      	ldr	r3, [r3, #12]
 8005658:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800565c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005660:	687a      	ldr	r2, [r7, #4]
 8005662:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005670:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005672:	2b01      	cmp	r3, #1
 8005674:	d105      	bne.n	8005682 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	68db      	ldr	r3, [r3, #12]
 800567a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f000 f9c0 	bl	8005a08 <USB_CoreReset>
 8005688:	4603      	mov	r3, r0
 800568a:	73fb      	strb	r3, [r7, #15]
 800568c:	e01a      	b.n	80056c4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	68db      	ldr	r3, [r3, #12]
 8005692:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f000 f9b4 	bl	8005a08 <USB_CoreReset>
 80056a0:	4603      	mov	r3, r0
 80056a2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80056a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d106      	bne.n	80056b8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	639a      	str	r2, [r3, #56]	; 0x38
 80056b6:	e005      	b.n	80056c4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056bc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80056c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d10b      	bne.n	80056e2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	f043 0206 	orr.w	r2, r3, #6
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	f043 0220 	orr.w	r2, r3, #32
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80056e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	3710      	adds	r7, #16
 80056e8:	46bd      	mov	sp, r7
 80056ea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80056ee:	b004      	add	sp, #16
 80056f0:	4770      	bx	lr

080056f2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80056f2:	b480      	push	{r7}
 80056f4:	b083      	sub	sp, #12
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	f043 0201 	orr.w	r2, r3, #1
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005706:	2300      	movs	r3, #0
}
 8005708:	4618      	mov	r0, r3
 800570a:	370c      	adds	r7, #12
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr

08005714 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005714:	b480      	push	{r7}
 8005716:	b083      	sub	sp, #12
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	f023 0201 	bic.w	r2, r3, #1
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005728:	2300      	movs	r3, #0
}
 800572a:	4618      	mov	r0, r3
 800572c:	370c      	adds	r7, #12
 800572e:	46bd      	mov	sp, r7
 8005730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005734:	4770      	bx	lr

08005736 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005736:	b580      	push	{r7, lr}
 8005738:	b084      	sub	sp, #16
 800573a:	af00      	add	r7, sp, #0
 800573c:	6078      	str	r0, [r7, #4]
 800573e:	460b      	mov	r3, r1
 8005740:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005742:	2300      	movs	r3, #0
 8005744:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005752:	78fb      	ldrb	r3, [r7, #3]
 8005754:	2b01      	cmp	r3, #1
 8005756:	d115      	bne.n	8005784 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005764:	2001      	movs	r0, #1
 8005766:	f7fc f867 	bl	8001838 <HAL_Delay>
      ms++;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	3301      	adds	r3, #1
 800576e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f000 f93a 	bl	80059ea <USB_GetMode>
 8005776:	4603      	mov	r3, r0
 8005778:	2b01      	cmp	r3, #1
 800577a:	d01e      	beq.n	80057ba <USB_SetCurrentMode+0x84>
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2b31      	cmp	r3, #49	; 0x31
 8005780:	d9f0      	bls.n	8005764 <USB_SetCurrentMode+0x2e>
 8005782:	e01a      	b.n	80057ba <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005784:	78fb      	ldrb	r3, [r7, #3]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d115      	bne.n	80057b6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	68db      	ldr	r3, [r3, #12]
 800578e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005796:	2001      	movs	r0, #1
 8005798:	f7fc f84e 	bl	8001838 <HAL_Delay>
      ms++;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	3301      	adds	r3, #1
 80057a0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f000 f921 	bl	80059ea <USB_GetMode>
 80057a8:	4603      	mov	r3, r0
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d005      	beq.n	80057ba <USB_SetCurrentMode+0x84>
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2b31      	cmp	r3, #49	; 0x31
 80057b2:	d9f0      	bls.n	8005796 <USB_SetCurrentMode+0x60>
 80057b4:	e001      	b.n	80057ba <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	e005      	b.n	80057c6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2b32      	cmp	r3, #50	; 0x32
 80057be:	d101      	bne.n	80057c4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80057c0:	2301      	movs	r3, #1
 80057c2:	e000      	b.n	80057c6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80057c4:	2300      	movs	r3, #0
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3710      	adds	r7, #16
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}
	...

080057d0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b085      	sub	sp, #20
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
 80057d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80057da:	2300      	movs	r3, #0
 80057dc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	3301      	adds	r3, #1
 80057e2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	4a13      	ldr	r2, [pc, #76]	; (8005834 <USB_FlushTxFifo+0x64>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d901      	bls.n	80057f0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80057ec:	2303      	movs	r3, #3
 80057ee:	e01b      	b.n	8005828 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	691b      	ldr	r3, [r3, #16]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	daf2      	bge.n	80057de <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80057f8:	2300      	movs	r3, #0
 80057fa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	019b      	lsls	r3, r3, #6
 8005800:	f043 0220 	orr.w	r2, r3, #32
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	3301      	adds	r3, #1
 800580c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	4a08      	ldr	r2, [pc, #32]	; (8005834 <USB_FlushTxFifo+0x64>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d901      	bls.n	800581a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005816:	2303      	movs	r3, #3
 8005818:	e006      	b.n	8005828 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	691b      	ldr	r3, [r3, #16]
 800581e:	f003 0320 	and.w	r3, r3, #32
 8005822:	2b20      	cmp	r3, #32
 8005824:	d0f0      	beq.n	8005808 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005826:	2300      	movs	r3, #0
}
 8005828:	4618      	mov	r0, r3
 800582a:	3714      	adds	r7, #20
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr
 8005834:	00030d40 	.word	0x00030d40

08005838 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005838:	b480      	push	{r7}
 800583a:	b085      	sub	sp, #20
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005840:	2300      	movs	r3, #0
 8005842:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	3301      	adds	r3, #1
 8005848:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	4a11      	ldr	r2, [pc, #68]	; (8005894 <USB_FlushRxFifo+0x5c>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d901      	bls.n	8005856 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005852:	2303      	movs	r3, #3
 8005854:	e018      	b.n	8005888 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	691b      	ldr	r3, [r3, #16]
 800585a:	2b00      	cmp	r3, #0
 800585c:	daf2      	bge.n	8005844 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800585e:	2300      	movs	r3, #0
 8005860:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2210      	movs	r2, #16
 8005866:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	3301      	adds	r3, #1
 800586c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	4a08      	ldr	r2, [pc, #32]	; (8005894 <USB_FlushRxFifo+0x5c>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d901      	bls.n	800587a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005876:	2303      	movs	r3, #3
 8005878:	e006      	b.n	8005888 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	691b      	ldr	r3, [r3, #16]
 800587e:	f003 0310 	and.w	r3, r3, #16
 8005882:	2b10      	cmp	r3, #16
 8005884:	d0f0      	beq.n	8005868 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005886:	2300      	movs	r3, #0
}
 8005888:	4618      	mov	r0, r3
 800588a:	3714      	adds	r7, #20
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr
 8005894:	00030d40 	.word	0x00030d40

08005898 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005898:	b480      	push	{r7}
 800589a:	b089      	sub	sp, #36	; 0x24
 800589c:	af00      	add	r7, sp, #0
 800589e:	60f8      	str	r0, [r7, #12]
 80058a0:	60b9      	str	r1, [r7, #8]
 80058a2:	4611      	mov	r1, r2
 80058a4:	461a      	mov	r2, r3
 80058a6:	460b      	mov	r3, r1
 80058a8:	71fb      	strb	r3, [r7, #7]
 80058aa:	4613      	mov	r3, r2
 80058ac:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80058b6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d123      	bne.n	8005906 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80058be:	88bb      	ldrh	r3, [r7, #4]
 80058c0:	3303      	adds	r3, #3
 80058c2:	089b      	lsrs	r3, r3, #2
 80058c4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80058c6:	2300      	movs	r3, #0
 80058c8:	61bb      	str	r3, [r7, #24]
 80058ca:	e018      	b.n	80058fe <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80058cc:	79fb      	ldrb	r3, [r7, #7]
 80058ce:	031a      	lsls	r2, r3, #12
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	4413      	add	r3, r2
 80058d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058d8:	461a      	mov	r2, r3
 80058da:	69fb      	ldr	r3, [r7, #28]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	6013      	str	r3, [r2, #0]
      pSrc++;
 80058e0:	69fb      	ldr	r3, [r7, #28]
 80058e2:	3301      	adds	r3, #1
 80058e4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80058e6:	69fb      	ldr	r3, [r7, #28]
 80058e8:	3301      	adds	r3, #1
 80058ea:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80058ec:	69fb      	ldr	r3, [r7, #28]
 80058ee:	3301      	adds	r3, #1
 80058f0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80058f2:	69fb      	ldr	r3, [r7, #28]
 80058f4:	3301      	adds	r3, #1
 80058f6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80058f8:	69bb      	ldr	r3, [r7, #24]
 80058fa:	3301      	adds	r3, #1
 80058fc:	61bb      	str	r3, [r7, #24]
 80058fe:	69ba      	ldr	r2, [r7, #24]
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	429a      	cmp	r2, r3
 8005904:	d3e2      	bcc.n	80058cc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005906:	2300      	movs	r3, #0
}
 8005908:	4618      	mov	r0, r3
 800590a:	3724      	adds	r7, #36	; 0x24
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr

08005914 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005914:	b480      	push	{r7}
 8005916:	b08b      	sub	sp, #44	; 0x2c
 8005918:	af00      	add	r7, sp, #0
 800591a:	60f8      	str	r0, [r7, #12]
 800591c:	60b9      	str	r1, [r7, #8]
 800591e:	4613      	mov	r3, r2
 8005920:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800592a:	88fb      	ldrh	r3, [r7, #6]
 800592c:	089b      	lsrs	r3, r3, #2
 800592e:	b29b      	uxth	r3, r3
 8005930:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005932:	88fb      	ldrh	r3, [r7, #6]
 8005934:	f003 0303 	and.w	r3, r3, #3
 8005938:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800593a:	2300      	movs	r3, #0
 800593c:	623b      	str	r3, [r7, #32]
 800593e:	e014      	b.n	800596a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005940:	69bb      	ldr	r3, [r7, #24]
 8005942:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800594a:	601a      	str	r2, [r3, #0]
    pDest++;
 800594c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800594e:	3301      	adds	r3, #1
 8005950:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005954:	3301      	adds	r3, #1
 8005956:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800595a:	3301      	adds	r3, #1
 800595c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800595e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005960:	3301      	adds	r3, #1
 8005962:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005964:	6a3b      	ldr	r3, [r7, #32]
 8005966:	3301      	adds	r3, #1
 8005968:	623b      	str	r3, [r7, #32]
 800596a:	6a3a      	ldr	r2, [r7, #32]
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	429a      	cmp	r2, r3
 8005970:	d3e6      	bcc.n	8005940 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005972:	8bfb      	ldrh	r3, [r7, #30]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d01e      	beq.n	80059b6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005978:	2300      	movs	r3, #0
 800597a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800597c:	69bb      	ldr	r3, [r7, #24]
 800597e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005982:	461a      	mov	r2, r3
 8005984:	f107 0310 	add.w	r3, r7, #16
 8005988:	6812      	ldr	r2, [r2, #0]
 800598a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800598c:	693a      	ldr	r2, [r7, #16]
 800598e:	6a3b      	ldr	r3, [r7, #32]
 8005990:	b2db      	uxtb	r3, r3
 8005992:	00db      	lsls	r3, r3, #3
 8005994:	fa22 f303 	lsr.w	r3, r2, r3
 8005998:	b2da      	uxtb	r2, r3
 800599a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800599c:	701a      	strb	r2, [r3, #0]
      i++;
 800599e:	6a3b      	ldr	r3, [r7, #32]
 80059a0:	3301      	adds	r3, #1
 80059a2:	623b      	str	r3, [r7, #32]
      pDest++;
 80059a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a6:	3301      	adds	r3, #1
 80059a8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80059aa:	8bfb      	ldrh	r3, [r7, #30]
 80059ac:	3b01      	subs	r3, #1
 80059ae:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80059b0:	8bfb      	ldrh	r3, [r7, #30]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d1ea      	bne.n	800598c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80059b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	372c      	adds	r7, #44	; 0x2c
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr

080059c4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b085      	sub	sp, #20
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	695b      	ldr	r3, [r3, #20]
 80059d0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	699b      	ldr	r3, [r3, #24]
 80059d6:	68fa      	ldr	r2, [r7, #12]
 80059d8:	4013      	ands	r3, r2
 80059da:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80059dc:	68fb      	ldr	r3, [r7, #12]
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3714      	adds	r7, #20
 80059e2:	46bd      	mov	sp, r7
 80059e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e8:	4770      	bx	lr

080059ea <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80059ea:	b480      	push	{r7}
 80059ec:	b083      	sub	sp, #12
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	695b      	ldr	r3, [r3, #20]
 80059f6:	f003 0301 	and.w	r3, r3, #1
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	370c      	adds	r7, #12
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr
	...

08005a08 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b085      	sub	sp, #20
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005a10:	2300      	movs	r3, #0
 8005a12:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	3301      	adds	r3, #1
 8005a18:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	4a13      	ldr	r2, [pc, #76]	; (8005a6c <USB_CoreReset+0x64>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d901      	bls.n	8005a26 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005a22:	2303      	movs	r3, #3
 8005a24:	e01b      	b.n	8005a5e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	691b      	ldr	r3, [r3, #16]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	daf2      	bge.n	8005a14 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	691b      	ldr	r3, [r3, #16]
 8005a36:	f043 0201 	orr.w	r2, r3, #1
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	3301      	adds	r3, #1
 8005a42:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	4a09      	ldr	r2, [pc, #36]	; (8005a6c <USB_CoreReset+0x64>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d901      	bls.n	8005a50 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005a4c:	2303      	movs	r3, #3
 8005a4e:	e006      	b.n	8005a5e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	691b      	ldr	r3, [r3, #16]
 8005a54:	f003 0301 	and.w	r3, r3, #1
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d0f0      	beq.n	8005a3e <USB_CoreReset+0x36>

  return HAL_OK;
 8005a5c:	2300      	movs	r3, #0
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3714      	adds	r7, #20
 8005a62:	46bd      	mov	sp, r7
 8005a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a68:	4770      	bx	lr
 8005a6a:	bf00      	nop
 8005a6c:	00030d40 	.word	0x00030d40

08005a70 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005a70:	b084      	sub	sp, #16
 8005a72:	b580      	push	{r7, lr}
 8005a74:	b086      	sub	sp, #24
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	6078      	str	r0, [r7, #4]
 8005a7a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005a7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005a82:	2300      	movs	r3, #0
 8005a84:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005a90:	461a      	mov	r2, r3
 8005a92:	2300      	movs	r3, #0
 8005a94:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a9a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aa6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ab2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d018      	beq.n	8005af8 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d10a      	bne.n	8005ae2 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	68fa      	ldr	r2, [r7, #12]
 8005ad6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005ada:	f043 0304 	orr.w	r3, r3, #4
 8005ade:	6013      	str	r3, [r2, #0]
 8005ae0:	e014      	b.n	8005b0c <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	68fa      	ldr	r2, [r7, #12]
 8005aec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005af0:	f023 0304 	bic.w	r3, r3, #4
 8005af4:	6013      	str	r3, [r2, #0]
 8005af6:	e009      	b.n	8005b0c <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	68fa      	ldr	r2, [r7, #12]
 8005b02:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005b06:	f023 0304 	bic.w	r3, r3, #4
 8005b0a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005b0c:	2110      	movs	r1, #16
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f7ff fe5e 	bl	80057d0 <USB_FlushTxFifo>
 8005b14:	4603      	mov	r3, r0
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d001      	beq.n	8005b1e <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f7ff fe8a 	bl	8005838 <USB_FlushRxFifo>
 8005b24:	4603      	mov	r3, r0
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d001      	beq.n	8005b2e <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005b2e:	2300      	movs	r3, #0
 8005b30:	613b      	str	r3, [r7, #16]
 8005b32:	e015      	b.n	8005b60 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	015a      	lsls	r2, r3, #5
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	4413      	add	r3, r2
 8005b3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b40:	461a      	mov	r2, r3
 8005b42:	f04f 33ff 	mov.w	r3, #4294967295
 8005b46:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	015a      	lsls	r2, r3, #5
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	4413      	add	r3, r2
 8005b50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b54:	461a      	mov	r2, r3
 8005b56:	2300      	movs	r3, #0
 8005b58:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	3301      	adds	r3, #1
 8005b5e:	613b      	str	r3, [r7, #16]
 8005b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b62:	693a      	ldr	r2, [r7, #16]
 8005b64:	429a      	cmp	r2, r3
 8005b66:	d3e5      	bcc.n	8005b34 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f04f 32ff 	mov.w	r2, #4294967295
 8005b74:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d00b      	beq.n	8005b9a <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b88:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	4a13      	ldr	r2, [pc, #76]	; (8005bdc <USB_HostInit+0x16c>)
 8005b8e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	4a13      	ldr	r2, [pc, #76]	; (8005be0 <USB_HostInit+0x170>)
 8005b94:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005b98:	e009      	b.n	8005bae <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2280      	movs	r2, #128	; 0x80
 8005b9e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	4a10      	ldr	r2, [pc, #64]	; (8005be4 <USB_HostInit+0x174>)
 8005ba4:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	4a0f      	ldr	r2, [pc, #60]	; (8005be8 <USB_HostInit+0x178>)
 8005baa:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d105      	bne.n	8005bc0 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	699b      	ldr	r3, [r3, #24]
 8005bb8:	f043 0210 	orr.w	r2, r3, #16
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	699a      	ldr	r2, [r3, #24]
 8005bc4:	4b09      	ldr	r3, [pc, #36]	; (8005bec <USB_HostInit+0x17c>)
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	687a      	ldr	r2, [r7, #4]
 8005bca:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005bcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3718      	adds	r7, #24
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005bd8:	b004      	add	sp, #16
 8005bda:	4770      	bx	lr
 8005bdc:	01000200 	.word	0x01000200
 8005be0:	00e00300 	.word	0x00e00300
 8005be4:	00600080 	.word	0x00600080
 8005be8:	004000e0 	.word	0x004000e0
 8005bec:	a3200008 	.word	0xa3200008

08005bf0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b085      	sub	sp, #20
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	460b      	mov	r3, r1
 8005bfa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	68fa      	ldr	r2, [r7, #12]
 8005c0a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005c0e:	f023 0303 	bic.w	r3, r3, #3
 8005c12:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	78fb      	ldrb	r3, [r7, #3]
 8005c1e:	f003 0303 	and.w	r3, r3, #3
 8005c22:	68f9      	ldr	r1, [r7, #12]
 8005c24:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005c2c:	78fb      	ldrb	r3, [r7, #3]
 8005c2e:	2b01      	cmp	r3, #1
 8005c30:	d107      	bne.n	8005c42 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c38:	461a      	mov	r2, r3
 8005c3a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005c3e:	6053      	str	r3, [r2, #4]
 8005c40:	e009      	b.n	8005c56 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005c42:	78fb      	ldrb	r3, [r7, #3]
 8005c44:	2b02      	cmp	r3, #2
 8005c46:	d106      	bne.n	8005c56 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c4e:	461a      	mov	r2, r3
 8005c50:	f241 7370 	movw	r3, #6000	; 0x1770
 8005c54:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005c56:	2300      	movs	r3, #0
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	3714      	adds	r7, #20
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c62:	4770      	bx	lr

08005c64 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b084      	sub	sp, #16
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005c70:	2300      	movs	r3, #0
 8005c72:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005c84:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	68fa      	ldr	r2, [r7, #12]
 8005c8a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005c8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c92:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005c94:	2064      	movs	r0, #100	; 0x64
 8005c96:	f7fb fdcf 	bl	8001838 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	68fa      	ldr	r2, [r7, #12]
 8005c9e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005ca2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ca6:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005ca8:	200a      	movs	r0, #10
 8005caa:	f7fb fdc5 	bl	8001838 <HAL_Delay>

  return HAL_OK;
 8005cae:	2300      	movs	r3, #0
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	3710      	adds	r7, #16
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}

08005cb8 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b085      	sub	sp, #20
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	460b      	mov	r3, r1
 8005cc2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005cdc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d109      	bne.n	8005cfc <USB_DriveVbus+0x44>
 8005ce8:	78fb      	ldrb	r3, [r7, #3]
 8005cea:	2b01      	cmp	r3, #1
 8005cec:	d106      	bne.n	8005cfc <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	68fa      	ldr	r2, [r7, #12]
 8005cf2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005cf6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005cfa:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d06:	d109      	bne.n	8005d1c <USB_DriveVbus+0x64>
 8005d08:	78fb      	ldrb	r3, [r7, #3]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d106      	bne.n	8005d1c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	68fa      	ldr	r2, [r7, #12]
 8005d12:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005d16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d1a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005d1c:	2300      	movs	r3, #0
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3714      	adds	r7, #20
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr

08005d2a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005d2a:	b480      	push	{r7}
 8005d2c:	b085      	sub	sp, #20
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005d36:	2300      	movs	r3, #0
 8005d38:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	0c5b      	lsrs	r3, r3, #17
 8005d48:	f003 0303 	and.w	r3, r3, #3
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3714      	adds	r7, #20
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr

08005d58 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b085      	sub	sp, #20
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	b29b      	uxth	r3, r3
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3714      	adds	r7, #20
 8005d72:	46bd      	mov	sp, r7
 8005d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d78:	4770      	bx	lr
	...

08005d7c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b088      	sub	sp, #32
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
 8005d84:	4608      	mov	r0, r1
 8005d86:	4611      	mov	r1, r2
 8005d88:	461a      	mov	r2, r3
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	70fb      	strb	r3, [r7, #3]
 8005d8e:	460b      	mov	r3, r1
 8005d90:	70bb      	strb	r3, [r7, #2]
 8005d92:	4613      	mov	r3, r2
 8005d94:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005d96:	2300      	movs	r3, #0
 8005d98:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005d9e:	78fb      	ldrb	r3, [r7, #3]
 8005da0:	015a      	lsls	r2, r3, #5
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	4413      	add	r3, r2
 8005da6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005daa:	461a      	mov	r2, r3
 8005dac:	f04f 33ff 	mov.w	r3, #4294967295
 8005db0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005db2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005db6:	2b03      	cmp	r3, #3
 8005db8:	d87e      	bhi.n	8005eb8 <USB_HC_Init+0x13c>
 8005dba:	a201      	add	r2, pc, #4	; (adr r2, 8005dc0 <USB_HC_Init+0x44>)
 8005dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dc0:	08005dd1 	.word	0x08005dd1
 8005dc4:	08005e7b 	.word	0x08005e7b
 8005dc8:	08005dd1 	.word	0x08005dd1
 8005dcc:	08005e3d 	.word	0x08005e3d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005dd0:	78fb      	ldrb	r3, [r7, #3]
 8005dd2:	015a      	lsls	r2, r3, #5
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	4413      	add	r3, r2
 8005dd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ddc:	461a      	mov	r2, r3
 8005dde:	f240 439d 	movw	r3, #1181	; 0x49d
 8005de2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005de4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	da10      	bge.n	8005e0e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005dec:	78fb      	ldrb	r3, [r7, #3]
 8005dee:	015a      	lsls	r2, r3, #5
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	4413      	add	r3, r2
 8005df4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005df8:	68db      	ldr	r3, [r3, #12]
 8005dfa:	78fa      	ldrb	r2, [r7, #3]
 8005dfc:	0151      	lsls	r1, r2, #5
 8005dfe:	693a      	ldr	r2, [r7, #16]
 8005e00:	440a      	add	r2, r1
 8005e02:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e0a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005e0c:	e057      	b.n	8005ebe <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d051      	beq.n	8005ebe <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005e1a:	78fb      	ldrb	r3, [r7, #3]
 8005e1c:	015a      	lsls	r2, r3, #5
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	4413      	add	r3, r2
 8005e22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e26:	68db      	ldr	r3, [r3, #12]
 8005e28:	78fa      	ldrb	r2, [r7, #3]
 8005e2a:	0151      	lsls	r1, r2, #5
 8005e2c:	693a      	ldr	r2, [r7, #16]
 8005e2e:	440a      	add	r2, r1
 8005e30:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e34:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005e38:	60d3      	str	r3, [r2, #12]
      break;
 8005e3a:	e040      	b.n	8005ebe <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005e3c:	78fb      	ldrb	r3, [r7, #3]
 8005e3e:	015a      	lsls	r2, r3, #5
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	4413      	add	r3, r2
 8005e44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e48:	461a      	mov	r2, r3
 8005e4a:	f240 639d 	movw	r3, #1693	; 0x69d
 8005e4e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005e50:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	da34      	bge.n	8005ec2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005e58:	78fb      	ldrb	r3, [r7, #3]
 8005e5a:	015a      	lsls	r2, r3, #5
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	4413      	add	r3, r2
 8005e60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e64:	68db      	ldr	r3, [r3, #12]
 8005e66:	78fa      	ldrb	r2, [r7, #3]
 8005e68:	0151      	lsls	r1, r2, #5
 8005e6a:	693a      	ldr	r2, [r7, #16]
 8005e6c:	440a      	add	r2, r1
 8005e6e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e76:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005e78:	e023      	b.n	8005ec2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005e7a:	78fb      	ldrb	r3, [r7, #3]
 8005e7c:	015a      	lsls	r2, r3, #5
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	4413      	add	r3, r2
 8005e82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e86:	461a      	mov	r2, r3
 8005e88:	f240 2325 	movw	r3, #549	; 0x225
 8005e8c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005e8e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	da17      	bge.n	8005ec6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005e96:	78fb      	ldrb	r3, [r7, #3]
 8005e98:	015a      	lsls	r2, r3, #5
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	4413      	add	r3, r2
 8005e9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ea2:	68db      	ldr	r3, [r3, #12]
 8005ea4:	78fa      	ldrb	r2, [r7, #3]
 8005ea6:	0151      	lsls	r1, r2, #5
 8005ea8:	693a      	ldr	r2, [r7, #16]
 8005eaa:	440a      	add	r2, r1
 8005eac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005eb0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005eb4:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005eb6:	e006      	b.n	8005ec6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	77fb      	strb	r3, [r7, #31]
      break;
 8005ebc:	e004      	b.n	8005ec8 <USB_HC_Init+0x14c>
      break;
 8005ebe:	bf00      	nop
 8005ec0:	e002      	b.n	8005ec8 <USB_HC_Init+0x14c>
      break;
 8005ec2:	bf00      	nop
 8005ec4:	e000      	b.n	8005ec8 <USB_HC_Init+0x14c>
      break;
 8005ec6:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005ec8:	78fb      	ldrb	r3, [r7, #3]
 8005eca:	015a      	lsls	r2, r3, #5
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	4413      	add	r3, r2
 8005ed0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ed4:	68db      	ldr	r3, [r3, #12]
 8005ed6:	78fa      	ldrb	r2, [r7, #3]
 8005ed8:	0151      	lsls	r1, r2, #5
 8005eda:	693a      	ldr	r2, [r7, #16]
 8005edc:	440a      	add	r2, r1
 8005ede:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ee2:	f043 0302 	orr.w	r3, r3, #2
 8005ee6:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005eee:	699a      	ldr	r2, [r3, #24]
 8005ef0:	78fb      	ldrb	r3, [r7, #3]
 8005ef2:	f003 030f 	and.w	r3, r3, #15
 8005ef6:	2101      	movs	r1, #1
 8005ef8:	fa01 f303 	lsl.w	r3, r1, r3
 8005efc:	6939      	ldr	r1, [r7, #16]
 8005efe:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005f02:	4313      	orrs	r3, r2
 8005f04:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	699b      	ldr	r3, [r3, #24]
 8005f0a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005f12:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	da03      	bge.n	8005f22 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005f1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f1e:	61bb      	str	r3, [r7, #24]
 8005f20:	e001      	b.n	8005f26 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8005f22:	2300      	movs	r3, #0
 8005f24:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f7ff feff 	bl	8005d2a <USB_GetHostSpeed>
 8005f2c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005f2e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005f32:	2b02      	cmp	r3, #2
 8005f34:	d106      	bne.n	8005f44 <USB_HC_Init+0x1c8>
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2b02      	cmp	r3, #2
 8005f3a:	d003      	beq.n	8005f44 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005f3c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005f40:	617b      	str	r3, [r7, #20]
 8005f42:	e001      	b.n	8005f48 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005f44:	2300      	movs	r3, #0
 8005f46:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005f48:	787b      	ldrb	r3, [r7, #1]
 8005f4a:	059b      	lsls	r3, r3, #22
 8005f4c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005f50:	78bb      	ldrb	r3, [r7, #2]
 8005f52:	02db      	lsls	r3, r3, #11
 8005f54:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005f58:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005f5a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005f5e:	049b      	lsls	r3, r3, #18
 8005f60:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005f64:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005f66:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005f68:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005f6c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005f6e:	69bb      	ldr	r3, [r7, #24]
 8005f70:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005f72:	78fb      	ldrb	r3, [r7, #3]
 8005f74:	0159      	lsls	r1, r3, #5
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	440b      	add	r3, r1
 8005f7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f7e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005f84:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8005f86:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005f8a:	2b03      	cmp	r3, #3
 8005f8c:	d003      	beq.n	8005f96 <USB_HC_Init+0x21a>
 8005f8e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d10f      	bne.n	8005fb6 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005f96:	78fb      	ldrb	r3, [r7, #3]
 8005f98:	015a      	lsls	r2, r3, #5
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	4413      	add	r3, r2
 8005f9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	78fa      	ldrb	r2, [r7, #3]
 8005fa6:	0151      	lsls	r1, r2, #5
 8005fa8:	693a      	ldr	r2, [r7, #16]
 8005faa:	440a      	add	r2, r1
 8005fac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fb0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005fb4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005fb6:	7ffb      	ldrb	r3, [r7, #31]
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3720      	adds	r7, #32
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}

08005fc0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b08c      	sub	sp, #48	; 0x30
 8005fc4:	af02      	add	r7, sp, #8
 8005fc6:	60f8      	str	r0, [r7, #12]
 8005fc8:	60b9      	str	r1, [r7, #8]
 8005fca:	4613      	mov	r3, r2
 8005fcc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	785b      	ldrb	r3, [r3, #1]
 8005fd6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005fd8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005fdc:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d02d      	beq.n	8006046 <USB_HC_StartXfer+0x86>
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	791b      	ldrb	r3, [r3, #4]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d129      	bne.n	8006046 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8005ff2:	79fb      	ldrb	r3, [r7, #7]
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	d117      	bne.n	8006028 <USB_HC_StartXfer+0x68>
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	79db      	ldrb	r3, [r3, #7]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d003      	beq.n	8006008 <USB_HC_StartXfer+0x48>
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	79db      	ldrb	r3, [r3, #7]
 8006004:	2b02      	cmp	r3, #2
 8006006:	d10f      	bne.n	8006028 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006008:	69fb      	ldr	r3, [r7, #28]
 800600a:	015a      	lsls	r2, r3, #5
 800600c:	6a3b      	ldr	r3, [r7, #32]
 800600e:	4413      	add	r3, r2
 8006010:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006014:	68db      	ldr	r3, [r3, #12]
 8006016:	69fa      	ldr	r2, [r7, #28]
 8006018:	0151      	lsls	r1, r2, #5
 800601a:	6a3a      	ldr	r2, [r7, #32]
 800601c:	440a      	add	r2, r1
 800601e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006022:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006026:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8006028:	79fb      	ldrb	r3, [r7, #7]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d10b      	bne.n	8006046 <USB_HC_StartXfer+0x86>
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	795b      	ldrb	r3, [r3, #5]
 8006032:	2b01      	cmp	r3, #1
 8006034:	d107      	bne.n	8006046 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	785b      	ldrb	r3, [r3, #1]
 800603a:	4619      	mov	r1, r3
 800603c:	68f8      	ldr	r0, [r7, #12]
 800603e:	f000 fa0f 	bl	8006460 <USB_DoPing>
      return HAL_OK;
 8006042:	2300      	movs	r3, #0
 8006044:	e0f8      	b.n	8006238 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	695b      	ldr	r3, [r3, #20]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d018      	beq.n	8006080 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	695b      	ldr	r3, [r3, #20]
 8006052:	68ba      	ldr	r2, [r7, #8]
 8006054:	8912      	ldrh	r2, [r2, #8]
 8006056:	4413      	add	r3, r2
 8006058:	3b01      	subs	r3, #1
 800605a:	68ba      	ldr	r2, [r7, #8]
 800605c:	8912      	ldrh	r2, [r2, #8]
 800605e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006062:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006064:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006066:	8b7b      	ldrh	r3, [r7, #26]
 8006068:	429a      	cmp	r2, r3
 800606a:	d90b      	bls.n	8006084 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800606c:	8b7b      	ldrh	r3, [r7, #26]
 800606e:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006070:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006072:	68ba      	ldr	r2, [r7, #8]
 8006074:	8912      	ldrh	r2, [r2, #8]
 8006076:	fb03 f202 	mul.w	r2, r3, r2
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	611a      	str	r2, [r3, #16]
 800607e:	e001      	b.n	8006084 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8006080:	2301      	movs	r3, #1
 8006082:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	78db      	ldrb	r3, [r3, #3]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d007      	beq.n	800609c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800608c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800608e:	68ba      	ldr	r2, [r7, #8]
 8006090:	8912      	ldrh	r2, [r2, #8]
 8006092:	fb03 f202 	mul.w	r2, r3, r2
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	611a      	str	r2, [r3, #16]
 800609a:	e003      	b.n	80060a4 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	695a      	ldr	r2, [r3, #20]
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	691b      	ldr	r3, [r3, #16]
 80060a8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80060ac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80060ae:	04d9      	lsls	r1, r3, #19
 80060b0:	4b63      	ldr	r3, [pc, #396]	; (8006240 <USB_HC_StartXfer+0x280>)
 80060b2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80060b4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	7a9b      	ldrb	r3, [r3, #10]
 80060ba:	075b      	lsls	r3, r3, #29
 80060bc:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80060c0:	69f9      	ldr	r1, [r7, #28]
 80060c2:	0148      	lsls	r0, r1, #5
 80060c4:	6a39      	ldr	r1, [r7, #32]
 80060c6:	4401      	add	r1, r0
 80060c8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80060cc:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80060ce:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80060d0:	79fb      	ldrb	r3, [r7, #7]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d009      	beq.n	80060ea <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	68d9      	ldr	r1, [r3, #12]
 80060da:	69fb      	ldr	r3, [r7, #28]
 80060dc:	015a      	lsls	r2, r3, #5
 80060de:	6a3b      	ldr	r3, [r7, #32]
 80060e0:	4413      	add	r3, r2
 80060e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060e6:	460a      	mov	r2, r1
 80060e8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80060ea:	6a3b      	ldr	r3, [r7, #32]
 80060ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	f003 0301 	and.w	r3, r3, #1
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	bf0c      	ite	eq
 80060fa:	2301      	moveq	r3, #1
 80060fc:	2300      	movne	r3, #0
 80060fe:	b2db      	uxtb	r3, r3
 8006100:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006102:	69fb      	ldr	r3, [r7, #28]
 8006104:	015a      	lsls	r2, r3, #5
 8006106:	6a3b      	ldr	r3, [r7, #32]
 8006108:	4413      	add	r3, r2
 800610a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	69fa      	ldr	r2, [r7, #28]
 8006112:	0151      	lsls	r1, r2, #5
 8006114:	6a3a      	ldr	r2, [r7, #32]
 8006116:	440a      	add	r2, r1
 8006118:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800611c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006120:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006122:	69fb      	ldr	r3, [r7, #28]
 8006124:	015a      	lsls	r2, r3, #5
 8006126:	6a3b      	ldr	r3, [r7, #32]
 8006128:	4413      	add	r3, r2
 800612a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800612e:	681a      	ldr	r2, [r3, #0]
 8006130:	7e7b      	ldrb	r3, [r7, #25]
 8006132:	075b      	lsls	r3, r3, #29
 8006134:	69f9      	ldr	r1, [r7, #28]
 8006136:	0148      	lsls	r0, r1, #5
 8006138:	6a39      	ldr	r1, [r7, #32]
 800613a:	4401      	add	r1, r0
 800613c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006140:	4313      	orrs	r3, r2
 8006142:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006144:	69fb      	ldr	r3, [r7, #28]
 8006146:	015a      	lsls	r2, r3, #5
 8006148:	6a3b      	ldr	r3, [r7, #32]
 800614a:	4413      	add	r3, r2
 800614c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800615a:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	78db      	ldrb	r3, [r3, #3]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d004      	beq.n	800616e <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800616a:	613b      	str	r3, [r7, #16]
 800616c:	e003      	b.n	8006176 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006174:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800617c:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800617e:	69fb      	ldr	r3, [r7, #28]
 8006180:	015a      	lsls	r2, r3, #5
 8006182:	6a3b      	ldr	r3, [r7, #32]
 8006184:	4413      	add	r3, r2
 8006186:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800618a:	461a      	mov	r2, r3
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006190:	79fb      	ldrb	r3, [r7, #7]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d001      	beq.n	800619a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8006196:	2300      	movs	r3, #0
 8006198:	e04e      	b.n	8006238 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	78db      	ldrb	r3, [r3, #3]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d149      	bne.n	8006236 <USB_HC_StartXfer+0x276>
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	695b      	ldr	r3, [r3, #20]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d045      	beq.n	8006236 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	79db      	ldrb	r3, [r3, #7]
 80061ae:	2b03      	cmp	r3, #3
 80061b0:	d830      	bhi.n	8006214 <USB_HC_StartXfer+0x254>
 80061b2:	a201      	add	r2, pc, #4	; (adr r2, 80061b8 <USB_HC_StartXfer+0x1f8>)
 80061b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061b8:	080061c9 	.word	0x080061c9
 80061bc:	080061ed 	.word	0x080061ed
 80061c0:	080061c9 	.word	0x080061c9
 80061c4:	080061ed 	.word	0x080061ed
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	695b      	ldr	r3, [r3, #20]
 80061cc:	3303      	adds	r3, #3
 80061ce:	089b      	lsrs	r3, r3, #2
 80061d0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80061d2:	8afa      	ldrh	r2, [r7, #22]
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061d8:	b29b      	uxth	r3, r3
 80061da:	429a      	cmp	r2, r3
 80061dc:	d91c      	bls.n	8006218 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	699b      	ldr	r3, [r3, #24]
 80061e2:	f043 0220 	orr.w	r2, r3, #32
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	619a      	str	r2, [r3, #24]
        }
        break;
 80061ea:	e015      	b.n	8006218 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	695b      	ldr	r3, [r3, #20]
 80061f0:	3303      	adds	r3, #3
 80061f2:	089b      	lsrs	r3, r3, #2
 80061f4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80061f6:	8afa      	ldrh	r2, [r7, #22]
 80061f8:	6a3b      	ldr	r3, [r7, #32]
 80061fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061fe:	691b      	ldr	r3, [r3, #16]
 8006200:	b29b      	uxth	r3, r3
 8006202:	429a      	cmp	r2, r3
 8006204:	d90a      	bls.n	800621c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	699b      	ldr	r3, [r3, #24]
 800620a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	619a      	str	r2, [r3, #24]
        }
        break;
 8006212:	e003      	b.n	800621c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006214:	bf00      	nop
 8006216:	e002      	b.n	800621e <USB_HC_StartXfer+0x25e>
        break;
 8006218:	bf00      	nop
 800621a:	e000      	b.n	800621e <USB_HC_StartXfer+0x25e>
        break;
 800621c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	68d9      	ldr	r1, [r3, #12]
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	785a      	ldrb	r2, [r3, #1]
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	695b      	ldr	r3, [r3, #20]
 800622a:	b29b      	uxth	r3, r3
 800622c:	2000      	movs	r0, #0
 800622e:	9000      	str	r0, [sp, #0]
 8006230:	68f8      	ldr	r0, [r7, #12]
 8006232:	f7ff fb31 	bl	8005898 <USB_WritePacket>
  }

  return HAL_OK;
 8006236:	2300      	movs	r3, #0
}
 8006238:	4618      	mov	r0, r3
 800623a:	3728      	adds	r7, #40	; 0x28
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}
 8006240:	1ff80000 	.word	0x1ff80000

08006244 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006244:	b480      	push	{r7}
 8006246:	b085      	sub	sp, #20
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006256:	695b      	ldr	r3, [r3, #20]
 8006258:	b29b      	uxth	r3, r3
}
 800625a:	4618      	mov	r0, r3
 800625c:	3714      	adds	r7, #20
 800625e:	46bd      	mov	sp, r7
 8006260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006264:	4770      	bx	lr

08006266 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006266:	b480      	push	{r7}
 8006268:	b089      	sub	sp, #36	; 0x24
 800626a:	af00      	add	r7, sp, #0
 800626c:	6078      	str	r0, [r7, #4]
 800626e:	460b      	mov	r3, r1
 8006270:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006276:	78fb      	ldrb	r3, [r7, #3]
 8006278:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800627a:	2300      	movs	r3, #0
 800627c:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800627e:	69bb      	ldr	r3, [r7, #24]
 8006280:	015a      	lsls	r2, r3, #5
 8006282:	69fb      	ldr	r3, [r7, #28]
 8006284:	4413      	add	r3, r2
 8006286:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	0c9b      	lsrs	r3, r3, #18
 800628e:	f003 0303 	and.w	r3, r3, #3
 8006292:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006294:	69bb      	ldr	r3, [r7, #24]
 8006296:	015a      	lsls	r2, r3, #5
 8006298:	69fb      	ldr	r3, [r7, #28]
 800629a:	4413      	add	r3, r2
 800629c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	0fdb      	lsrs	r3, r3, #31
 80062a4:	f003 0301 	and.w	r3, r3, #1
 80062a8:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	f003 0320 	and.w	r3, r3, #32
 80062b2:	2b20      	cmp	r3, #32
 80062b4:	d104      	bne.n	80062c0 <USB_HC_Halt+0x5a>
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d101      	bne.n	80062c0 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80062bc:	2300      	movs	r3, #0
 80062be:	e0c8      	b.n	8006452 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d002      	beq.n	80062cc <USB_HC_Halt+0x66>
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	2b02      	cmp	r3, #2
 80062ca:	d163      	bne.n	8006394 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80062cc:	69bb      	ldr	r3, [r7, #24]
 80062ce:	015a      	lsls	r2, r3, #5
 80062d0:	69fb      	ldr	r3, [r7, #28]
 80062d2:	4413      	add	r3, r2
 80062d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	69ba      	ldr	r2, [r7, #24]
 80062dc:	0151      	lsls	r1, r2, #5
 80062de:	69fa      	ldr	r2, [r7, #28]
 80062e0:	440a      	add	r2, r1
 80062e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80062ea:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	689b      	ldr	r3, [r3, #8]
 80062f0:	f003 0320 	and.w	r3, r3, #32
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	f040 80ab 	bne.w	8006450 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062fe:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006302:	2b00      	cmp	r3, #0
 8006304:	d133      	bne.n	800636e <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006306:	69bb      	ldr	r3, [r7, #24]
 8006308:	015a      	lsls	r2, r3, #5
 800630a:	69fb      	ldr	r3, [r7, #28]
 800630c:	4413      	add	r3, r2
 800630e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	69ba      	ldr	r2, [r7, #24]
 8006316:	0151      	lsls	r1, r2, #5
 8006318:	69fa      	ldr	r2, [r7, #28]
 800631a:	440a      	add	r2, r1
 800631c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006320:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006324:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006326:	69bb      	ldr	r3, [r7, #24]
 8006328:	015a      	lsls	r2, r3, #5
 800632a:	69fb      	ldr	r3, [r7, #28]
 800632c:	4413      	add	r3, r2
 800632e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	69ba      	ldr	r2, [r7, #24]
 8006336:	0151      	lsls	r1, r2, #5
 8006338:	69fa      	ldr	r2, [r7, #28]
 800633a:	440a      	add	r2, r1
 800633c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006340:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006344:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	3301      	adds	r3, #1
 800634a:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006352:	d81d      	bhi.n	8006390 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006354:	69bb      	ldr	r3, [r7, #24]
 8006356:	015a      	lsls	r2, r3, #5
 8006358:	69fb      	ldr	r3, [r7, #28]
 800635a:	4413      	add	r3, r2
 800635c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006366:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800636a:	d0ec      	beq.n	8006346 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800636c:	e070      	b.n	8006450 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800636e:	69bb      	ldr	r3, [r7, #24]
 8006370:	015a      	lsls	r2, r3, #5
 8006372:	69fb      	ldr	r3, [r7, #28]
 8006374:	4413      	add	r3, r2
 8006376:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	69ba      	ldr	r2, [r7, #24]
 800637e:	0151      	lsls	r1, r2, #5
 8006380:	69fa      	ldr	r2, [r7, #28]
 8006382:	440a      	add	r2, r1
 8006384:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006388:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800638c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800638e:	e05f      	b.n	8006450 <USB_HC_Halt+0x1ea>
            break;
 8006390:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006392:	e05d      	b.n	8006450 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006394:	69bb      	ldr	r3, [r7, #24]
 8006396:	015a      	lsls	r2, r3, #5
 8006398:	69fb      	ldr	r3, [r7, #28]
 800639a:	4413      	add	r3, r2
 800639c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	69ba      	ldr	r2, [r7, #24]
 80063a4:	0151      	lsls	r1, r2, #5
 80063a6:	69fa      	ldr	r2, [r7, #28]
 80063a8:	440a      	add	r2, r1
 80063aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063ae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80063b2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80063b4:	69fb      	ldr	r3, [r7, #28]
 80063b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063ba:	691b      	ldr	r3, [r3, #16]
 80063bc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d133      	bne.n	800642c <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80063c4:	69bb      	ldr	r3, [r7, #24]
 80063c6:	015a      	lsls	r2, r3, #5
 80063c8:	69fb      	ldr	r3, [r7, #28]
 80063ca:	4413      	add	r3, r2
 80063cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	69ba      	ldr	r2, [r7, #24]
 80063d4:	0151      	lsls	r1, r2, #5
 80063d6:	69fa      	ldr	r2, [r7, #28]
 80063d8:	440a      	add	r2, r1
 80063da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80063e2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80063e4:	69bb      	ldr	r3, [r7, #24]
 80063e6:	015a      	lsls	r2, r3, #5
 80063e8:	69fb      	ldr	r3, [r7, #28]
 80063ea:	4413      	add	r3, r2
 80063ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	69ba      	ldr	r2, [r7, #24]
 80063f4:	0151      	lsls	r1, r2, #5
 80063f6:	69fa      	ldr	r2, [r7, #28]
 80063f8:	440a      	add	r2, r1
 80063fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006402:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	3301      	adds	r3, #1
 8006408:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006410:	d81d      	bhi.n	800644e <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006412:	69bb      	ldr	r3, [r7, #24]
 8006414:	015a      	lsls	r2, r3, #5
 8006416:	69fb      	ldr	r3, [r7, #28]
 8006418:	4413      	add	r3, r2
 800641a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006424:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006428:	d0ec      	beq.n	8006404 <USB_HC_Halt+0x19e>
 800642a:	e011      	b.n	8006450 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800642c:	69bb      	ldr	r3, [r7, #24]
 800642e:	015a      	lsls	r2, r3, #5
 8006430:	69fb      	ldr	r3, [r7, #28]
 8006432:	4413      	add	r3, r2
 8006434:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	69ba      	ldr	r2, [r7, #24]
 800643c:	0151      	lsls	r1, r2, #5
 800643e:	69fa      	ldr	r2, [r7, #28]
 8006440:	440a      	add	r2, r1
 8006442:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006446:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800644a:	6013      	str	r3, [r2, #0]
 800644c:	e000      	b.n	8006450 <USB_HC_Halt+0x1ea>
          break;
 800644e:	bf00      	nop
    }
  }

  return HAL_OK;
 8006450:	2300      	movs	r3, #0
}
 8006452:	4618      	mov	r0, r3
 8006454:	3724      	adds	r7, #36	; 0x24
 8006456:	46bd      	mov	sp, r7
 8006458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645c:	4770      	bx	lr
	...

08006460 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006460:	b480      	push	{r7}
 8006462:	b087      	sub	sp, #28
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	460b      	mov	r3, r1
 800646a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006470:	78fb      	ldrb	r3, [r7, #3]
 8006472:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006474:	2301      	movs	r3, #1
 8006476:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	04da      	lsls	r2, r3, #19
 800647c:	4b15      	ldr	r3, [pc, #84]	; (80064d4 <USB_DoPing+0x74>)
 800647e:	4013      	ands	r3, r2
 8006480:	693a      	ldr	r2, [r7, #16]
 8006482:	0151      	lsls	r1, r2, #5
 8006484:	697a      	ldr	r2, [r7, #20]
 8006486:	440a      	add	r2, r1
 8006488:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800648c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006490:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	015a      	lsls	r2, r3, #5
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	4413      	add	r3, r2
 800649a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80064a8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80064b0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	015a      	lsls	r2, r3, #5
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	4413      	add	r3, r2
 80064ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064be:	461a      	mov	r2, r3
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80064c4:	2300      	movs	r3, #0
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	371c      	adds	r7, #28
 80064ca:	46bd      	mov	sp, r7
 80064cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d0:	4770      	bx	lr
 80064d2:	bf00      	nop
 80064d4:	1ff80000 	.word	0x1ff80000

080064d8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b088      	sub	sp, #32
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80064e0:	2300      	movs	r3, #0
 80064e2:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80064e8:	2300      	movs	r3, #0
 80064ea:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f7ff f911 	bl	8005714 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80064f2:	2110      	movs	r1, #16
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f7ff f96b 	bl	80057d0 <USB_FlushTxFifo>
 80064fa:	4603      	mov	r3, r0
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d001      	beq.n	8006504 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006500:	2301      	movs	r3, #1
 8006502:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f7ff f997 	bl	8005838 <USB_FlushRxFifo>
 800650a:	4603      	mov	r3, r0
 800650c:	2b00      	cmp	r3, #0
 800650e:	d001      	beq.n	8006514 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006510:	2301      	movs	r3, #1
 8006512:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006514:	2300      	movs	r3, #0
 8006516:	61bb      	str	r3, [r7, #24]
 8006518:	e01f      	b.n	800655a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800651a:	69bb      	ldr	r3, [r7, #24]
 800651c:	015a      	lsls	r2, r3, #5
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	4413      	add	r3, r2
 8006522:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006530:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006538:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006540:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006542:	69bb      	ldr	r3, [r7, #24]
 8006544:	015a      	lsls	r2, r3, #5
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	4413      	add	r3, r2
 800654a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800654e:	461a      	mov	r2, r3
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006554:	69bb      	ldr	r3, [r7, #24]
 8006556:	3301      	adds	r3, #1
 8006558:	61bb      	str	r3, [r7, #24]
 800655a:	69bb      	ldr	r3, [r7, #24]
 800655c:	2b0f      	cmp	r3, #15
 800655e:	d9dc      	bls.n	800651a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006560:	2300      	movs	r3, #0
 8006562:	61bb      	str	r3, [r7, #24]
 8006564:	e034      	b.n	80065d0 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006566:	69bb      	ldr	r3, [r7, #24]
 8006568:	015a      	lsls	r2, r3, #5
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	4413      	add	r3, r2
 800656e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800657c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006584:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800658c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800658e:	69bb      	ldr	r3, [r7, #24]
 8006590:	015a      	lsls	r2, r3, #5
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	4413      	add	r3, r2
 8006596:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800659a:	461a      	mov	r2, r3
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	3301      	adds	r3, #1
 80065a4:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80065ac:	d80c      	bhi.n	80065c8 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80065ae:	69bb      	ldr	r3, [r7, #24]
 80065b0:	015a      	lsls	r2, r3, #5
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	4413      	add	r3, r2
 80065b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065c4:	d0ec      	beq.n	80065a0 <USB_StopHost+0xc8>
 80065c6:	e000      	b.n	80065ca <USB_StopHost+0xf2>
        break;
 80065c8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80065ca:	69bb      	ldr	r3, [r7, #24]
 80065cc:	3301      	adds	r3, #1
 80065ce:	61bb      	str	r3, [r7, #24]
 80065d0:	69bb      	ldr	r3, [r7, #24]
 80065d2:	2b0f      	cmp	r3, #15
 80065d4:	d9c7      	bls.n	8006566 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065dc:	461a      	mov	r2, r3
 80065de:	f04f 33ff 	mov.w	r3, #4294967295
 80065e2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f04f 32ff 	mov.w	r2, #4294967295
 80065ea:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f7ff f880 	bl	80056f2 <USB_EnableGlobalInt>

  return ret;
 80065f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3720      	adds	r7, #32
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}
 80065fc:	0000      	movs	r0, r0
	...

08006600 <STMpil_step>:
/* External outputs (root outports fed by signals with default storage) */
ExtY_STMpil_T STMpil_Y;

/* Model step function */
void STMpil_step(void)
{
 8006600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006604:	b0c1      	sub	sp, #260	; 0x104
 8006606:	af00      	add	r7, sp, #0
  real_T rtb_Add4;
  int32_T rtb_DataTypeConversion2;

  /* Outputs for Atomic SubSystem: '<Root>/STMpil' */
  /* DiscreteTransferFcn: '<S113>/Current filter' */
  numAccum = STMpil_P.Currentfilter_NumCoef * STMpil_DW.Currentfilter_states;
 8006608:	4b8d      	ldr	r3, [pc, #564]	; (8006840 <STMpil_step+0x240>)
 800660a:	e9d3 0140 	ldrd	r0, r1, [r3, #256]	; 0x100
 800660e:	4b8d      	ldr	r3, [pc, #564]	; (8006844 <STMpil_step+0x244>)
 8006610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006614:	f7f9 ff9c 	bl	8000550 <__aeabi_dmul>
 8006618:	4602      	mov	r2, r0
 800661a:	460b      	mov	r3, r1
 800661c:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8

  /* Gain: '<S113>/R3' incorporates:
   *  Memory: '<S113>/it init1'
   */
  rtb_Integrator = STMpil_P.R3_Gain * STMpil_DW.itinit1_PreviousInput;
 8006620:	4b87      	ldr	r3, [pc, #540]	; (8006840 <STMpil_step+0x240>)
 8006622:	e9d3 0148 	ldrd	r0, r1, [r3, #288]	; 0x120
 8006626:	4b87      	ldr	r3, [pc, #540]	; (8006844 <STMpil_step+0x244>)
 8006628:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800662c:	f7f9 ff90 	bl	8000550 <__aeabi_dmul>
 8006630:	4602      	mov	r2, r0
 8006632:	460b      	mov	r3, r1
 8006634:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
  /* DataTypeConversion: '<S113>/Data Type Conversion2' incorporates:
   *  Constant: '<S115>/Constant'
   *  DiscreteTransferFcn: '<S113>/Current filter'
   *  RelationalOperator: '<S115>/Compare'
   */
  rtb_DataTypeConversion2 = (numAccum > STMpil_P.Constant_Value);
 8006638:	4b81      	ldr	r3, [pc, #516]	; (8006840 <STMpil_step+0x240>)
 800663a:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	; 0xe0
 800663e:	2101      	movs	r1, #1
 8006640:	460c      	mov	r4, r1
 8006642:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8006646:	f7fa fa13 	bl	8000a70 <__aeabi_dcmpgt>
 800664a:	4603      	mov	r3, r0
 800664c:	2b00      	cmp	r3, #0
 800664e:	d101      	bne.n	8006654 <STMpil_step+0x54>
 8006650:	2300      	movs	r3, #0
 8006652:	461c      	mov	r4, r3
 8006654:	b2e3      	uxtb	r3, r4
 8006656:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* DiscreteIntegrator: '<S113>/int(i)' incorporates:
   *  Memory: '<S113>/it init'
   */
  if (STMpil_DW.inti_IC_LOADING != 0) {
 800665a:	4b7a      	ldr	r3, [pc, #488]	; (8006844 <STMpil_step+0x244>)
 800665c:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
 8006660:	2b00      	cmp	r3, #0
 8006662:	d028      	beq.n	80066b6 <STMpil_step+0xb6>
    STMpil_DW.inti_DSTATE = STMpil_DW.itinit_PreviousInput;
 8006664:	4b77      	ldr	r3, [pc, #476]	; (8006844 <STMpil_step+0x244>)
 8006666:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800666a:	4976      	ldr	r1, [pc, #472]	; (8006844 <STMpil_step+0x244>)
 800666c:	e9c1 2302 	strd	r2, r3, [r1, #8]
    if (STMpil_DW.inti_DSTATE >= STMpil_P.inti_UpperSat) {
 8006670:	4b74      	ldr	r3, [pc, #464]	; (8006844 <STMpil_step+0x244>)
 8006672:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8006676:	4b72      	ldr	r3, [pc, #456]	; (8006840 <STMpil_step+0x240>)
 8006678:	e9d3 234c 	ldrd	r2, r3, [r3, #304]	; 0x130
 800667c:	f7fa f9ee 	bl	8000a5c <__aeabi_dcmpge>
 8006680:	4603      	mov	r3, r0
 8006682:	2b00      	cmp	r3, #0
 8006684:	d006      	beq.n	8006694 <STMpil_step+0x94>
      STMpil_DW.inti_DSTATE = STMpil_P.inti_UpperSat;
 8006686:	4b6e      	ldr	r3, [pc, #440]	; (8006840 <STMpil_step+0x240>)
 8006688:	e9d3 234c 	ldrd	r2, r3, [r3, #304]	; 0x130
 800668c:	496d      	ldr	r1, [pc, #436]	; (8006844 <STMpil_step+0x244>)
 800668e:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8006692:	e010      	b.n	80066b6 <STMpil_step+0xb6>
    } else {
      if (STMpil_DW.inti_DSTATE <= STMpil_P.inti_LowerSat) {
 8006694:	4b6b      	ldr	r3, [pc, #428]	; (8006844 <STMpil_step+0x244>)
 8006696:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800669a:	4b69      	ldr	r3, [pc, #420]	; (8006840 <STMpil_step+0x240>)
 800669c:	e9d3 234e 	ldrd	r2, r3, [r3, #312]	; 0x138
 80066a0:	f7fa f9d2 	bl	8000a48 <__aeabi_dcmple>
 80066a4:	4603      	mov	r3, r0
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d005      	beq.n	80066b6 <STMpil_step+0xb6>
        STMpil_DW.inti_DSTATE = STMpil_P.inti_LowerSat;
 80066aa:	4b65      	ldr	r3, [pc, #404]	; (8006840 <STMpil_step+0x240>)
 80066ac:	e9d3 234e 	ldrd	r2, r3, [r3, #312]	; 0x138
 80066b0:	4964      	ldr	r1, [pc, #400]	; (8006844 <STMpil_step+0x244>)
 80066b2:	e9c1 2302 	strd	r2, r3, [r1, #8]
      }
    }
  }

  if ((rtb_DataTypeConversion2 > 0) && (STMpil_DW.inti_PrevResetState <= 0)) {
 80066b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	dd2d      	ble.n	800671a <STMpil_step+0x11a>
 80066be:	4b61      	ldr	r3, [pc, #388]	; (8006844 <STMpil_step+0x244>)
 80066c0:	f993 30dd 	ldrsb.w	r3, [r3, #221]	; 0xdd
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	dc28      	bgt.n	800671a <STMpil_step+0x11a>
    STMpil_DW.inti_DSTATE = STMpil_DW.itinit_PreviousInput;
 80066c8:	4b5e      	ldr	r3, [pc, #376]	; (8006844 <STMpil_step+0x244>)
 80066ca:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80066ce:	495d      	ldr	r1, [pc, #372]	; (8006844 <STMpil_step+0x244>)
 80066d0:	e9c1 2302 	strd	r2, r3, [r1, #8]
    if (STMpil_DW.inti_DSTATE >= STMpil_P.inti_UpperSat) {
 80066d4:	4b5b      	ldr	r3, [pc, #364]	; (8006844 <STMpil_step+0x244>)
 80066d6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80066da:	4b59      	ldr	r3, [pc, #356]	; (8006840 <STMpil_step+0x240>)
 80066dc:	e9d3 234c 	ldrd	r2, r3, [r3, #304]	; 0x130
 80066e0:	f7fa f9bc 	bl	8000a5c <__aeabi_dcmpge>
 80066e4:	4603      	mov	r3, r0
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d006      	beq.n	80066f8 <STMpil_step+0xf8>
      STMpil_DW.inti_DSTATE = STMpil_P.inti_UpperSat;
 80066ea:	4b55      	ldr	r3, [pc, #340]	; (8006840 <STMpil_step+0x240>)
 80066ec:	e9d3 234c 	ldrd	r2, r3, [r3, #304]	; 0x130
 80066f0:	4954      	ldr	r1, [pc, #336]	; (8006844 <STMpil_step+0x244>)
 80066f2:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80066f6:	e010      	b.n	800671a <STMpil_step+0x11a>
    } else {
      if (STMpil_DW.inti_DSTATE <= STMpil_P.inti_LowerSat) {
 80066f8:	4b52      	ldr	r3, [pc, #328]	; (8006844 <STMpil_step+0x244>)
 80066fa:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80066fe:	4b50      	ldr	r3, [pc, #320]	; (8006840 <STMpil_step+0x240>)
 8006700:	e9d3 234e 	ldrd	r2, r3, [r3, #312]	; 0x138
 8006704:	f7fa f9a0 	bl	8000a48 <__aeabi_dcmple>
 8006708:	4603      	mov	r3, r0
 800670a:	2b00      	cmp	r3, #0
 800670c:	d005      	beq.n	800671a <STMpil_step+0x11a>
        STMpil_DW.inti_DSTATE = STMpil_P.inti_LowerSat;
 800670e:	4b4c      	ldr	r3, [pc, #304]	; (8006840 <STMpil_step+0x240>)
 8006710:	e9d3 234e 	ldrd	r2, r3, [r3, #312]	; 0x138
 8006714:	494b      	ldr	r1, [pc, #300]	; (8006844 <STMpil_step+0x244>)
 8006716:	e9c1 2302 	strd	r2, r3, [r1, #8]
      }
    }
  }

  if (STMpil_DW.inti_DSTATE >= STMpil_P.inti_UpperSat) {
 800671a:	4b4a      	ldr	r3, [pc, #296]	; (8006844 <STMpil_step+0x244>)
 800671c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8006720:	4b47      	ldr	r3, [pc, #284]	; (8006840 <STMpil_step+0x240>)
 8006722:	e9d3 234c 	ldrd	r2, r3, [r3, #304]	; 0x130
 8006726:	f7fa f999 	bl	8000a5c <__aeabi_dcmpge>
 800672a:	4603      	mov	r3, r0
 800672c:	2b00      	cmp	r3, #0
 800672e:	d006      	beq.n	800673e <STMpil_step+0x13e>
    STMpil_DW.inti_DSTATE = STMpil_P.inti_UpperSat;
 8006730:	4b43      	ldr	r3, [pc, #268]	; (8006840 <STMpil_step+0x240>)
 8006732:	e9d3 234c 	ldrd	r2, r3, [r3, #304]	; 0x130
 8006736:	4943      	ldr	r1, [pc, #268]	; (8006844 <STMpil_step+0x244>)
 8006738:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800673c:	e010      	b.n	8006760 <STMpil_step+0x160>
  } else {
    if (STMpil_DW.inti_DSTATE <= STMpil_P.inti_LowerSat) {
 800673e:	4b41      	ldr	r3, [pc, #260]	; (8006844 <STMpil_step+0x244>)
 8006740:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8006744:	4b3e      	ldr	r3, [pc, #248]	; (8006840 <STMpil_step+0x240>)
 8006746:	e9d3 234e 	ldrd	r2, r3, [r3, #312]	; 0x138
 800674a:	f7fa f97d 	bl	8000a48 <__aeabi_dcmple>
 800674e:	4603      	mov	r3, r0
 8006750:	2b00      	cmp	r3, #0
 8006752:	d005      	beq.n	8006760 <STMpil_step+0x160>
      STMpil_DW.inti_DSTATE = STMpil_P.inti_LowerSat;
 8006754:	4b3a      	ldr	r3, [pc, #232]	; (8006840 <STMpil_step+0x240>)
 8006756:	e9d3 234e 	ldrd	r2, r3, [r3, #312]	; 0x138
 800675a:	493a      	ldr	r1, [pc, #232]	; (8006844 <STMpil_step+0x244>)
 800675c:	e9c1 2302 	strd	r2, r3, [r1, #8]
  }

  /* Gain: '<S113>/Gain' incorporates:
   *  DiscreteIntegrator: '<S113>/int(i)'
   */
  rtb_Gain = STMpil_P.Gain_Gain * STMpil_DW.inti_DSTATE;
 8006760:	4b37      	ldr	r3, [pc, #220]	; (8006840 <STMpil_step+0x240>)
 8006762:	e9d3 0150 	ldrd	r0, r1, [r3, #320]	; 0x140
 8006766:	4b37      	ldr	r3, [pc, #220]	; (8006844 <STMpil_step+0x244>)
 8006768:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800676c:	f7f9 fef0 	bl	8000550 <__aeabi_dmul>
 8006770:	4602      	mov	r2, r0
 8006772:	460b      	mov	r3, r1
 8006774:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8

  /* Fcn: '<S113>/Fcn6' */
  rtb_Add3_ocsa = (((-rtb_Integrator) * 0.999) * 0.1) * 0.9999;
 8006778:	f8d7 50f0 	ldr.w	r5, [r7, #240]	; 0xf0
 800677c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006780:	f083 4600 	eor.w	r6, r3, #2147483648	; 0x80000000
 8006784:	a328      	add	r3, pc, #160	; (adr r3, 8006828 <STMpil_step+0x228>)
 8006786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800678a:	4628      	mov	r0, r5
 800678c:	4631      	mov	r1, r6
 800678e:	f7f9 fedf 	bl	8000550 <__aeabi_dmul>
 8006792:	4602      	mov	r2, r0
 8006794:	460b      	mov	r3, r1
 8006796:	4610      	mov	r0, r2
 8006798:	4619      	mov	r1, r3
 800679a:	a325      	add	r3, pc, #148	; (adr r3, 8006830 <STMpil_step+0x230>)
 800679c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a0:	f7f9 fed6 	bl	8000550 <__aeabi_dmul>
 80067a4:	4602      	mov	r2, r0
 80067a6:	460b      	mov	r3, r1
 80067a8:	4610      	mov	r0, r2
 80067aa:	4619      	mov	r1, r3
 80067ac:	a322      	add	r3, pc, #136	; (adr r3, 8006838 <STMpil_step+0x238>)
 80067ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067b2:	f7f9 fecd 	bl	8000550 <__aeabi_dmul>
 80067b6:	4602      	mov	r2, r0
 80067b8:	460b      	mov	r3, r1
 80067ba:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
  /* Switch: '<S121>/Switch2' incorporates:
   *  RelationalOperator: '<S121>/LowerRelop1'
   *  RelationalOperator: '<S121>/UpperRelop'
   *  Switch: '<S121>/Switch'
   */
  if (rtb_Gain > rtb_Integrator) {
 80067be:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 80067c2:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 80067c6:	f7fa f953 	bl	8000a70 <__aeabi_dcmpgt>
 80067ca:	4603      	mov	r3, r0
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d111      	bne.n	80067f4 <STMpil_step+0x1f4>
  } else if (rtb_Gain < rtb_Add3_ocsa) {
 80067d0:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 80067d4:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 80067d8:	f7fa f92c 	bl	8000a34 <__aeabi_dcmplt>
 80067dc:	4603      	mov	r3, r0
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d004      	beq.n	80067ec <STMpil_step+0x1ec>
    /* Switch: '<S121>/Switch' */
    rtb_Integrator = rtb_Add3_ocsa;
 80067e2:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 80067e6:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 80067ea:	e003      	b.n	80067f4 <STMpil_step+0x1f4>
  } else {
    rtb_Integrator = rtb_Gain;
 80067ec:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 80067f0:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
  /* End of Switch: '<S121>/Switch2' */

  /* Gain: '<S113>/R2' incorporates:
   *  Memory: '<S113>/it init1'
   */
  rtb_Add3_ocsa = STMpil_P.R2_Gain * STMpil_DW.itinit1_PreviousInput;
 80067f4:	4b12      	ldr	r3, [pc, #72]	; (8006840 <STMpil_step+0x240>)
 80067f6:	e9d3 015a 	ldrd	r0, r1, [r3, #360]	; 0x168
 80067fa:	4b12      	ldr	r3, [pc, #72]	; (8006844 <STMpil_step+0x244>)
 80067fc:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8006800:	f7f9 fea6 	bl	8000550 <__aeabi_dmul>
 8006804:	4602      	mov	r2, r0
 8006806:	460b      	mov	r3, r1
 8006808:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
   *  Constant: '<S113>/Constant9'
   *  RelationalOperator: '<S120>/LowerRelop1'
   *  RelationalOperator: '<S120>/UpperRelop'
   *  Switch: '<S120>/Switch'
   */
  if (rtb_Gain > rtb_Add3_ocsa) {
 800680c:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8006810:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 8006814:	f7fa f92c 	bl	8000a70 <__aeabi_dcmpgt>
 8006818:	4603      	mov	r3, r0
 800681a:	2b00      	cmp	r3, #0
 800681c:	d014      	beq.n	8006848 <STMpil_step+0x248>
    rtb_Gain = rtb_Add3_ocsa;
 800681e:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8006822:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
 8006826:	e01e      	b.n	8006866 <STMpil_step+0x266>
 8006828:	d916872b 	.word	0xd916872b
 800682c:	3feff7ce 	.word	0x3feff7ce
 8006830:	9999999a 	.word	0x9999999a
 8006834:	3fb99999 	.word	0x3fb99999
 8006838:	48e8a71e 	.word	0x48e8a71e
 800683c:	3fefff2e 	.word	0x3fefff2e
 8006840:	20000010 	.word	0x20000010
 8006844:	20000538 	.word	0x20000538
  } else {
    if (rtb_Gain < STMpil_P.Constant9_Value) {
 8006848:	4ba1      	ldr	r3, [pc, #644]	; (8006ad0 <STMpil_step+0x4d0>)
 800684a:	e9d3 235c 	ldrd	r2, r3, [r3, #368]	; 0x170
 800684e:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 8006852:	f7fa f8ef 	bl	8000a34 <__aeabi_dcmplt>
 8006856:	4603      	mov	r3, r0
 8006858:	2b00      	cmp	r3, #0
 800685a:	d004      	beq.n	8006866 <STMpil_step+0x266>
      /* Switch: '<S120>/Switch' incorporates:
       *  Constant: '<S113>/Constant9'
       */
      rtb_Gain = STMpil_P.Constant9_Value;
 800685c:	4b9c      	ldr	r3, [pc, #624]	; (8006ad0 <STMpil_step+0x4d0>)
 800685e:	e9d3 235c 	ldrd	r2, r3, [r3, #368]	; 0x170
 8006862:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8

  /* Switch: '<S113>/Switch7' incorporates:
   *  Fcn: '<S113>/Fcn9'
   *  RelationalOperator: '<S113>/Relational Operator'
   */
  if ((((1.000001 * rtb_Add3_ocsa) * 0.942507068803021) / 0.9999) <= rtb_Gain) {
 8006866:	a38c      	add	r3, pc, #560	; (adr r3, 8006a98 <STMpil_step+0x498>)
 8006868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800686c:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006870:	f7f9 fe6e 	bl	8000550 <__aeabi_dmul>
 8006874:	4602      	mov	r2, r0
 8006876:	460b      	mov	r3, r1
 8006878:	4610      	mov	r0, r2
 800687a:	4619      	mov	r1, r3
 800687c:	a388      	add	r3, pc, #544	; (adr r3, 8006aa0 <STMpil_step+0x4a0>)
 800687e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006882:	f7f9 fe65 	bl	8000550 <__aeabi_dmul>
 8006886:	4602      	mov	r2, r0
 8006888:	460b      	mov	r3, r1
 800688a:	4610      	mov	r0, r2
 800688c:	4619      	mov	r1, r3
 800688e:	a386      	add	r3, pc, #536	; (adr r3, 8006aa8 <STMpil_step+0x4a8>)
 8006890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006894:	f7f9 ff86 	bl	80007a4 <__aeabi_ddiv>
 8006898:	4602      	mov	r2, r0
 800689a:	460b      	mov	r3, r1
 800689c:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 80068a0:	f7fa f8dc 	bl	8000a5c <__aeabi_dcmpge>
 80068a4:	4603      	mov	r3, r0
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d003      	beq.n	80068b2 <STMpil_step+0x2b2>
    rtb_Gain = rtb_Add3_ocsa;
 80068aa:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 80068ae:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
   *  Product: '<S117>/Product1'
   *  Product: '<S117>/Product2'
   *  Product: '<S117>/Product3'
   *  RelationalOperator: '<S116>/Compare'
   */
  switch ((int32_T)STMpil_P.Battery_BatType) {
 80068b2:	4b87      	ldr	r3, [pc, #540]	; (8006ad0 <STMpil_step+0x4d0>)
 80068b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b8:	4610      	mov	r0, r2
 80068ba:	4619      	mov	r1, r3
 80068bc:	f7fa f8e2 	bl	8000a84 <__aeabi_d2iz>
 80068c0:	4603      	mov	r3, r0
 80068c2:	2b03      	cmp	r3, #3
 80068c4:	f000 80d7 	beq.w	8006a76 <STMpil_step+0x476>
 80068c8:	2b03      	cmp	r3, #3
 80068ca:	f300 815a 	bgt.w	8006b82 <STMpil_step+0x582>
 80068ce:	2b01      	cmp	r3, #1
 80068d0:	d002      	beq.n	80068d8 <STMpil_step+0x2d8>
 80068d2:	2b02      	cmp	r3, #2
 80068d4:	d05d      	beq.n	8006992 <STMpil_step+0x392>
 80068d6:	e154      	b.n	8006b82 <STMpil_step+0x582>
   case 1:
    STMpil_Y.SOC = (((-(STMpil_P.Constant4_Value_mb1d * ((real_T)(numAccum <
 80068d8:	4b7d      	ldr	r3, [pc, #500]	; (8006ad0 <STMpil_step+0x4d0>)
 80068da:	e9d3 452a 	ldrd	r4, r5, [r3, #168]	; 0xa8
      STMpil_P.Constant_Value_dbuc)))) * 0.029672835550368391) *
 80068de:	4b7c      	ldr	r3, [pc, #496]	; (8006ad0 <STMpil_step+0x4d0>)
 80068e0:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
    STMpil_Y.SOC = (((-(STMpil_P.Constant4_Value_mb1d * ((real_T)(numAccum <
 80068e4:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 80068e8:	f7fa f8a4 	bl	8000a34 <__aeabi_dcmplt>
 80068ec:	4603      	mov	r3, r0
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d003      	beq.n	80068fa <STMpil_step+0x2fa>
 80068f2:	f04f 0000 	mov.w	r0, #0
 80068f6:	4977      	ldr	r1, [pc, #476]	; (8006ad4 <STMpil_step+0x4d4>)
 80068f8:	e003      	b.n	8006902 <STMpil_step+0x302>
 80068fa:	f04f 0000 	mov.w	r0, #0
 80068fe:	f04f 0100 	mov.w	r1, #0
 8006902:	4622      	mov	r2, r4
 8006904:	462b      	mov	r3, r5
 8006906:	f7f9 fe23 	bl	8000550 <__aeabi_dmul>
 800690a:	4602      	mov	r2, r0
 800690c:	460b      	mov	r3, r1
 800690e:	4692      	mov	sl, r2
 8006910:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
      STMpil_P.Constant_Value_dbuc)))) * 0.029672835550368391) *
 8006914:	a366      	add	r3, pc, #408	; (adr r3, 8006ab0 <STMpil_step+0x4b0>)
 8006916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800691a:	4650      	mov	r0, sl
 800691c:	4659      	mov	r1, fp
 800691e:	f7f9 fe17 	bl	8000550 <__aeabi_dmul>
 8006922:	4602      	mov	r2, r0
 8006924:	460b      	mov	r3, r1
 8006926:	4614      	mov	r4, r2
 8006928:	461d      	mov	r5, r3
                    (STMpil_P.Constant4_Value_mb1d * numAccum)) *
 800692a:	4b69      	ldr	r3, [pc, #420]	; (8006ad0 <STMpil_step+0x4d0>)
 800692c:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	; 0xa8
 8006930:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 8006934:	f7f9 fe0c 	bl	8000550 <__aeabi_dmul>
 8006938:	4602      	mov	r2, r0
 800693a:	460b      	mov	r3, r1
      STMpil_P.Constant_Value_dbuc)))) * 0.029672835550368391) *
 800693c:	4620      	mov	r0, r4
 800693e:	4629      	mov	r1, r5
 8006940:	f7f9 fe06 	bl	8000550 <__aeabi_dmul>
 8006944:	4602      	mov	r2, r0
 8006946:	460b      	mov	r3, r1
 8006948:	4614      	mov	r4, r2
 800694a:	461d      	mov	r5, r3
      (2.1750499999999882 / ((STMpil_P.Constant4_Value_mb1d * rtb_Integrator) +
 800694c:	4b60      	ldr	r3, [pc, #384]	; (8006ad0 <STMpil_step+0x4d0>)
 800694e:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	; 0xa8
 8006952:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8006956:	f7f9 fdfb 	bl	8000550 <__aeabi_dmul>
 800695a:	4602      	mov	r2, r0
 800695c:	460b      	mov	r3, r1
 800695e:	4610      	mov	r0, r2
 8006960:	4619      	mov	r1, r3
 8006962:	a355      	add	r3, pc, #340	; (adr r3, 8006ab8 <STMpil_step+0x4b8>)
 8006964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006968:	f7f9 fc3c 	bl	80001e4 <__adddf3>
 800696c:	4602      	mov	r2, r0
 800696e:	460b      	mov	r3, r1
 8006970:	a153      	add	r1, pc, #332	; (adr r1, 8006ac0 <STMpil_step+0x4c0>)
 8006972:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006976:	f7f9 ff15 	bl	80007a4 <__aeabi_ddiv>
 800697a:	4602      	mov	r2, r0
 800697c:	460b      	mov	r3, r1
                    (STMpil_P.Constant4_Value_mb1d * numAccum)) *
 800697e:	4620      	mov	r0, r4
 8006980:	4629      	mov	r1, r5
 8006982:	f7f9 fde5 	bl	8000550 <__aeabi_dmul>
 8006986:	4602      	mov	r2, r0
 8006988:	460b      	mov	r3, r1
    STMpil_Y.SOC = (((-(STMpil_P.Constant4_Value_mb1d * ((real_T)(numAccum <
 800698a:	4953      	ldr	r1, [pc, #332]	; (8006ad8 <STMpil_step+0x4d8>)
 800698c:	e9c1 2300 	strd	r2, r3, [r1]
        0.21750499999999884));
    break;
 8006990:	e159      	b.n	8006c46 <STMpil_step+0x646>
   case 2:
    /* Product: '<S117>/Product' incorporates:
     *  Constant: '<S117>/Constant1'
     *  Memory: '<S113>/it init1'
     */
    rtb_Add3_ocsa = STMpil_P.Constant1_Value * STMpil_DW.itinit1_PreviousInput;
 8006992:	4b4f      	ldr	r3, [pc, #316]	; (8006ad0 <STMpil_step+0x4d0>)
 8006994:	e9d3 0128 	ldrd	r0, r1, [r3, #160]	; 0xa0
 8006998:	4b50      	ldr	r3, [pc, #320]	; (8006adc <STMpil_step+0x4dc>)
 800699a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800699e:	f7f9 fdd7 	bl	8000550 <__aeabi_dmul>
 80069a2:	4602      	mov	r2, r0
 80069a4:	460b      	mov	r3, r1
 80069a6:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
    STMpil_Y.SOC = ((((-(STMpil_P.Constant1_Value * ((real_T)(numAccum <
 80069aa:	4b49      	ldr	r3, [pc, #292]	; (8006ad0 <STMpil_step+0x4d0>)
 80069ac:	e9d3 4528 	ldrd	r4, r5, [r3, #160]	; 0xa0
      STMpil_P.Constant_Value_dbuc)))) * 0.029672835550368391) *
 80069b0:	4b47      	ldr	r3, [pc, #284]	; (8006ad0 <STMpil_step+0x4d0>)
 80069b2:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
    STMpil_Y.SOC = ((((-(STMpil_P.Constant1_Value * ((real_T)(numAccum <
 80069b6:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 80069ba:	f7fa f83b 	bl	8000a34 <__aeabi_dcmplt>
 80069be:	4603      	mov	r3, r0
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d003      	beq.n	80069cc <STMpil_step+0x3cc>
 80069c4:	f04f 0000 	mov.w	r0, #0
 80069c8:	4942      	ldr	r1, [pc, #264]	; (8006ad4 <STMpil_step+0x4d4>)
 80069ca:	e003      	b.n	80069d4 <STMpil_step+0x3d4>
 80069cc:	f04f 0000 	mov.w	r0, #0
 80069d0:	f04f 0100 	mov.w	r1, #0
 80069d4:	4622      	mov	r2, r4
 80069d6:	462b      	mov	r3, r5
 80069d8:	f7f9 fdba 	bl	8000550 <__aeabi_dmul>
 80069dc:	4602      	mov	r2, r0
 80069de:	460b      	mov	r3, r1
 80069e0:	4690      	mov	r8, r2
 80069e2:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
      STMpil_P.Constant_Value_dbuc)))) * 0.029672835550368391) *
 80069e6:	a332      	add	r3, pc, #200	; (adr r3, 8006ab0 <STMpil_step+0x4b0>)
 80069e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ec:	4640      	mov	r0, r8
 80069ee:	4649      	mov	r1, r9
 80069f0:	f7f9 fdae 	bl	8000550 <__aeabi_dmul>
 80069f4:	4602      	mov	r2, r0
 80069f6:	460b      	mov	r3, r1
 80069f8:	4614      	mov	r4, r2
 80069fa:	461d      	mov	r5, r3
                     (STMpil_P.Constant1_Value * numAccum)) * rtb_Add3_ocsa) /
 80069fc:	4b34      	ldr	r3, [pc, #208]	; (8006ad0 <STMpil_step+0x4d0>)
 80069fe:	e9d3 0128 	ldrd	r0, r1, [r3, #160]	; 0xa0
 8006a02:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 8006a06:	f7f9 fda3 	bl	8000550 <__aeabi_dmul>
 8006a0a:	4602      	mov	r2, r0
 8006a0c:	460b      	mov	r3, r1
      STMpil_P.Constant_Value_dbuc)))) * 0.029672835550368391) *
 8006a0e:	4620      	mov	r0, r4
 8006a10:	4629      	mov	r1, r5
 8006a12:	f7f9 fd9d 	bl	8000550 <__aeabi_dmul>
 8006a16:	4602      	mov	r2, r0
 8006a18:	460b      	mov	r3, r1
 8006a1a:	4610      	mov	r0, r2
 8006a1c:	4619      	mov	r1, r3
                     (STMpil_P.Constant1_Value * numAccum)) * rtb_Add3_ocsa) /
 8006a1e:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8006a22:	f7f9 fd95 	bl	8000550 <__aeabi_dmul>
 8006a26:	4602      	mov	r2, r0
 8006a28:	460b      	mov	r3, r1
 8006a2a:	4614      	mov	r4, r2
 8006a2c:	461d      	mov	r5, r3
      ((STMpil_P.Constant1_Value * rtb_Integrator) + (rtb_Add3_ocsa * 0.1));
 8006a2e:	4b28      	ldr	r3, [pc, #160]	; (8006ad0 <STMpil_step+0x4d0>)
 8006a30:	e9d3 0128 	ldrd	r0, r1, [r3, #160]	; 0xa0
 8006a34:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8006a38:	f7f9 fd8a 	bl	8000550 <__aeabi_dmul>
 8006a3c:	4602      	mov	r2, r0
 8006a3e:	460b      	mov	r3, r1
 8006a40:	4690      	mov	r8, r2
 8006a42:	4699      	mov	r9, r3
 8006a44:	a320      	add	r3, pc, #128	; (adr r3, 8006ac8 <STMpil_step+0x4c8>)
 8006a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a4a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006a4e:	f7f9 fd7f 	bl	8000550 <__aeabi_dmul>
 8006a52:	4602      	mov	r2, r0
 8006a54:	460b      	mov	r3, r1
 8006a56:	4640      	mov	r0, r8
 8006a58:	4649      	mov	r1, r9
 8006a5a:	f7f9 fbc3 	bl	80001e4 <__adddf3>
 8006a5e:	4602      	mov	r2, r0
 8006a60:	460b      	mov	r3, r1
                     (STMpil_P.Constant1_Value * numAccum)) * rtb_Add3_ocsa) /
 8006a62:	4620      	mov	r0, r4
 8006a64:	4629      	mov	r1, r5
 8006a66:	f7f9 fe9d 	bl	80007a4 <__aeabi_ddiv>
 8006a6a:	4602      	mov	r2, r0
 8006a6c:	460b      	mov	r3, r1
    STMpil_Y.SOC = ((((-(STMpil_P.Constant1_Value * ((real_T)(numAccum <
 8006a6e:	491a      	ldr	r1, [pc, #104]	; (8006ad8 <STMpil_step+0x4d8>)
 8006a70:	e9c1 2300 	strd	r2, r3, [r1]
    break;
 8006a74:	e0e7      	b.n	8006c46 <STMpil_step+0x646>

   case 3:
    STMpil_Y.SOC = (((-(STMpil_P.Constant3_Value * ((real_T)(numAccum <
 8006a76:	4b16      	ldr	r3, [pc, #88]	; (8006ad0 <STMpil_step+0x4d0>)
 8006a78:	e9d3 4526 	ldrd	r4, r5, [r3, #152]	; 0x98
      STMpil_P.Constant_Value_dbuc)))) * 0.029672835550368391) *
 8006a7c:	4b14      	ldr	r3, [pc, #80]	; (8006ad0 <STMpil_step+0x4d0>)
 8006a7e:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
    STMpil_Y.SOC = (((-(STMpil_P.Constant3_Value * ((real_T)(numAccum <
 8006a82:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8006a86:	f7f9 ffd5 	bl	8000a34 <__aeabi_dcmplt>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d027      	beq.n	8006ae0 <STMpil_step+0x4e0>
 8006a90:	f04f 0000 	mov.w	r0, #0
 8006a94:	490f      	ldr	r1, [pc, #60]	; (8006ad4 <STMpil_step+0x4d4>)
 8006a96:	e027      	b.n	8006ae8 <STMpil_step+0x4e8>
 8006a98:	0c6f7a0b 	.word	0x0c6f7a0b
 8006a9c:	3ff00001 	.word	0x3ff00001
 8006aa0:	95983fe0 	.word	0x95983fe0
 8006aa4:	3fee2904 	.word	0x3fee2904
 8006aa8:	48e8a71e 	.word	0x48e8a71e
 8006aac:	3fefff2e 	.word	0x3fefff2e
 8006ab0:	4912dc46 	.word	0x4912dc46
 8006ab4:	3f9e628e 	.word	0x3f9e628e
 8006ab8:	2edbb574 	.word	0x2edbb574
 8006abc:	3fcbd734 	.word	0x3fcbd734
 8006ac0:	9d495168 	.word	0x9d495168
 8006ac4:	40016680 	.word	0x40016680
 8006ac8:	9999999a 	.word	0x9999999a
 8006acc:	3fb99999 	.word	0x3fb99999
 8006ad0:	20000010 	.word	0x20000010
 8006ad4:	3ff00000 	.word	0x3ff00000
 8006ad8:	20000620 	.word	0x20000620
 8006adc:	20000538 	.word	0x20000538
 8006ae0:	f04f 0000 	mov.w	r0, #0
 8006ae4:	f04f 0100 	mov.w	r1, #0
 8006ae8:	4622      	mov	r2, r4
 8006aea:	462b      	mov	r3, r5
 8006aec:	f7f9 fd30 	bl	8000550 <__aeabi_dmul>
 8006af0:	4602      	mov	r2, r0
 8006af2:	460b      	mov	r3, r1
 8006af4:	62ba      	str	r2, [r7, #40]	; 0x28
 8006af6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006afa:	62fb      	str	r3, [r7, #44]	; 0x2c
      STMpil_P.Constant_Value_dbuc)))) * 0.029672835550368391) *
 8006afc:	a386      	add	r3, pc, #536	; (adr r3, 8006d18 <STMpil_step+0x718>)
 8006afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b02:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006b06:	f7f9 fd23 	bl	8000550 <__aeabi_dmul>
 8006b0a:	4602      	mov	r2, r0
 8006b0c:	460b      	mov	r3, r1
 8006b0e:	4614      	mov	r4, r2
 8006b10:	461d      	mov	r5, r3
                    (STMpil_P.Constant3_Value * numAccum)) * (2.1750499999999882
 8006b12:	4b85      	ldr	r3, [pc, #532]	; (8006d28 <STMpil_step+0x728>)
 8006b14:	e9d3 0126 	ldrd	r0, r1, [r3, #152]	; 0x98
 8006b18:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 8006b1c:	f7f9 fd18 	bl	8000550 <__aeabi_dmul>
 8006b20:	4602      	mov	r2, r0
 8006b22:	460b      	mov	r3, r1
      STMpil_P.Constant_Value_dbuc)))) * 0.029672835550368391) *
 8006b24:	4620      	mov	r0, r4
 8006b26:	4629      	mov	r1, r5
 8006b28:	f7f9 fd12 	bl	8000550 <__aeabi_dmul>
 8006b2c:	4602      	mov	r2, r0
 8006b2e:	460b      	mov	r3, r1
 8006b30:	4614      	mov	r4, r2
 8006b32:	461d      	mov	r5, r3
      / (fabs(STMpil_P.Constant3_Value * rtb_Integrator) + 0.21750499999999884));
 8006b34:	4b7c      	ldr	r3, [pc, #496]	; (8006d28 <STMpil_step+0x728>)
 8006b36:	e9d3 0126 	ldrd	r0, r1, [r3, #152]	; 0x98
 8006b3a:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8006b3e:	f7f9 fd07 	bl	8000550 <__aeabi_dmul>
 8006b42:	4602      	mov	r2, r0
 8006b44:	460b      	mov	r3, r1
 8006b46:	623a      	str	r2, [r7, #32]
 8006b48:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006b4c:	627b      	str	r3, [r7, #36]	; 0x24
 8006b4e:	a36e      	add	r3, pc, #440	; (adr r3, 8006d08 <STMpil_step+0x708>)
 8006b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b54:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006b58:	f7f9 fb44 	bl	80001e4 <__adddf3>
 8006b5c:	4602      	mov	r2, r0
 8006b5e:	460b      	mov	r3, r1
 8006b60:	a16b      	add	r1, pc, #428	; (adr r1, 8006d10 <STMpil_step+0x710>)
 8006b62:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b66:	f7f9 fe1d 	bl	80007a4 <__aeabi_ddiv>
 8006b6a:	4602      	mov	r2, r0
 8006b6c:	460b      	mov	r3, r1
                    (STMpil_P.Constant3_Value * numAccum)) * (2.1750499999999882
 8006b6e:	4620      	mov	r0, r4
 8006b70:	4629      	mov	r1, r5
 8006b72:	f7f9 fced 	bl	8000550 <__aeabi_dmul>
 8006b76:	4602      	mov	r2, r0
 8006b78:	460b      	mov	r3, r1
    STMpil_Y.SOC = (((-(STMpil_P.Constant3_Value * ((real_T)(numAccum <
 8006b7a:	496c      	ldr	r1, [pc, #432]	; (8006d2c <STMpil_step+0x72c>)
 8006b7c:	e9c1 2300 	strd	r2, r3, [r1]
    break;
 8006b80:	e061      	b.n	8006c46 <STMpil_step+0x646>

   default:
    STMpil_Y.SOC = (((-(STMpil_P.Constant2_Value * ((real_T)(numAccum <
 8006b82:	4b69      	ldr	r3, [pc, #420]	; (8006d28 <STMpil_step+0x728>)
 8006b84:	e9d3 4524 	ldrd	r4, r5, [r3, #144]	; 0x90
      STMpil_P.Constant_Value_dbuc)))) * 0.029672835550368391) *
 8006b88:	4b67      	ldr	r3, [pc, #412]	; (8006d28 <STMpil_step+0x728>)
 8006b8a:	e9d3 233a 	ldrd	r2, r3, [r3, #232]	; 0xe8
    STMpil_Y.SOC = (((-(STMpil_P.Constant2_Value * ((real_T)(numAccum <
 8006b8e:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8006b92:	f7f9 ff4f 	bl	8000a34 <__aeabi_dcmplt>
 8006b96:	4603      	mov	r3, r0
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d003      	beq.n	8006ba4 <STMpil_step+0x5a4>
 8006b9c:	f04f 0000 	mov.w	r0, #0
 8006ba0:	4963      	ldr	r1, [pc, #396]	; (8006d30 <STMpil_step+0x730>)
 8006ba2:	e003      	b.n	8006bac <STMpil_step+0x5ac>
 8006ba4:	f04f 0000 	mov.w	r0, #0
 8006ba8:	f04f 0100 	mov.w	r1, #0
 8006bac:	4622      	mov	r2, r4
 8006bae:	462b      	mov	r3, r5
 8006bb0:	f7f9 fcce 	bl	8000550 <__aeabi_dmul>
 8006bb4:	4602      	mov	r2, r0
 8006bb6:	460b      	mov	r3, r1
 8006bb8:	61ba      	str	r2, [r7, #24]
 8006bba:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006bbe:	61fb      	str	r3, [r7, #28]
      STMpil_P.Constant_Value_dbuc)))) * 0.029672835550368391) *
 8006bc0:	a355      	add	r3, pc, #340	; (adr r3, 8006d18 <STMpil_step+0x718>)
 8006bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bc6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006bca:	f7f9 fcc1 	bl	8000550 <__aeabi_dmul>
 8006bce:	4602      	mov	r2, r0
 8006bd0:	460b      	mov	r3, r1
 8006bd2:	4614      	mov	r4, r2
 8006bd4:	461d      	mov	r5, r3
                    (STMpil_P.Constant2_Value * numAccum)) * (2.1750499999999882
 8006bd6:	4b54      	ldr	r3, [pc, #336]	; (8006d28 <STMpil_step+0x728>)
 8006bd8:	e9d3 0124 	ldrd	r0, r1, [r3, #144]	; 0x90
 8006bdc:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 8006be0:	f7f9 fcb6 	bl	8000550 <__aeabi_dmul>
 8006be4:	4602      	mov	r2, r0
 8006be6:	460b      	mov	r3, r1
      STMpil_P.Constant_Value_dbuc)))) * 0.029672835550368391) *
 8006be8:	4620      	mov	r0, r4
 8006bea:	4629      	mov	r1, r5
 8006bec:	f7f9 fcb0 	bl	8000550 <__aeabi_dmul>
 8006bf0:	4602      	mov	r2, r0
 8006bf2:	460b      	mov	r3, r1
 8006bf4:	4614      	mov	r4, r2
 8006bf6:	461d      	mov	r5, r3
      / (fabs(STMpil_P.Constant2_Value * rtb_Integrator) + 0.21750499999999884));
 8006bf8:	4b4b      	ldr	r3, [pc, #300]	; (8006d28 <STMpil_step+0x728>)
 8006bfa:	e9d3 0124 	ldrd	r0, r1, [r3, #144]	; 0x90
 8006bfe:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8006c02:	f7f9 fca5 	bl	8000550 <__aeabi_dmul>
 8006c06:	4602      	mov	r2, r0
 8006c08:	460b      	mov	r3, r1
 8006c0a:	613a      	str	r2, [r7, #16]
 8006c0c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006c10:	617b      	str	r3, [r7, #20]
 8006c12:	a33d      	add	r3, pc, #244	; (adr r3, 8006d08 <STMpil_step+0x708>)
 8006c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c18:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006c1c:	f7f9 fae2 	bl	80001e4 <__adddf3>
 8006c20:	4602      	mov	r2, r0
 8006c22:	460b      	mov	r3, r1
 8006c24:	a13a      	add	r1, pc, #232	; (adr r1, 8006d10 <STMpil_step+0x710>)
 8006c26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c2a:	f7f9 fdbb 	bl	80007a4 <__aeabi_ddiv>
 8006c2e:	4602      	mov	r2, r0
 8006c30:	460b      	mov	r3, r1
                    (STMpil_P.Constant2_Value * numAccum)) * (2.1750499999999882
 8006c32:	4620      	mov	r0, r4
 8006c34:	4629      	mov	r1, r5
 8006c36:	f7f9 fc8b 	bl	8000550 <__aeabi_dmul>
 8006c3a:	4602      	mov	r2, r0
 8006c3c:	460b      	mov	r3, r1
    STMpil_Y.SOC = (((-(STMpil_P.Constant2_Value * ((real_T)(numAccum <
 8006c3e:	493b      	ldr	r1, [pc, #236]	; (8006d2c <STMpil_step+0x72c>)
 8006c40:	e9c1 2300 	strd	r2, r3, [r1]
    break;
 8006c44:	bf00      	nop
  /* MultiPortSwitch: '<S118>/Multiport Switch1' incorporates:
   *  Constant: '<S118>/Constant'
   *  DiscreteIntegrator: '<S118>/Discrete-Time Integrator'
   *  Fcn: '<S118>/Li-Ion'
   */
  switch ((int32_T)STMpil_P.Battery_BatType) {
 8006c46:	4b38      	ldr	r3, [pc, #224]	; (8006d28 <STMpil_step+0x728>)
 8006c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c4c:	4610      	mov	r0, r2
 8006c4e:	4619      	mov	r1, r3
 8006c50:	f7f9 ff18 	bl	8000a84 <__aeabi_d2iz>
 8006c54:	4603      	mov	r3, r0
 8006c56:	2b03      	cmp	r3, #3
 8006c58:	d04d      	beq.n	8006cf6 <STMpil_step+0x6f6>
 8006c5a:	2b03      	cmp	r3, #3
 8006c5c:	dc6e      	bgt.n	8006d3c <STMpil_step+0x73c>
 8006c5e:	2b01      	cmp	r3, #1
 8006c60:	d002      	beq.n	8006c68 <STMpil_step+0x668>
 8006c62:	2b02      	cmp	r3, #2
 8006c64:	d006      	beq.n	8006c74 <STMpil_step+0x674>
 8006c66:	e069      	b.n	8006d3c <STMpil_step+0x73c>
   case 1:
    rtb_Integrator = STMpil_DW.DiscreteTimeIntegrator_DSTATE;
 8006c68:	4b32      	ldr	r3, [pc, #200]	; (8006d34 <STMpil_step+0x734>)
 8006c6a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8006c6e:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
    break;
 8006c72:	e069      	b.n	8006d48 <STMpil_step+0x748>

   case 2:
    /* Saturate: '<S118>/Saturation' */
    if (rtb_Gain > STMpil_P.Saturation_UpperSat) {
 8006c74:	4b2c      	ldr	r3, [pc, #176]	; (8006d28 <STMpil_step+0x728>)
 8006c76:	e9d3 232c 	ldrd	r2, r3, [r3, #176]	; 0xb0
 8006c7a:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 8006c7e:	f7f9 fef7 	bl	8000a70 <__aeabi_dcmpgt>
 8006c82:	4603      	mov	r3, r0
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d005      	beq.n	8006c94 <STMpil_step+0x694>
      rtb_Integrator = STMpil_P.Saturation_UpperSat;
 8006c88:	4b27      	ldr	r3, [pc, #156]	; (8006d28 <STMpil_step+0x728>)
 8006c8a:	e9d3 232c 	ldrd	r2, r3, [r3, #176]	; 0xb0
 8006c8e:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 8006c92:	e013      	b.n	8006cbc <STMpil_step+0x6bc>
    } else if (rtb_Gain < STMpil_P.Saturation_LowerSat) {
 8006c94:	4b24      	ldr	r3, [pc, #144]	; (8006d28 <STMpil_step+0x728>)
 8006c96:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	; 0xb8
 8006c9a:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 8006c9e:	f7f9 fec9 	bl	8000a34 <__aeabi_dcmplt>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d005      	beq.n	8006cb4 <STMpil_step+0x6b4>
      rtb_Integrator = STMpil_P.Saturation_LowerSat;
 8006ca8:	4b1f      	ldr	r3, [pc, #124]	; (8006d28 <STMpil_step+0x728>)
 8006caa:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	; 0xb8
 8006cae:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
 8006cb2:	e003      	b.n	8006cbc <STMpil_step+0x6bc>
    } else {
      rtb_Integrator = rtb_Gain;
 8006cb4:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 8006cb8:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
    }

    /* End of Saturate: '<S118>/Saturation' */
    rtb_Integrator = 0.21089319159632841 * exp(-15.0 * rtb_Integrator);
 8006cbc:	f04f 0200 	mov.w	r2, #0
 8006cc0:	4b1d      	ldr	r3, [pc, #116]	; (8006d38 <STMpil_step+0x738>)
 8006cc2:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8006cc6:	f7f9 fc43 	bl	8000550 <__aeabi_dmul>
 8006cca:	4602      	mov	r2, r0
 8006ccc:	460b      	mov	r3, r1
 8006cce:	ec43 2b17 	vmov	d7, r2, r3
 8006cd2:	eeb0 0a47 	vmov.f32	s0, s14
 8006cd6:	eef0 0a67 	vmov.f32	s1, s15
 8006cda:	f004 fe05 	bl	800b8e8 <exp>
 8006cde:	ec51 0b10 	vmov	r0, r1, d0
 8006ce2:	a30f      	add	r3, pc, #60	; (adr r3, 8006d20 <STMpil_step+0x720>)
 8006ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ce8:	f7f9 fc32 	bl	8000550 <__aeabi_dmul>
 8006cec:	4602      	mov	r2, r0
 8006cee:	460b      	mov	r3, r1
 8006cf0:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
    break;
 8006cf4:	e028      	b.n	8006d48 <STMpil_step+0x748>

   case 3:
    rtb_Integrator = STMpil_DW.DiscreteTimeIntegrator_DSTATE;
 8006cf6:	4b0f      	ldr	r3, [pc, #60]	; (8006d34 <STMpil_step+0x734>)
 8006cf8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8006cfc:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
    break;
 8006d00:	e022      	b.n	8006d48 <STMpil_step+0x748>
 8006d02:	bf00      	nop
 8006d04:	f3af 8000 	nop.w
 8006d08:	2edbb574 	.word	0x2edbb574
 8006d0c:	3fcbd734 	.word	0x3fcbd734
 8006d10:	9d495168 	.word	0x9d495168
 8006d14:	40016680 	.word	0x40016680
 8006d18:	4912dc46 	.word	0x4912dc46
 8006d1c:	3f9e628e 	.word	0x3f9e628e
 8006d20:	506d7a3a 	.word	0x506d7a3a
 8006d24:	3fcafe8c 	.word	0x3fcafe8c
 8006d28:	20000010 	.word	0x20000010
 8006d2c:	20000620 	.word	0x20000620
 8006d30:	3ff00000 	.word	0x3ff00000
 8006d34:	20000538 	.word	0x20000538
 8006d38:	c02e0000 	.word	0xc02e0000

   default:
    rtb_Integrator = STMpil_DW.DiscreteTimeIntegrator_DSTATE;
 8006d3c:	4ba2      	ldr	r3, [pc, #648]	; (8006fc8 <STMpil_step+0x9c8>)
 8006d3e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8006d42:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
    break;
 8006d46:	bf00      	nop

  /* Fcn: '<S113>/E_NL' incorporates:
   *  Fcn: '<S113>/E_dyn Discharge'
   *  Memory: '<S113>/it init1'
   */
  rtb_Add3_ocsa = STMpil_DW.itinit1_PreviousInput - rtb_Gain;
 8006d48:	4b9f      	ldr	r3, [pc, #636]	; (8006fc8 <STMpil_step+0x9c8>)
 8006d4a:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8006d4e:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 8006d52:	f7f9 fa45 	bl	80001e0 <__aeabi_dsub>
 8006d56:	4602      	mov	r2, r0
 8006d58:	460b      	mov	r3, r1
 8006d5a:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
   *  Fcn: '<S113>/E_dyn Discharge'
   *  Fcn: '<S113>/Fcn5'
   *  Memory: '<S113>/it init1'
   *  Sum: '<S113>/Add2'
   */
  rtb_Integrator = STMpil_P.Constant_Value_j1kh + (((((((-0.029672835550368391 *
 8006d5e:	4b9b      	ldr	r3, [pc, #620]	; (8006fcc <STMpil_step+0x9cc>)
 8006d60:	e9d3 4558 	ldrd	r4, r5, [r3, #352]	; 0x160
    STMpil_DW.itinit1_PreviousInput) / rtb_Add3_ocsa) * rtb_Gain) +
 8006d64:	4b98      	ldr	r3, [pc, #608]	; (8006fc8 <STMpil_step+0x9c8>)
 8006d66:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
  rtb_Integrator = STMpil_P.Constant_Value_j1kh + (((((((-0.029672835550368391 *
 8006d6a:	a393      	add	r3, pc, #588	; (adr r3, 8006fb8 <STMpil_step+0x9b8>)
 8006d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d70:	f7f9 fbee 	bl	8000550 <__aeabi_dmul>
 8006d74:	4602      	mov	r2, r0
 8006d76:	460b      	mov	r3, r1
 8006d78:	4610      	mov	r0, r2
 8006d7a:	4619      	mov	r1, r3
    STMpil_DW.itinit1_PreviousInput) / rtb_Add3_ocsa) * rtb_Gain) +
 8006d7c:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8006d80:	f7f9 fd10 	bl	80007a4 <__aeabi_ddiv>
 8006d84:	4602      	mov	r2, r0
 8006d86:	460b      	mov	r3, r1
 8006d88:	4610      	mov	r0, r2
 8006d8a:	4619      	mov	r1, r3
 8006d8c:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 8006d90:	f7f9 fbde 	bl	8000550 <__aeabi_dmul>
 8006d94:	4602      	mov	r2, r0
 8006d96:	460b      	mov	r3, r1
 8006d98:	4690      	mov	r8, r2
 8006d9a:	4699      	mov	r9, r3
    (((((-((real_T)rtb_DataTypeConversion2)) * 0.029672835550368391) * numAccum)
 8006d9c:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8006da0:	f7f9 fb6c 	bl	800047c <__aeabi_i2d>
 8006da4:	4602      	mov	r2, r0
 8006da6:	460b      	mov	r3, r1
 8006da8:	60ba      	str	r2, [r7, #8]
 8006daa:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8006dae:	60fb      	str	r3, [r7, #12]
 8006db0:	a383      	add	r3, pc, #524	; (adr r3, 8006fc0 <STMpil_step+0x9c0>)
 8006db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006db6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006dba:	f7f9 fbc9 	bl	8000550 <__aeabi_dmul>
 8006dbe:	4602      	mov	r2, r0
 8006dc0:	460b      	mov	r3, r1
 8006dc2:	4610      	mov	r0, r2
 8006dc4:	4619      	mov	r1, r3
 8006dc6:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 8006dca:	f7f9 fbc1 	bl	8000550 <__aeabi_dmul>
 8006dce:	4602      	mov	r2, r0
 8006dd0:	460b      	mov	r3, r1
 8006dd2:	4610      	mov	r0, r2
 8006dd4:	4619      	mov	r1, r3
      * STMpil_DW.itinit1_PreviousInput) / rtb_Add3_ocsa)) + STMpil_Y.SOC) +
 8006dd6:	4b7c      	ldr	r3, [pc, #496]	; (8006fc8 <STMpil_step+0x9c8>)
 8006dd8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8006ddc:	f7f9 fbb8 	bl	8000550 <__aeabi_dmul>
 8006de0:	4602      	mov	r2, r0
 8006de2:	460b      	mov	r3, r1
 8006de4:	4610      	mov	r0, r2
 8006de6:	4619      	mov	r1, r3
 8006de8:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8006dec:	f7f9 fcda 	bl	80007a4 <__aeabi_ddiv>
 8006df0:	4602      	mov	r2, r0
 8006df2:	460b      	mov	r3, r1
    STMpil_DW.itinit1_PreviousInput) / rtb_Add3_ocsa) * rtb_Gain) +
 8006df4:	4640      	mov	r0, r8
 8006df6:	4649      	mov	r1, r9
 8006df8:	f7f9 f9f4 	bl	80001e4 <__adddf3>
 8006dfc:	4602      	mov	r2, r0
 8006dfe:	460b      	mov	r3, r1
 8006e00:	4610      	mov	r0, r2
 8006e02:	4619      	mov	r1, r3
      * STMpil_DW.itinit1_PreviousInput) / rtb_Add3_ocsa)) + STMpil_Y.SOC) +
 8006e04:	4b72      	ldr	r3, [pc, #456]	; (8006fd0 <STMpil_step+0x9d0>)
 8006e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e0a:	f7f9 f9eb 	bl	80001e4 <__adddf3>
 8006e0e:	4602      	mov	r2, r0
 8006e10:	460b      	mov	r3, r1
 8006e12:	4610      	mov	r0, r2
 8006e14:	4619      	mov	r1, r3
 8006e16:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8006e1a:	f7f9 f9e3 	bl	80001e4 <__adddf3>
 8006e1e:	4602      	mov	r2, r0
 8006e20:	460b      	mov	r3, r1
 8006e22:	4690      	mov	r8, r2
 8006e24:	4699      	mov	r9, r3
    rtb_Integrator) + (-0.0 * rtb_Gain));
 8006e26:	f04f 0200 	mov.w	r2, #0
 8006e2a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006e2e:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 8006e32:	f7f9 fb8d 	bl	8000550 <__aeabi_dmul>
 8006e36:	4602      	mov	r2, r0
 8006e38:	460b      	mov	r3, r1
 8006e3a:	4640      	mov	r0, r8
 8006e3c:	4649      	mov	r1, r9
 8006e3e:	f7f9 f9d1 	bl	80001e4 <__adddf3>
 8006e42:	4602      	mov	r2, r0
 8006e44:	460b      	mov	r3, r1
  rtb_Integrator = STMpil_P.Constant_Value_j1kh + (((((((-0.029672835550368391 *
 8006e46:	4620      	mov	r0, r4
 8006e48:	4629      	mov	r1, r5
 8006e4a:	f7f9 f9cb 	bl	80001e4 <__adddf3>
 8006e4e:	4602      	mov	r2, r0
 8006e50:	460b      	mov	r3, r1
 8006e52:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
   *  Memory: '<S113>/Memory2'
   *  RelationalOperator: '<S119>/LowerRelop1'
   *  RelationalOperator: '<S119>/UpperRelop'
   *  Switch: '<S119>/Switch'
   */
  if (rtb_Integrator > STMpil_P.Constant1_Value_hyh3) {
 8006e56:	4b5d      	ldr	r3, [pc, #372]	; (8006fcc <STMpil_step+0x9cc>)
 8006e58:	e9d3 2356 	ldrd	r2, r3, [r3, #344]	; 0x158
 8006e5c:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8006e60:	f7f9 fe06 	bl	8000a70 <__aeabi_dcmpgt>
 8006e64:	4603      	mov	r3, r0
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d006      	beq.n	8006e78 <STMpil_step+0x878>
    STMpil_B.Switch2 = STMpil_P.Constant1_Value_hyh3;
 8006e6a:	4b58      	ldr	r3, [pc, #352]	; (8006fcc <STMpil_step+0x9cc>)
 8006e6c:	e9d3 2356 	ldrd	r2, r3, [r3, #344]	; 0x158
 8006e70:	4958      	ldr	r1, [pc, #352]	; (8006fd4 <STMpil_step+0x9d4>)
 8006e72:	e9c1 2300 	strd	r2, r3, [r1]
 8006e76:	e015      	b.n	8006ea4 <STMpil_step+0x8a4>
  } else if (rtb_Integrator < STMpil_DW.Memory2_PreviousInput) {
 8006e78:	4b53      	ldr	r3, [pc, #332]	; (8006fc8 <STMpil_step+0x9c8>)
 8006e7a:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8006e7e:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 8006e82:	f7f9 fdd7 	bl	8000a34 <__aeabi_dcmplt>
 8006e86:	4603      	mov	r3, r0
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d006      	beq.n	8006e9a <STMpil_step+0x89a>
    /* Switch: '<S119>/Switch' incorporates:
     *  Memory: '<S113>/Memory2'
     */
    STMpil_B.Switch2 = STMpil_DW.Memory2_PreviousInput;
 8006e8c:	4b4e      	ldr	r3, [pc, #312]	; (8006fc8 <STMpil_step+0x9c8>)
 8006e8e:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8006e92:	4950      	ldr	r1, [pc, #320]	; (8006fd4 <STMpil_step+0x9d4>)
 8006e94:	e9c1 2300 	strd	r2, r3, [r1]
 8006e98:	e004      	b.n	8006ea4 <STMpil_step+0x8a4>
  } else {
    STMpil_B.Switch2 = rtb_Integrator;
 8006e9a:	494e      	ldr	r1, [pc, #312]	; (8006fd4 <STMpil_step+0x9d4>)
 8006e9c:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8006ea0:	e9c1 2300 	strd	r2, r3, [r1]
  /* S-Function block: <S127>/State-Space */
  {
    real_T accum;

    /* Circuit has switches */
    int_T *switch_status = (int_T*) STMpil_DW.StateSpace_PWORK.SWITCH_STATUS;
 8006ea4:	4b48      	ldr	r3, [pc, #288]	; (8006fc8 <STMpil_step+0x9c8>)
 8006ea6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ea8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    int_T *switch_status_init = (int_T*)
 8006eac:	4b46      	ldr	r3, [pc, #280]	; (8006fc8 <STMpil_step+0x9c8>)
 8006eae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006eb0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
      STMpil_DW.StateSpace_PWORK.SWITCH_STATUS_INIT;
    int_T *SwitchChange = (int_T*) STMpil_DW.StateSpace_PWORK.SW_CHG;
 8006eb4:	4b44      	ldr	r3, [pc, #272]	; (8006fc8 <STMpil_step+0x9c8>)
 8006eb6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006eb8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    int_T *gState = (int_T*) STMpil_DW.StateSpace_PWORK.G_STATE;
 8006ebc:	4b42      	ldr	r3, [pc, #264]	; (8006fc8 <STMpil_step+0x9c8>)
 8006ebe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ec2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    real_T *yswitch = (real_T*)STMpil_DW.StateSpace_PWORK.Y_SWITCH;
 8006ec6:	4b40      	ldr	r3, [pc, #256]	; (8006fc8 <STMpil_step+0x9c8>)
 8006ec8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006ecc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    int_T *switchTypes = (int_T*) STMpil_DW.StateSpace_PWORK.SWITCH_TYPES;
 8006ed0:	4b3d      	ldr	r3, [pc, #244]	; (8006fc8 <STMpil_step+0x9c8>)
 8006ed2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006ed6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    int_T *idxOutSw = (int_T*) STMpil_DW.StateSpace_PWORK.IDX_OUT_SW;
 8006eda:	4b3b      	ldr	r3, [pc, #236]	; (8006fc8 <STMpil_step+0x9c8>)
 8006edc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006ee0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    real_T *DxCol = (real_T*)STMpil_DW.StateSpace_PWORK.DX_COL;
 8006ee4:	4b38      	ldr	r3, [pc, #224]	; (8006fc8 <STMpil_step+0x9c8>)
 8006ee6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ee8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    real_T *tmp2 = (real_T*)STMpil_DW.StateSpace_PWORK.TMP2;
 8006eec:	4b36      	ldr	r3, [pc, #216]	; (8006fc8 <STMpil_step+0x9c8>)
 8006eee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ef0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    real_T *BDcol = (real_T*)STMpil_DW.StateSpace_PWORK.BD_COL;
 8006ef4:	4b34      	ldr	r3, [pc, #208]	; (8006fc8 <STMpil_step+0x9c8>)
 8006ef6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ef8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    real_T *tmp1 = (real_T*)STMpil_DW.StateSpace_PWORK.TMP1;
 8006efc:	4b32      	ldr	r3, [pc, #200]	; (8006fc8 <STMpil_step+0x9c8>)
 8006efe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f00:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    real_T *uswlast = (real_T*)STMpil_DW.StateSpace_PWORK.USWLAST;
 8006f04:	4b30      	ldr	r3, [pc, #192]	; (8006fc8 <STMpil_step+0x9c8>)
 8006f06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f0a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    int_T newState;
    int_T swChanged = 0;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    int loopsToDo = 20;
 8006f14:	2314      	movs	r3, #20
 8006f16:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    real_T temp;

    /* keep an initial copy of switch_status*/
    memcpy(switch_status_init, switch_status, 2 * sizeof(int_T));
 8006f1a:	2208      	movs	r2, #8
 8006f1c:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8006f20:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8006f24:	f004 fbb4 	bl	800b690 <memcpy>
    memcpy(uswlast, &STMpil_B.StateSpace_o1[0], 2*sizeof(real_T));
 8006f28:	2210      	movs	r2, #16
 8006f2a:	492b      	ldr	r1, [pc, #172]	; (8006fd8 <STMpil_step+0x9d8>)
 8006f2c:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8006f30:	f004 fbae 	bl	800b690 <memcpy>
    do {
      if (loopsToDo == 1) {            /* Need to reset some variables: */
 8006f34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f38:	2b01      	cmp	r3, #1
 8006f3a:	d14f      	bne.n	8006fdc <STMpil_step+0x9dc>
        swChanged = 0;
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

        /* return to the original switch status*/
        {
          int_T i1;
          for (i1=0; i1 < 2; i1++) {
 8006f42:	2300      	movs	r3, #0
 8006f44:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006f48:	e031      	b.n	8006fae <STMpil_step+0x9ae>
            swChanged = ((SwitchChange[i1] = switch_status_init[i1] -
 8006f4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f4e:	009b      	lsls	r3, r3, #2
 8006f50:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006f54:	4413      	add	r3, r2
 8006f56:	6819      	ldr	r1, [r3, #0]
                          switch_status[i1]) != 0) ? 1 : swChanged;
 8006f58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f5c:	009b      	lsls	r3, r3, #2
 8006f5e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006f62:	4413      	add	r3, r2
 8006f64:	681a      	ldr	r2, [r3, #0]
            swChanged = ((SwitchChange[i1] = switch_status_init[i1] -
 8006f66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f6a:	009b      	lsls	r3, r3, #2
 8006f6c:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8006f70:	4403      	add	r3, r0
 8006f72:	1a8a      	subs	r2, r1, r2
 8006f74:	601a      	str	r2, [r3, #0]
 8006f76:	681b      	ldr	r3, [r3, #0]
                          switch_status[i1]) != 0) ? 1 : swChanged;
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d102      	bne.n	8006f82 <STMpil_step+0x982>
 8006f7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f80:	e000      	b.n	8006f84 <STMpil_step+0x984>
 8006f82:	2301      	movs	r3, #1
            swChanged = ((SwitchChange[i1] = switch_status_init[i1] -
 8006f84:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
            switch_status[i1] = switch_status_init[i1];
 8006f88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f8c:	009b      	lsls	r3, r3, #2
 8006f8e:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006f92:	441a      	add	r2, r3
 8006f94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f98:	009b      	lsls	r3, r3, #2
 8006f9a:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8006f9e:	440b      	add	r3, r1
 8006fa0:	6812      	ldr	r2, [r2, #0]
 8006fa2:	601a      	str	r2, [r3, #0]
          for (i1=0; i1 < 2; i1++) {
 8006fa4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006fa8:	3301      	adds	r3, #1
 8006faa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006fae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006fb2:	2b01      	cmp	r3, #1
 8006fb4:	ddc9      	ble.n	8006f4a <STMpil_step+0x94a>
 8006fb6:	e27a      	b.n	80074ae <STMpil_step+0xeae>
 8006fb8:	4912dc46 	.word	0x4912dc46
 8006fbc:	bf9e628e 	.word	0xbf9e628e
 8006fc0:	4912dc46 	.word	0x4912dc46
 8006fc4:	3f9e628e 	.word	0x3f9e628e
 8006fc8:	20000538 	.word	0x20000538
 8006fcc:	20000010 	.word	0x20000010
 8006fd0:	20000620 	.word	0x20000620
 8006fd4:	200004f8 	.word	0x200004f8
 8006fd8:	20000500 	.word	0x20000500
      } else {
        /*
         * Compute outputs:
         * ---------------
         */
        real_T *Cs = (real_T*)STMpil_DW.StateSpace_PWORK.CS;
 8006fdc:	4bb4      	ldr	r3, [pc, #720]	; (80072b0 <STMpil_step+0xcb0>)
 8006fde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fe0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        real_T *Ds = (real_T*)STMpil_DW.StateSpace_PWORK.DS;
 8006fe4:	4bb2      	ldr	r3, [pc, #712]	; (80072b0 <STMpil_step+0xcb0>)
 8006fe6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fe8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        accum = 0.0;
 8006fec:	f04f 0200 	mov.w	r2, #0
 8006ff0:	f04f 0300 	mov.w	r3, #0
 8006ff4:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
        accum += *(Cs++) * STMpil_DW.StateSpace_DSTATE[0];
 8006ff8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006ffc:	f103 0208 	add.w	r2, r3, #8
 8007000:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007004:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007008:	4ba9      	ldr	r3, [pc, #676]	; (80072b0 <STMpil_step+0xcb0>)
 800700a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800700e:	f7f9 fa9f 	bl	8000550 <__aeabi_dmul>
 8007012:	4602      	mov	r2, r0
 8007014:	460b      	mov	r3, r1
 8007016:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800701a:	f7f9 f8e3 	bl	80001e4 <__adddf3>
 800701e:	4602      	mov	r2, r0
 8007020:	460b      	mov	r3, r1
 8007022:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
        accum += *(Cs++) * STMpil_DW.StateSpace_DSTATE[1];
 8007026:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800702a:	f103 0208 	add.w	r2, r3, #8
 800702e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007032:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007036:	4b9e      	ldr	r3, [pc, #632]	; (80072b0 <STMpil_step+0xcb0>)
 8007038:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800703c:	f7f9 fa88 	bl	8000550 <__aeabi_dmul>
 8007040:	4602      	mov	r2, r0
 8007042:	460b      	mov	r3, r1
 8007044:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8007048:	f7f9 f8cc 	bl	80001e4 <__adddf3>
 800704c:	4602      	mov	r2, r0
 800704e:	460b      	mov	r3, r1
 8007050:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
        accum += *(Ds++) * STMpil_P.SwitchCurrents_Value[0];
 8007054:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007058:	f103 0208 	add.w	r2, r3, #8
 800705c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8007060:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007064:	4b93      	ldr	r3, [pc, #588]	; (80072b4 <STMpil_step+0xcb4>)
 8007066:	e9d3 2352 	ldrd	r2, r3, [r3, #328]	; 0x148
 800706a:	f7f9 fa71 	bl	8000550 <__aeabi_dmul>
 800706e:	4602      	mov	r2, r0
 8007070:	460b      	mov	r3, r1
 8007072:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8007076:	f7f9 f8b5 	bl	80001e4 <__adddf3>
 800707a:	4602      	mov	r2, r0
 800707c:	460b      	mov	r3, r1
 800707e:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
        accum += *(Ds++) * STMpil_P.SwitchCurrents_Value[1];
 8007082:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007086:	f103 0208 	add.w	r2, r3, #8
 800708a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800708e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007092:	4b88      	ldr	r3, [pc, #544]	; (80072b4 <STMpil_step+0xcb4>)
 8007094:	e9d3 2354 	ldrd	r2, r3, [r3, #336]	; 0x150
 8007098:	f7f9 fa5a 	bl	8000550 <__aeabi_dmul>
 800709c:	4602      	mov	r2, r0
 800709e:	460b      	mov	r3, r1
 80070a0:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 80070a4:	f7f9 f89e 	bl	80001e4 <__adddf3>
 80070a8:	4602      	mov	r2, r0
 80070aa:	460b      	mov	r3, r1
 80070ac:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
        accum += *(Ds++) * STMpil_B.Switch2;
 80070b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80070b4:	f103 0208 	add.w	r2, r3, #8
 80070b8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80070bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80070c0:	4b7d      	ldr	r3, [pc, #500]	; (80072b8 <STMpil_step+0xcb8>)
 80070c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070c6:	f7f9 fa43 	bl	8000550 <__aeabi_dmul>
 80070ca:	4602      	mov	r2, r0
 80070cc:	460b      	mov	r3, r1
 80070ce:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 80070d2:	f7f9 f887 	bl	80001e4 <__adddf3>
 80070d6:	4602      	mov	r2, r0
 80070d8:	460b      	mov	r3, r1
 80070da:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
        accum += *(Ds++) * STMpil_U.In1;
 80070de:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80070e2:	f103 0208 	add.w	r2, r3, #8
 80070e6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80070ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80070ee:	4b73      	ldr	r3, [pc, #460]	; (80072bc <STMpil_step+0xcbc>)
 80070f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070f4:	f7f9 fa2c 	bl	8000550 <__aeabi_dmul>
 80070f8:	4602      	mov	r2, r0
 80070fa:	460b      	mov	r3, r1
 80070fc:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8007100:	f7f9 f870 	bl	80001e4 <__adddf3>
 8007104:	4602      	mov	r2, r0
 8007106:	460b      	mov	r3, r1
 8007108:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
        STMpil_B.StateSpace_o1[0] = accum;
 800710c:	496a      	ldr	r1, [pc, #424]	; (80072b8 <STMpil_step+0xcb8>)
 800710e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8007112:	e9c1 2302 	strd	r2, r3, [r1, #8]
        accum = 0.0;
 8007116:	f04f 0200 	mov.w	r2, #0
 800711a:	f04f 0300 	mov.w	r3, #0
 800711e:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
        accum += *(Cs++) * STMpil_DW.StateSpace_DSTATE[0];
 8007122:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007126:	f103 0208 	add.w	r2, r3, #8
 800712a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800712e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007132:	4b5f      	ldr	r3, [pc, #380]	; (80072b0 <STMpil_step+0xcb0>)
 8007134:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8007138:	f7f9 fa0a 	bl	8000550 <__aeabi_dmul>
 800713c:	4602      	mov	r2, r0
 800713e:	460b      	mov	r3, r1
 8007140:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8007144:	f7f9 f84e 	bl	80001e4 <__adddf3>
 8007148:	4602      	mov	r2, r0
 800714a:	460b      	mov	r3, r1
 800714c:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
        accum += *(Cs++) * STMpil_DW.StateSpace_DSTATE[1];
 8007150:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007154:	f103 0208 	add.w	r2, r3, #8
 8007158:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800715c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007160:	4b53      	ldr	r3, [pc, #332]	; (80072b0 <STMpil_step+0xcb0>)
 8007162:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007166:	f7f9 f9f3 	bl	8000550 <__aeabi_dmul>
 800716a:	4602      	mov	r2, r0
 800716c:	460b      	mov	r3, r1
 800716e:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8007172:	f7f9 f837 	bl	80001e4 <__adddf3>
 8007176:	4602      	mov	r2, r0
 8007178:	460b      	mov	r3, r1
 800717a:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
        accum += *(Ds++) * STMpil_P.SwitchCurrents_Value[0];
 800717e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007182:	f103 0208 	add.w	r2, r3, #8
 8007186:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800718a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800718e:	4b49      	ldr	r3, [pc, #292]	; (80072b4 <STMpil_step+0xcb4>)
 8007190:	e9d3 2352 	ldrd	r2, r3, [r3, #328]	; 0x148
 8007194:	f7f9 f9dc 	bl	8000550 <__aeabi_dmul>
 8007198:	4602      	mov	r2, r0
 800719a:	460b      	mov	r3, r1
 800719c:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 80071a0:	f7f9 f820 	bl	80001e4 <__adddf3>
 80071a4:	4602      	mov	r2, r0
 80071a6:	460b      	mov	r3, r1
 80071a8:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
        accum += *(Ds++) * STMpil_P.SwitchCurrents_Value[1];
 80071ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80071b0:	f103 0208 	add.w	r2, r3, #8
 80071b4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80071b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80071bc:	4b3d      	ldr	r3, [pc, #244]	; (80072b4 <STMpil_step+0xcb4>)
 80071be:	e9d3 2354 	ldrd	r2, r3, [r3, #336]	; 0x150
 80071c2:	f7f9 f9c5 	bl	8000550 <__aeabi_dmul>
 80071c6:	4602      	mov	r2, r0
 80071c8:	460b      	mov	r3, r1
 80071ca:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 80071ce:	f7f9 f809 	bl	80001e4 <__adddf3>
 80071d2:	4602      	mov	r2, r0
 80071d4:	460b      	mov	r3, r1
 80071d6:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
        accum += *(Ds++) * STMpil_B.Switch2;
 80071da:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80071de:	f103 0208 	add.w	r2, r3, #8
 80071e2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80071e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80071ea:	4b33      	ldr	r3, [pc, #204]	; (80072b8 <STMpil_step+0xcb8>)
 80071ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071f0:	f7f9 f9ae 	bl	8000550 <__aeabi_dmul>
 80071f4:	4602      	mov	r2, r0
 80071f6:	460b      	mov	r3, r1
 80071f8:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 80071fc:	f7f8 fff2 	bl	80001e4 <__adddf3>
 8007200:	4602      	mov	r2, r0
 8007202:	460b      	mov	r3, r1
 8007204:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
        accum += *(Ds++) * STMpil_U.In1;
 8007208:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800720c:	f103 0208 	add.w	r2, r3, #8
 8007210:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8007214:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007218:	4b28      	ldr	r3, [pc, #160]	; (80072bc <STMpil_step+0xcbc>)
 800721a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800721e:	f7f9 f997 	bl	8000550 <__aeabi_dmul>
 8007222:	4602      	mov	r2, r0
 8007224:	460b      	mov	r3, r1
 8007226:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800722a:	f7f8 ffdb 	bl	80001e4 <__adddf3>
 800722e:	4602      	mov	r2, r0
 8007230:	460b      	mov	r3, r1
 8007232:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
        STMpil_B.StateSpace_o1[1] = accum;
 8007236:	4920      	ldr	r1, [pc, #128]	; (80072b8 <STMpil_step+0xcb8>)
 8007238:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800723c:	e9c1 2304 	strd	r2, r3, [r1, #16]
        accum = 0.0;
 8007240:	f04f 0200 	mov.w	r2, #0
 8007244:	f04f 0300 	mov.w	r3, #0
 8007248:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
        accum += *(Cs++) * STMpil_DW.StateSpace_DSTATE[0];
 800724c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007250:	f103 0208 	add.w	r2, r3, #8
 8007254:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007258:	e9d3 0100 	ldrd	r0, r1, [r3]
 800725c:	4b14      	ldr	r3, [pc, #80]	; (80072b0 <STMpil_step+0xcb0>)
 800725e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8007262:	f7f9 f975 	bl	8000550 <__aeabi_dmul>
 8007266:	4602      	mov	r2, r0
 8007268:	460b      	mov	r3, r1
 800726a:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800726e:	f7f8 ffb9 	bl	80001e4 <__adddf3>
 8007272:	4602      	mov	r2, r0
 8007274:	460b      	mov	r3, r1
 8007276:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
        accum += *(Cs++) * STMpil_DW.StateSpace_DSTATE[1];
 800727a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800727e:	f103 0208 	add.w	r2, r3, #8
 8007282:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007286:	e9d3 0100 	ldrd	r0, r1, [r3]
 800728a:	4b09      	ldr	r3, [pc, #36]	; (80072b0 <STMpil_step+0xcb0>)
 800728c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007290:	f7f9 f95e 	bl	8000550 <__aeabi_dmul>
 8007294:	4602      	mov	r2, r0
 8007296:	460b      	mov	r3, r1
 8007298:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800729c:	f7f8 ffa2 	bl	80001e4 <__adddf3>
 80072a0:	4602      	mov	r2, r0
 80072a2:	460b      	mov	r3, r1
 80072a4:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
        accum += *(Ds++) * STMpil_P.SwitchCurrents_Value[0];
 80072a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80072ac:	e008      	b.n	80072c0 <STMpil_step+0xcc0>
 80072ae:	bf00      	nop
 80072b0:	20000538 	.word	0x20000538
 80072b4:	20000010 	.word	0x20000010
 80072b8:	200004f8 	.word	0x200004f8
 80072bc:	20000618 	.word	0x20000618
 80072c0:	f103 0208 	add.w	r2, r3, #8
 80072c4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80072c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80072cc:	4b83      	ldr	r3, [pc, #524]	; (80074dc <STMpil_step+0xedc>)
 80072ce:	e9d3 2352 	ldrd	r2, r3, [r3, #328]	; 0x148
 80072d2:	f7f9 f93d 	bl	8000550 <__aeabi_dmul>
 80072d6:	4602      	mov	r2, r0
 80072d8:	460b      	mov	r3, r1
 80072da:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 80072de:	f7f8 ff81 	bl	80001e4 <__adddf3>
 80072e2:	4602      	mov	r2, r0
 80072e4:	460b      	mov	r3, r1
 80072e6:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
        accum += *(Ds++) * STMpil_P.SwitchCurrents_Value[1];
 80072ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80072ee:	f103 0208 	add.w	r2, r3, #8
 80072f2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80072f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80072fa:	4b78      	ldr	r3, [pc, #480]	; (80074dc <STMpil_step+0xedc>)
 80072fc:	e9d3 2354 	ldrd	r2, r3, [r3, #336]	; 0x150
 8007300:	f7f9 f926 	bl	8000550 <__aeabi_dmul>
 8007304:	4602      	mov	r2, r0
 8007306:	460b      	mov	r3, r1
 8007308:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800730c:	f7f8 ff6a 	bl	80001e4 <__adddf3>
 8007310:	4602      	mov	r2, r0
 8007312:	460b      	mov	r3, r1
 8007314:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
        accum += *(Ds++) * STMpil_B.Switch2;
 8007318:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800731c:	f103 0208 	add.w	r2, r3, #8
 8007320:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8007324:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007328:	4b6d      	ldr	r3, [pc, #436]	; (80074e0 <STMpil_step+0xee0>)
 800732a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800732e:	f7f9 f90f 	bl	8000550 <__aeabi_dmul>
 8007332:	4602      	mov	r2, r0
 8007334:	460b      	mov	r3, r1
 8007336:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800733a:	f7f8 ff53 	bl	80001e4 <__adddf3>
 800733e:	4602      	mov	r2, r0
 8007340:	460b      	mov	r3, r1
 8007342:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
        accum += *(Ds++) * STMpil_U.In1;
 8007346:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800734a:	f103 0208 	add.w	r2, r3, #8
 800734e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8007352:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007356:	4b63      	ldr	r3, [pc, #396]	; (80074e4 <STMpil_step+0xee4>)
 8007358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800735c:	f7f9 f8f8 	bl	8000550 <__aeabi_dmul>
 8007360:	4602      	mov	r2, r0
 8007362:	460b      	mov	r3, r1
 8007364:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8007368:	f7f8 ff3c 	bl	80001e4 <__adddf3>
 800736c:	4602      	mov	r2, r0
 800736e:	460b      	mov	r3, r1
 8007370:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
        STMpil_B.StateSpace_o1[2] = accum;
 8007374:	495a      	ldr	r1, [pc, #360]	; (80074e0 <STMpil_step+0xee0>)
 8007376:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800737a:	e9c1 2306 	strd	r2, r3, [r1, #24]
        swChanged = 0;
 800737e:	2300      	movs	r3, #0
 8007380:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

        /* Ideal switch */
        newState = gState[0] > 0 ? 1 : 0;
 8007384:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	2b00      	cmp	r3, #0
 800738c:	bfcc      	ite	gt
 800738e:	2301      	movgt	r3, #1
 8007390:	2300      	movle	r3, #0
 8007392:	b2db      	uxtb	r3, r3
 8007394:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        swChanged = ((SwitchChange[0] = newState - switch_status[0]) != 0) ? 1 :
 8007398:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80073a2:	1ad2      	subs	r2, r2, r3
 80073a4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80073a8:	601a      	str	r2, [r3, #0]
 80073aa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d102      	bne.n	80073ba <STMpil_step+0xdba>
 80073b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073b8:	e000      	b.n	80073bc <STMpil_step+0xdbc>
 80073ba:	2301      	movs	r3, #1
 80073bc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
          swChanged;
        switch_status[0] = newState;   /* Keep new state */
 80073c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80073c4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80073c8:	601a      	str	r2, [r3, #0]

        /* MOSFETs or IGBT/Diode pairs */
        newState = ((STMpil_B.StateSpace_o1[1] > 0.0) && (gState[1] > 0)) ||
 80073ca:	4b45      	ldr	r3, [pc, #276]	; (80074e0 <STMpil_step+0xee0>)
 80073cc:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80073d0:	2301      	movs	r3, #1
 80073d2:	461c      	mov	r4, r3
 80073d4:	f04f 0200 	mov.w	r2, #0
 80073d8:	f04f 0300 	mov.w	r3, #0
 80073dc:	f7f9 fb48 	bl	8000a70 <__aeabi_dcmpgt>
 80073e0:	4603      	mov	r3, r0
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d101      	bne.n	80073ea <STMpil_step+0xdea>
 80073e6:	2300      	movs	r3, #0
 80073e8:	461c      	mov	r4, r3
 80073ea:	b2e3      	uxtb	r3, r4
 80073ec:	f083 0301 	eor.w	r3, r3, #1
 80073f0:	b2db      	uxtb	r3, r3
          (STMpil_B.StateSpace_o1[1] < 0.0) ? 1 : (((STMpil_B.StateSpace_o1[1] >
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d105      	bne.n	8007402 <STMpil_step+0xe02>
        newState = ((STMpil_B.StateSpace_o1[1] > 0.0) && (gState[1] > 0)) ||
 80073f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80073fa:	3304      	adds	r3, #4
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	dc38      	bgt.n	8007474 <STMpil_step+0xe74>
          (STMpil_B.StateSpace_o1[1] < 0.0) ? 1 : (((STMpil_B.StateSpace_o1[1] >
 8007402:	4b37      	ldr	r3, [pc, #220]	; (80074e0 <STMpil_step+0xee0>)
 8007404:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8007408:	2301      	movs	r3, #1
 800740a:	461c      	mov	r4, r3
 800740c:	f04f 0200 	mov.w	r2, #0
 8007410:	f04f 0300 	mov.w	r3, #0
 8007414:	f7f9 fb0e 	bl	8000a34 <__aeabi_dcmplt>
 8007418:	4603      	mov	r3, r0
 800741a:	2b00      	cmp	r3, #0
 800741c:	d101      	bne.n	8007422 <STMpil_step+0xe22>
 800741e:	2300      	movs	r3, #0
 8007420:	461c      	mov	r4, r3
 8007422:	b2e3      	uxtb	r3, r4
 8007424:	f083 0301 	eor.w	r3, r3, #1
 8007428:	b2db      	uxtb	r3, r3
        newState = ((STMpil_B.StateSpace_o1[1] > 0.0) && (gState[1] > 0)) ||
 800742a:	2b00      	cmp	r3, #0
 800742c:	d022      	beq.n	8007474 <STMpil_step+0xe74>
          (STMpil_B.StateSpace_o1[1] < 0.0) ? 1 : (((STMpil_B.StateSpace_o1[1] >
 800742e:	4b2c      	ldr	r3, [pc, #176]	; (80074e0 <STMpil_step+0xee0>)
 8007430:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8007434:	2301      	movs	r3, #1
 8007436:	461c      	mov	r4, r3
 8007438:	f04f 0200 	mov.w	r2, #0
 800743c:	f04f 0300 	mov.w	r3, #0
 8007440:	f7f9 fb16 	bl	8000a70 <__aeabi_dcmpgt>
 8007444:	4603      	mov	r3, r0
 8007446:	2b00      	cmp	r3, #0
 8007448:	d101      	bne.n	800744e <STMpil_step+0xe4e>
 800744a:	2300      	movs	r3, #0
 800744c:	461c      	mov	r4, r3
 800744e:	b2e3      	uxtb	r3, r4
 8007450:	f083 0301 	eor.w	r3, r3, #1
 8007454:	b2db      	uxtb	r3, r3
          0.0) && gState[1] == 0) ? 0 : switch_status[1]);
 8007456:	2b00      	cmp	r3, #0
 8007458:	d105      	bne.n	8007466 <STMpil_step+0xe66>
 800745a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800745e:	3304      	adds	r3, #4
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d004      	beq.n	8007470 <STMpil_step+0xe70>
 8007466:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800746a:	3304      	adds	r3, #4
 800746c:	681b      	ldr	r3, [r3, #0]
          (STMpil_B.StateSpace_o1[1] < 0.0) ? 1 : (((STMpil_B.StateSpace_o1[1] >
 800746e:	e002      	b.n	8007476 <STMpil_step+0xe76>
          0.0) && gState[1] == 0) ? 0 : switch_status[1]);
 8007470:	2300      	movs	r3, #0
          (STMpil_B.StateSpace_o1[1] < 0.0) ? 1 : (((STMpil_B.StateSpace_o1[1] >
 8007472:	e000      	b.n	8007476 <STMpil_step+0xe76>
 8007474:	2301      	movs	r3, #1
        newState = ((STMpil_B.StateSpace_o1[1] > 0.0) && (gState[1] > 0)) ||
 8007476:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        swChanged = ((SwitchChange[1] = newState - switch_status[1]) != 0) ? 1 :
 800747a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800747e:	3304      	adds	r3, #4
 8007480:	681a      	ldr	r2, [r3, #0]
 8007482:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007486:	3304      	adds	r3, #4
 8007488:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800748c:	1a8a      	subs	r2, r1, r2
 800748e:	601a      	str	r2, [r3, #0]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d102      	bne.n	800749c <STMpil_step+0xe9c>
 8007496:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800749a:	e000      	b.n	800749e <STMpil_step+0xe9e>
 800749c:	2301      	movs	r3, #1
 800749e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
          swChanged;
        switch_status[1] = newState;   /* Keep new state */
 80074a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80074a6:	3304      	adds	r3, #4
 80074a8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80074ac:	601a      	str	r2, [r3, #0]

      /*
       * Compute new As, Bs, Cs and Ds matrixes:
       * --------------------------------------
       */
      if (swChanged) {
 80074ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	f000 84ba 	beq.w	8007e2c <STMpil_step+0x182c>
        real_T *As = (real_T*)STMpil_DW.StateSpace_PWORK.AS;
 80074b8:	4b0b      	ldr	r3, [pc, #44]	; (80074e8 <STMpil_step+0xee8>)
 80074ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        real_T *Cs = (real_T*)STMpil_DW.StateSpace_PWORK.CS;
 80074c0:	4b09      	ldr	r3, [pc, #36]	; (80074e8 <STMpil_step+0xee8>)
 80074c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074c4:	67fb      	str	r3, [r7, #124]	; 0x7c
        real_T *Bs = (real_T*)STMpil_DW.StateSpace_PWORK.BS;
 80074c6:	4b08      	ldr	r3, [pc, #32]	; (80074e8 <STMpil_step+0xee8>)
 80074c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074ca:	67bb      	str	r3, [r7, #120]	; 0x78
        real_T *Ds = (real_T*)STMpil_DW.StateSpace_PWORK.DS;
 80074cc:	4b06      	ldr	r3, [pc, #24]	; (80074e8 <STMpil_step+0xee8>)
 80074ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074d0:	677b      	str	r3, [r7, #116]	; 0x74
        real_T a1;

        {
          int_T i1;
          for (i1=0; i1 < 2; i1++) {
 80074d2:	2300      	movs	r3, #0
 80074d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80074d8:	f000 bca3 	b.w	8007e22 <STMpil_step+0x1822>
 80074dc:	20000010 	.word	0x20000010
 80074e0:	200004f8 	.word	0x200004f8
 80074e4:	20000618 	.word	0x20000618
 80074e8:	20000538 	.word	0x20000538
            if (SwitchChange[i1] != 0) {
 80074ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80074f0:	009b      	lsls	r3, r3, #2
 80074f2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80074f6:	4413      	add	r3, r2
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	f000 848c 	beq.w	8007e18 <STMpil_step+0x1818>
              a1 = 1000.0*SwitchChange[i1];
 8007500:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007504:	009b      	lsls	r3, r3, #2
 8007506:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800750a:	4413      	add	r3, r2
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4618      	mov	r0, r3
 8007510:	f7f8 ffb4 	bl	800047c <__aeabi_i2d>
 8007514:	f04f 0200 	mov.w	r2, #0
 8007518:	4bbe      	ldr	r3, [pc, #760]	; (8007814 <STMpil_step+0x1214>)
 800751a:	f7f9 f819 	bl	8000550 <__aeabi_dmul>
 800751e:	4602      	mov	r2, r0
 8007520:	460b      	mov	r3, r1
 8007522:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
              temp = 1/(1-Ds[i1*5]*a1);
 8007526:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800752a:	4613      	mov	r3, r2
 800752c:	009b      	lsls	r3, r3, #2
 800752e:	4413      	add	r3, r2
 8007530:	00db      	lsls	r3, r3, #3
 8007532:	461a      	mov	r2, r3
 8007534:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007536:	4413      	add	r3, r2
 8007538:	e9d3 0100 	ldrd	r0, r1, [r3]
 800753c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8007540:	f7f9 f806 	bl	8000550 <__aeabi_dmul>
 8007544:	4602      	mov	r2, r0
 8007546:	460b      	mov	r3, r1
 8007548:	f04f 0000 	mov.w	r0, #0
 800754c:	49b2      	ldr	r1, [pc, #712]	; (8007818 <STMpil_step+0x1218>)
 800754e:	f7f8 fe47 	bl	80001e0 <__aeabi_dsub>
 8007552:	4602      	mov	r2, r0
 8007554:	460b      	mov	r3, r1
 8007556:	f04f 0000 	mov.w	r0, #0
 800755a:	49af      	ldr	r1, [pc, #700]	; (8007818 <STMpil_step+0x1218>)
 800755c:	f7f9 f922 	bl	80007a4 <__aeabi_ddiv>
 8007560:	4602      	mov	r2, r0
 8007562:	460b      	mov	r3, r1
 8007564:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
              DxCol[0]= Ds[0 + i1]*temp*a1;
 8007568:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800756c:	00db      	lsls	r3, r3, #3
 800756e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007570:	4413      	add	r3, r2
 8007572:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007576:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800757a:	f7f8 ffe9 	bl	8000550 <__aeabi_dmul>
 800757e:	4602      	mov	r2, r0
 8007580:	460b      	mov	r3, r1
 8007582:	4610      	mov	r0, r2
 8007584:	4619      	mov	r1, r3
 8007586:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800758a:	f7f8 ffe1 	bl	8000550 <__aeabi_dmul>
 800758e:	4602      	mov	r2, r0
 8007590:	460b      	mov	r3, r1
 8007592:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8007596:	e9c1 2300 	strd	r2, r3, [r1]
              DxCol[1]= Ds[4 + i1]*temp*a1;
 800759a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800759e:	3304      	adds	r3, #4
 80075a0:	00db      	lsls	r3, r3, #3
 80075a2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80075a4:	4413      	add	r3, r2
 80075a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80075aa:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80075ae:	f7f8 ffcf 	bl	8000550 <__aeabi_dmul>
 80075b2:	4602      	mov	r2, r0
 80075b4:	460b      	mov	r3, r1
 80075b6:	4610      	mov	r0, r2
 80075b8:	4619      	mov	r1, r3
 80075ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80075be:	f103 0408 	add.w	r4, r3, #8
 80075c2:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80075c6:	f7f8 ffc3 	bl	8000550 <__aeabi_dmul>
 80075ca:	4602      	mov	r2, r0
 80075cc:	460b      	mov	r3, r1
 80075ce:	e9c4 2300 	strd	r2, r3, [r4]
              DxCol[2]= Ds[8 + i1]*temp*a1;
 80075d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80075d6:	3308      	adds	r3, #8
 80075d8:	00db      	lsls	r3, r3, #3
 80075da:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80075dc:	4413      	add	r3, r2
 80075de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80075e2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80075e6:	f7f8 ffb3 	bl	8000550 <__aeabi_dmul>
 80075ea:	4602      	mov	r2, r0
 80075ec:	460b      	mov	r3, r1
 80075ee:	4610      	mov	r0, r2
 80075f0:	4619      	mov	r1, r3
 80075f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80075f6:	f103 0410 	add.w	r4, r3, #16
 80075fa:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80075fe:	f7f8 ffa7 	bl	8000550 <__aeabi_dmul>
 8007602:	4602      	mov	r2, r0
 8007604:	460b      	mov	r3, r1
 8007606:	e9c4 2300 	strd	r2, r3, [r4]
              DxCol[i1] = temp;
 800760a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800760e:	00db      	lsls	r3, r3, #3
 8007610:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007614:	18d1      	adds	r1, r2, r3
 8007616:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800761a:	e9c1 2300 	strd	r2, r3, [r1]
              BDcol[0]= Bs[0 + i1]*a1;
 800761e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007622:	00db      	lsls	r3, r3, #3
 8007624:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007626:	4413      	add	r3, r2
 8007628:	e9d3 0100 	ldrd	r0, r1, [r3]
 800762c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8007630:	f7f8 ff8e 	bl	8000550 <__aeabi_dmul>
 8007634:	4602      	mov	r2, r0
 8007636:	460b      	mov	r3, r1
 8007638:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 800763c:	e9c1 2300 	strd	r2, r3, [r1]
              BDcol[1]= Bs[4 + i1]*a1;
 8007640:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007644:	3304      	adds	r3, #4
 8007646:	00db      	lsls	r3, r3, #3
 8007648:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800764a:	4413      	add	r3, r2
 800764c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007650:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007654:	f103 0408 	add.w	r4, r3, #8
 8007658:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800765c:	f7f8 ff78 	bl	8000550 <__aeabi_dmul>
 8007660:	4602      	mov	r2, r0
 8007662:	460b      	mov	r3, r1
 8007664:	e9c4 2300 	strd	r2, r3, [r4]

              /* Copy row nSw of Cs into tmp1 and zero it out in Cs */
              memcpy(tmp1, &Cs[i1 * 2], 2 * sizeof(real_T));
 8007668:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800766c:	011b      	lsls	r3, r3, #4
 800766e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007670:	4413      	add	r3, r2
 8007672:	2210      	movs	r2, #16
 8007674:	4619      	mov	r1, r3
 8007676:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800767a:	f004 f809 	bl	800b690 <memcpy>
              memset(&Cs[i1 * 2], '\0', 2 * sizeof(real_T));
 800767e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007682:	011b      	lsls	r3, r3, #4
 8007684:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007686:	4413      	add	r3, r2
 8007688:	2210      	movs	r2, #16
 800768a:	2100      	movs	r1, #0
 800768c:	4618      	mov	r0, r3
 800768e:	f004 f80d 	bl	800b6ac <memset>

              /* Copy row nSw of Ds into tmp2 and zero it out in Ds */
              memcpy(tmp2, &Ds[i1 * 4], 4 * sizeof(real_T));
 8007692:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007696:	015b      	lsls	r3, r3, #5
 8007698:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800769a:	4413      	add	r3, r2
 800769c:	2220      	movs	r2, #32
 800769e:	4619      	mov	r1, r3
 80076a0:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 80076a4:	f003 fff4 	bl	800b690 <memcpy>
              memset(&Ds[i1 * 4], '\0', 4 * sizeof(real_T));
 80076a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80076ac:	015b      	lsls	r3, r3, #5
 80076ae:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80076b0:	4413      	add	r3, r2
 80076b2:	2220      	movs	r2, #32
 80076b4:	2100      	movs	r1, #0
 80076b6:	4618      	mov	r0, r3
 80076b8:	f003 fff8 	bl	800b6ac <memset>

              /* Cs = Cs + DxCol * tmp1, Ds = Ds + DxCol * tmp2 *******************/
              a1 = DxCol[0];
 80076bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80076c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076c4:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
              Cs[0 + 0] += a1 * tmp1[0];
 80076c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80076ca:	e9d3 4500 	ldrd	r4, r5, [r3]
 80076ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80076d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80076d6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80076da:	f7f8 ff39 	bl	8000550 <__aeabi_dmul>
 80076de:	4602      	mov	r2, r0
 80076e0:	460b      	mov	r3, r1
 80076e2:	4620      	mov	r0, r4
 80076e4:	4629      	mov	r1, r5
 80076e6:	f7f8 fd7d 	bl	80001e4 <__adddf3>
 80076ea:	4602      	mov	r2, r0
 80076ec:	460b      	mov	r3, r1
 80076ee:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80076f0:	e9c1 2300 	strd	r2, r3, [r1]
              Cs[0 + 1] += a1 * tmp1[1];
 80076f4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80076f6:	3308      	adds	r3, #8
 80076f8:	e9d3 4500 	ldrd	r4, r5, [r3]
 80076fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007700:	3308      	adds	r3, #8
 8007702:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007706:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800770a:	f7f8 ff21 	bl	8000550 <__aeabi_dmul>
 800770e:	4602      	mov	r2, r0
 8007710:	460b      	mov	r3, r1
 8007712:	4610      	mov	r0, r2
 8007714:	4619      	mov	r1, r3
 8007716:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007718:	f103 0608 	add.w	r6, r3, #8
 800771c:	4602      	mov	r2, r0
 800771e:	460b      	mov	r3, r1
 8007720:	4620      	mov	r0, r4
 8007722:	4629      	mov	r1, r5
 8007724:	f7f8 fd5e 	bl	80001e4 <__adddf3>
 8007728:	4602      	mov	r2, r0
 800772a:	460b      	mov	r3, r1
 800772c:	e9c6 2300 	strd	r2, r3, [r6]
              Ds[0 + 0] += a1 * tmp2[0];
 8007730:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007732:	e9d3 4500 	ldrd	r4, r5, [r3]
 8007736:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800773a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800773e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8007742:	f7f8 ff05 	bl	8000550 <__aeabi_dmul>
 8007746:	4602      	mov	r2, r0
 8007748:	460b      	mov	r3, r1
 800774a:	4620      	mov	r0, r4
 800774c:	4629      	mov	r1, r5
 800774e:	f7f8 fd49 	bl	80001e4 <__adddf3>
 8007752:	4602      	mov	r2, r0
 8007754:	460b      	mov	r3, r1
 8007756:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8007758:	e9c1 2300 	strd	r2, r3, [r1]
              Ds[0 + 1] += a1 * tmp2[1];
 800775c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800775e:	3308      	adds	r3, #8
 8007760:	e9d3 4500 	ldrd	r4, r5, [r3]
 8007764:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007768:	3308      	adds	r3, #8
 800776a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800776e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8007772:	f7f8 feed 	bl	8000550 <__aeabi_dmul>
 8007776:	4602      	mov	r2, r0
 8007778:	460b      	mov	r3, r1
 800777a:	4610      	mov	r0, r2
 800777c:	4619      	mov	r1, r3
 800777e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007780:	f103 0608 	add.w	r6, r3, #8
 8007784:	4602      	mov	r2, r0
 8007786:	460b      	mov	r3, r1
 8007788:	4620      	mov	r0, r4
 800778a:	4629      	mov	r1, r5
 800778c:	f7f8 fd2a 	bl	80001e4 <__adddf3>
 8007790:	4602      	mov	r2, r0
 8007792:	460b      	mov	r3, r1
 8007794:	e9c6 2300 	strd	r2, r3, [r6]
              Ds[0 + 2] += a1 * tmp2[2];
 8007798:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800779a:	3310      	adds	r3, #16
 800779c:	e9d3 4500 	ldrd	r4, r5, [r3]
 80077a0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80077a4:	3310      	adds	r3, #16
 80077a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80077aa:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80077ae:	f7f8 fecf 	bl	8000550 <__aeabi_dmul>
 80077b2:	4602      	mov	r2, r0
 80077b4:	460b      	mov	r3, r1
 80077b6:	4610      	mov	r0, r2
 80077b8:	4619      	mov	r1, r3
 80077ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80077bc:	f103 0610 	add.w	r6, r3, #16
 80077c0:	4602      	mov	r2, r0
 80077c2:	460b      	mov	r3, r1
 80077c4:	4620      	mov	r0, r4
 80077c6:	4629      	mov	r1, r5
 80077c8:	f7f8 fd0c 	bl	80001e4 <__adddf3>
 80077cc:	4602      	mov	r2, r0
 80077ce:	460b      	mov	r3, r1
 80077d0:	e9c6 2300 	strd	r2, r3, [r6]
              Ds[0 + 3] += a1 * tmp2[3];
 80077d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80077d6:	3318      	adds	r3, #24
 80077d8:	e9d3 4500 	ldrd	r4, r5, [r3]
 80077dc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80077e0:	3318      	adds	r3, #24
 80077e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80077e6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80077ea:	f7f8 feb1 	bl	8000550 <__aeabi_dmul>
 80077ee:	4602      	mov	r2, r0
 80077f0:	460b      	mov	r3, r1
 80077f2:	4610      	mov	r0, r2
 80077f4:	4619      	mov	r1, r3
 80077f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80077f8:	f103 0618 	add.w	r6, r3, #24
 80077fc:	4602      	mov	r2, r0
 80077fe:	460b      	mov	r3, r1
 8007800:	4620      	mov	r0, r4
 8007802:	4629      	mov	r1, r5
 8007804:	f7f8 fcee 	bl	80001e4 <__adddf3>
 8007808:	4602      	mov	r2, r0
 800780a:	460b      	mov	r3, r1
 800780c:	e9c6 2300 	strd	r2, r3, [r6]
 8007810:	e004      	b.n	800781c <STMpil_step+0x121c>
 8007812:	bf00      	nop
 8007814:	408f4000 	.word	0x408f4000
 8007818:	3ff00000 	.word	0x3ff00000
              a1 = DxCol[1];
 800781c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007820:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8007824:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
              Cs[2 + 0] += a1 * tmp1[0];
 8007828:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800782a:	3310      	adds	r3, #16
 800782c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8007830:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007834:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007838:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800783c:	f7f8 fe88 	bl	8000550 <__aeabi_dmul>
 8007840:	4602      	mov	r2, r0
 8007842:	460b      	mov	r3, r1
 8007844:	4610      	mov	r0, r2
 8007846:	4619      	mov	r1, r3
 8007848:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800784a:	f103 0610 	add.w	r6, r3, #16
 800784e:	4602      	mov	r2, r0
 8007850:	460b      	mov	r3, r1
 8007852:	4620      	mov	r0, r4
 8007854:	4629      	mov	r1, r5
 8007856:	f7f8 fcc5 	bl	80001e4 <__adddf3>
 800785a:	4602      	mov	r2, r0
 800785c:	460b      	mov	r3, r1
 800785e:	e9c6 2300 	strd	r2, r3, [r6]
              Cs[2 + 1] += a1 * tmp1[1];
 8007862:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007864:	3318      	adds	r3, #24
 8007866:	e9d3 4500 	ldrd	r4, r5, [r3]
 800786a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800786e:	3308      	adds	r3, #8
 8007870:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007874:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8007878:	f7f8 fe6a 	bl	8000550 <__aeabi_dmul>
 800787c:	4602      	mov	r2, r0
 800787e:	460b      	mov	r3, r1
 8007880:	4610      	mov	r0, r2
 8007882:	4619      	mov	r1, r3
 8007884:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007886:	f103 0618 	add.w	r6, r3, #24
 800788a:	4602      	mov	r2, r0
 800788c:	460b      	mov	r3, r1
 800788e:	4620      	mov	r0, r4
 8007890:	4629      	mov	r1, r5
 8007892:	f7f8 fca7 	bl	80001e4 <__adddf3>
 8007896:	4602      	mov	r2, r0
 8007898:	460b      	mov	r3, r1
 800789a:	e9c6 2300 	strd	r2, r3, [r6]
              Ds[4 + 0] += a1 * tmp2[0];
 800789e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80078a0:	3320      	adds	r3, #32
 80078a2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80078a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80078aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80078ae:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80078b2:	f7f8 fe4d 	bl	8000550 <__aeabi_dmul>
 80078b6:	4602      	mov	r2, r0
 80078b8:	460b      	mov	r3, r1
 80078ba:	4610      	mov	r0, r2
 80078bc:	4619      	mov	r1, r3
 80078be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80078c0:	f103 0620 	add.w	r6, r3, #32
 80078c4:	4602      	mov	r2, r0
 80078c6:	460b      	mov	r3, r1
 80078c8:	4620      	mov	r0, r4
 80078ca:	4629      	mov	r1, r5
 80078cc:	f7f8 fc8a 	bl	80001e4 <__adddf3>
 80078d0:	4602      	mov	r2, r0
 80078d2:	460b      	mov	r3, r1
 80078d4:	e9c6 2300 	strd	r2, r3, [r6]
              Ds[4 + 1] += a1 * tmp2[1];
 80078d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80078da:	3328      	adds	r3, #40	; 0x28
 80078dc:	e9d3 4500 	ldrd	r4, r5, [r3]
 80078e0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80078e4:	3308      	adds	r3, #8
 80078e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80078ea:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80078ee:	f7f8 fe2f 	bl	8000550 <__aeabi_dmul>
 80078f2:	4602      	mov	r2, r0
 80078f4:	460b      	mov	r3, r1
 80078f6:	4610      	mov	r0, r2
 80078f8:	4619      	mov	r1, r3
 80078fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80078fc:	f103 0628 	add.w	r6, r3, #40	; 0x28
 8007900:	4602      	mov	r2, r0
 8007902:	460b      	mov	r3, r1
 8007904:	4620      	mov	r0, r4
 8007906:	4629      	mov	r1, r5
 8007908:	f7f8 fc6c 	bl	80001e4 <__adddf3>
 800790c:	4602      	mov	r2, r0
 800790e:	460b      	mov	r3, r1
 8007910:	e9c6 2300 	strd	r2, r3, [r6]
              Ds[4 + 2] += a1 * tmp2[2];
 8007914:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007916:	3330      	adds	r3, #48	; 0x30
 8007918:	e9d3 4500 	ldrd	r4, r5, [r3]
 800791c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007920:	3310      	adds	r3, #16
 8007922:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007926:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800792a:	f7f8 fe11 	bl	8000550 <__aeabi_dmul>
 800792e:	4602      	mov	r2, r0
 8007930:	460b      	mov	r3, r1
 8007932:	4610      	mov	r0, r2
 8007934:	4619      	mov	r1, r3
 8007936:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007938:	f103 0630 	add.w	r6, r3, #48	; 0x30
 800793c:	4602      	mov	r2, r0
 800793e:	460b      	mov	r3, r1
 8007940:	4620      	mov	r0, r4
 8007942:	4629      	mov	r1, r5
 8007944:	f7f8 fc4e 	bl	80001e4 <__adddf3>
 8007948:	4602      	mov	r2, r0
 800794a:	460b      	mov	r3, r1
 800794c:	e9c6 2300 	strd	r2, r3, [r6]
              Ds[4 + 3] += a1 * tmp2[3];
 8007950:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007952:	3338      	adds	r3, #56	; 0x38
 8007954:	e9d3 4500 	ldrd	r4, r5, [r3]
 8007958:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800795c:	3318      	adds	r3, #24
 800795e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007962:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8007966:	f7f8 fdf3 	bl	8000550 <__aeabi_dmul>
 800796a:	4602      	mov	r2, r0
 800796c:	460b      	mov	r3, r1
 800796e:	4610      	mov	r0, r2
 8007970:	4619      	mov	r1, r3
 8007972:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007974:	f103 0638 	add.w	r6, r3, #56	; 0x38
 8007978:	4602      	mov	r2, r0
 800797a:	460b      	mov	r3, r1
 800797c:	4620      	mov	r0, r4
 800797e:	4629      	mov	r1, r5
 8007980:	f7f8 fc30 	bl	80001e4 <__adddf3>
 8007984:	4602      	mov	r2, r0
 8007986:	460b      	mov	r3, r1
 8007988:	e9c6 2300 	strd	r2, r3, [r6]
              a1 = DxCol[2];
 800798c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007990:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8007994:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
              Cs[4 + 0] += a1 * tmp1[0];
 8007998:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800799a:	3320      	adds	r3, #32
 800799c:	e9d3 4500 	ldrd	r4, r5, [r3]
 80079a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80079a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80079a8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80079ac:	f7f8 fdd0 	bl	8000550 <__aeabi_dmul>
 80079b0:	4602      	mov	r2, r0
 80079b2:	460b      	mov	r3, r1
 80079b4:	4610      	mov	r0, r2
 80079b6:	4619      	mov	r1, r3
 80079b8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80079ba:	f103 0620 	add.w	r6, r3, #32
 80079be:	4602      	mov	r2, r0
 80079c0:	460b      	mov	r3, r1
 80079c2:	4620      	mov	r0, r4
 80079c4:	4629      	mov	r1, r5
 80079c6:	f7f8 fc0d 	bl	80001e4 <__adddf3>
 80079ca:	4602      	mov	r2, r0
 80079cc:	460b      	mov	r3, r1
 80079ce:	e9c6 2300 	strd	r2, r3, [r6]
              Cs[4 + 1] += a1 * tmp1[1];
 80079d2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80079d4:	3328      	adds	r3, #40	; 0x28
 80079d6:	e9d3 4500 	ldrd	r4, r5, [r3]
 80079da:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80079de:	3308      	adds	r3, #8
 80079e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80079e4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80079e8:	f7f8 fdb2 	bl	8000550 <__aeabi_dmul>
 80079ec:	4602      	mov	r2, r0
 80079ee:	460b      	mov	r3, r1
 80079f0:	4610      	mov	r0, r2
 80079f2:	4619      	mov	r1, r3
 80079f4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80079f6:	f103 0628 	add.w	r6, r3, #40	; 0x28
 80079fa:	4602      	mov	r2, r0
 80079fc:	460b      	mov	r3, r1
 80079fe:	4620      	mov	r0, r4
 8007a00:	4629      	mov	r1, r5
 8007a02:	f7f8 fbef 	bl	80001e4 <__adddf3>
 8007a06:	4602      	mov	r2, r0
 8007a08:	460b      	mov	r3, r1
 8007a0a:	e9c6 2300 	strd	r2, r3, [r6]
              Ds[8 + 0] += a1 * tmp2[0];
 8007a0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a10:	3340      	adds	r3, #64	; 0x40
 8007a12:	e9d3 4500 	ldrd	r4, r5, [r3]
 8007a16:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007a1a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007a1e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8007a22:	f7f8 fd95 	bl	8000550 <__aeabi_dmul>
 8007a26:	4602      	mov	r2, r0
 8007a28:	460b      	mov	r3, r1
 8007a2a:	4610      	mov	r0, r2
 8007a2c:	4619      	mov	r1, r3
 8007a2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a30:	f103 0640 	add.w	r6, r3, #64	; 0x40
 8007a34:	4602      	mov	r2, r0
 8007a36:	460b      	mov	r3, r1
 8007a38:	4620      	mov	r0, r4
 8007a3a:	4629      	mov	r1, r5
 8007a3c:	f7f8 fbd2 	bl	80001e4 <__adddf3>
 8007a40:	4602      	mov	r2, r0
 8007a42:	460b      	mov	r3, r1
 8007a44:	e9c6 2300 	strd	r2, r3, [r6]
              Ds[8 + 1] += a1 * tmp2[1];
 8007a48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a4a:	3348      	adds	r3, #72	; 0x48
 8007a4c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8007a50:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007a54:	3308      	adds	r3, #8
 8007a56:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007a5a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8007a5e:	f7f8 fd77 	bl	8000550 <__aeabi_dmul>
 8007a62:	4602      	mov	r2, r0
 8007a64:	460b      	mov	r3, r1
 8007a66:	4610      	mov	r0, r2
 8007a68:	4619      	mov	r1, r3
 8007a6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a6c:	f103 0648 	add.w	r6, r3, #72	; 0x48
 8007a70:	4602      	mov	r2, r0
 8007a72:	460b      	mov	r3, r1
 8007a74:	4620      	mov	r0, r4
 8007a76:	4629      	mov	r1, r5
 8007a78:	f7f8 fbb4 	bl	80001e4 <__adddf3>
 8007a7c:	4602      	mov	r2, r0
 8007a7e:	460b      	mov	r3, r1
 8007a80:	e9c6 2300 	strd	r2, r3, [r6]
              Ds[8 + 2] += a1 * tmp2[2];
 8007a84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a86:	3350      	adds	r3, #80	; 0x50
 8007a88:	e9d3 4500 	ldrd	r4, r5, [r3]
 8007a8c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007a90:	3310      	adds	r3, #16
 8007a92:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007a96:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8007a9a:	f7f8 fd59 	bl	8000550 <__aeabi_dmul>
 8007a9e:	4602      	mov	r2, r0
 8007aa0:	460b      	mov	r3, r1
 8007aa2:	4610      	mov	r0, r2
 8007aa4:	4619      	mov	r1, r3
 8007aa6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007aa8:	f103 0650 	add.w	r6, r3, #80	; 0x50
 8007aac:	4602      	mov	r2, r0
 8007aae:	460b      	mov	r3, r1
 8007ab0:	4620      	mov	r0, r4
 8007ab2:	4629      	mov	r1, r5
 8007ab4:	f7f8 fb96 	bl	80001e4 <__adddf3>
 8007ab8:	4602      	mov	r2, r0
 8007aba:	460b      	mov	r3, r1
 8007abc:	e9c6 2300 	strd	r2, r3, [r6]
              Ds[8 + 3] += a1 * tmp2[3];
 8007ac0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ac2:	3358      	adds	r3, #88	; 0x58
 8007ac4:	e9d3 4500 	ldrd	r4, r5, [r3]
 8007ac8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007acc:	3318      	adds	r3, #24
 8007ace:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007ad2:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8007ad6:	f7f8 fd3b 	bl	8000550 <__aeabi_dmul>
 8007ada:	4602      	mov	r2, r0
 8007adc:	460b      	mov	r3, r1
 8007ade:	4610      	mov	r0, r2
 8007ae0:	4619      	mov	r1, r3
 8007ae2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ae4:	f103 0658 	add.w	r6, r3, #88	; 0x58
 8007ae8:	4602      	mov	r2, r0
 8007aea:	460b      	mov	r3, r1
 8007aec:	4620      	mov	r0, r4
 8007aee:	4629      	mov	r1, r5
 8007af0:	f7f8 fb78 	bl	80001e4 <__adddf3>
 8007af4:	4602      	mov	r2, r0
 8007af6:	460b      	mov	r3, r1
 8007af8:	e9c6 2300 	strd	r2, r3, [r6]

              /* As = As + BdCol*Cs(nSw,:), Bs = Bs + BdCol*Ds(nSw,:) *************/
              a1 = BDcol[0];
 8007afc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b04:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
              As[0 + 0] += a1 * Cs[i1 * 2 + 0];
 8007b08:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007b0c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8007b10:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007b14:	011b      	lsls	r3, r3, #4
 8007b16:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007b18:	4413      	add	r3, r2
 8007b1a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007b1e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8007b22:	f7f8 fd15 	bl	8000550 <__aeabi_dmul>
 8007b26:	4602      	mov	r2, r0
 8007b28:	460b      	mov	r3, r1
 8007b2a:	4620      	mov	r0, r4
 8007b2c:	4629      	mov	r1, r5
 8007b2e:	f7f8 fb59 	bl	80001e4 <__adddf3>
 8007b32:	4602      	mov	r2, r0
 8007b34:	460b      	mov	r3, r1
 8007b36:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8007b3a:	e9c1 2300 	strd	r2, r3, [r1]
              As[0 + 1] += a1 * Cs[i1 * 2 + 1];
 8007b3e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007b42:	3308      	adds	r3, #8
 8007b44:	e9d3 4500 	ldrd	r4, r5, [r3]
 8007b48:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007b4c:	011b      	lsls	r3, r3, #4
 8007b4e:	3308      	adds	r3, #8
 8007b50:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007b52:	4413      	add	r3, r2
 8007b54:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007b58:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8007b5c:	f7f8 fcf8 	bl	8000550 <__aeabi_dmul>
 8007b60:	4602      	mov	r2, r0
 8007b62:	460b      	mov	r3, r1
 8007b64:	4610      	mov	r0, r2
 8007b66:	4619      	mov	r1, r3
 8007b68:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007b6c:	f103 0608 	add.w	r6, r3, #8
 8007b70:	4602      	mov	r2, r0
 8007b72:	460b      	mov	r3, r1
 8007b74:	4620      	mov	r0, r4
 8007b76:	4629      	mov	r1, r5
 8007b78:	f7f8 fb34 	bl	80001e4 <__adddf3>
 8007b7c:	4602      	mov	r2, r0
 8007b7e:	460b      	mov	r3, r1
 8007b80:	e9c6 2300 	strd	r2, r3, [r6]
              Bs[0 + 0] += a1 * Ds[i1 * 4 + 0];
 8007b84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b86:	e9d3 4500 	ldrd	r4, r5, [r3]
 8007b8a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007b8e:	015b      	lsls	r3, r3, #5
 8007b90:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007b92:	4413      	add	r3, r2
 8007b94:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007b98:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8007b9c:	f7f8 fcd8 	bl	8000550 <__aeabi_dmul>
 8007ba0:	4602      	mov	r2, r0
 8007ba2:	460b      	mov	r3, r1
 8007ba4:	4620      	mov	r0, r4
 8007ba6:	4629      	mov	r1, r5
 8007ba8:	f7f8 fb1c 	bl	80001e4 <__adddf3>
 8007bac:	4602      	mov	r2, r0
 8007bae:	460b      	mov	r3, r1
 8007bb0:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8007bb2:	e9c1 2300 	strd	r2, r3, [r1]
              Bs[0 + 1] += a1 * Ds[i1 * 4 + 1];
 8007bb6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007bb8:	3308      	adds	r3, #8
 8007bba:	e9d3 4500 	ldrd	r4, r5, [r3]
 8007bbe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007bc2:	015b      	lsls	r3, r3, #5
 8007bc4:	3308      	adds	r3, #8
 8007bc6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007bc8:	4413      	add	r3, r2
 8007bca:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007bce:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8007bd2:	f7f8 fcbd 	bl	8000550 <__aeabi_dmul>
 8007bd6:	4602      	mov	r2, r0
 8007bd8:	460b      	mov	r3, r1
 8007bda:	4610      	mov	r0, r2
 8007bdc:	4619      	mov	r1, r3
 8007bde:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007be0:	f103 0608 	add.w	r6, r3, #8
 8007be4:	4602      	mov	r2, r0
 8007be6:	460b      	mov	r3, r1
 8007be8:	4620      	mov	r0, r4
 8007bea:	4629      	mov	r1, r5
 8007bec:	f7f8 fafa 	bl	80001e4 <__adddf3>
 8007bf0:	4602      	mov	r2, r0
 8007bf2:	460b      	mov	r3, r1
 8007bf4:	e9c6 2300 	strd	r2, r3, [r6]
              Bs[0 + 2] += a1 * Ds[i1 * 4 + 2];
 8007bf8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007bfa:	3310      	adds	r3, #16
 8007bfc:	e9d3 4500 	ldrd	r4, r5, [r3]
 8007c00:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007c04:	015b      	lsls	r3, r3, #5
 8007c06:	3310      	adds	r3, #16
 8007c08:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007c0a:	4413      	add	r3, r2
 8007c0c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007c10:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8007c14:	f7f8 fc9c 	bl	8000550 <__aeabi_dmul>
 8007c18:	4602      	mov	r2, r0
 8007c1a:	460b      	mov	r3, r1
 8007c1c:	4610      	mov	r0, r2
 8007c1e:	4619      	mov	r1, r3
 8007c20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c22:	f103 0610 	add.w	r6, r3, #16
 8007c26:	4602      	mov	r2, r0
 8007c28:	460b      	mov	r3, r1
 8007c2a:	4620      	mov	r0, r4
 8007c2c:	4629      	mov	r1, r5
 8007c2e:	f7f8 fad9 	bl	80001e4 <__adddf3>
 8007c32:	4602      	mov	r2, r0
 8007c34:	460b      	mov	r3, r1
 8007c36:	e9c6 2300 	strd	r2, r3, [r6]
              Bs[0 + 3] += a1 * Ds[i1 * 4 + 3];
 8007c3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c3c:	3318      	adds	r3, #24
 8007c3e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8007c42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007c46:	015b      	lsls	r3, r3, #5
 8007c48:	3318      	adds	r3, #24
 8007c4a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007c4c:	4413      	add	r3, r2
 8007c4e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007c52:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8007c56:	f7f8 fc7b 	bl	8000550 <__aeabi_dmul>
 8007c5a:	4602      	mov	r2, r0
 8007c5c:	460b      	mov	r3, r1
 8007c5e:	4610      	mov	r0, r2
 8007c60:	4619      	mov	r1, r3
 8007c62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c64:	f103 0618 	add.w	r6, r3, #24
 8007c68:	4602      	mov	r2, r0
 8007c6a:	460b      	mov	r3, r1
 8007c6c:	4620      	mov	r0, r4
 8007c6e:	4629      	mov	r1, r5
 8007c70:	f7f8 fab8 	bl	80001e4 <__adddf3>
 8007c74:	4602      	mov	r2, r0
 8007c76:	460b      	mov	r3, r1
 8007c78:	e9c6 2300 	strd	r2, r3, [r6]
              a1 = BDcol[1];
 8007c7c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007c80:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8007c84:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
              As[2 + 0] += a1 * Cs[i1 * 2 + 0];
 8007c88:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007c8c:	3310      	adds	r3, #16
 8007c8e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8007c92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007c96:	011b      	lsls	r3, r3, #4
 8007c98:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007c9a:	4413      	add	r3, r2
 8007c9c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007ca0:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8007ca4:	f7f8 fc54 	bl	8000550 <__aeabi_dmul>
 8007ca8:	4602      	mov	r2, r0
 8007caa:	460b      	mov	r3, r1
 8007cac:	4610      	mov	r0, r2
 8007cae:	4619      	mov	r1, r3
 8007cb0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007cb4:	f103 0610 	add.w	r6, r3, #16
 8007cb8:	4602      	mov	r2, r0
 8007cba:	460b      	mov	r3, r1
 8007cbc:	4620      	mov	r0, r4
 8007cbe:	4629      	mov	r1, r5
 8007cc0:	f7f8 fa90 	bl	80001e4 <__adddf3>
 8007cc4:	4602      	mov	r2, r0
 8007cc6:	460b      	mov	r3, r1
 8007cc8:	e9c6 2300 	strd	r2, r3, [r6]
              As[2 + 1] += a1 * Cs[i1 * 2 + 1];
 8007ccc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007cd0:	3318      	adds	r3, #24
 8007cd2:	e9d3 4500 	ldrd	r4, r5, [r3]
 8007cd6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007cda:	011b      	lsls	r3, r3, #4
 8007cdc:	3308      	adds	r3, #8
 8007cde:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007ce0:	4413      	add	r3, r2
 8007ce2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007ce6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8007cea:	f7f8 fc31 	bl	8000550 <__aeabi_dmul>
 8007cee:	4602      	mov	r2, r0
 8007cf0:	460b      	mov	r3, r1
 8007cf2:	4610      	mov	r0, r2
 8007cf4:	4619      	mov	r1, r3
 8007cf6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007cfa:	f103 0618 	add.w	r6, r3, #24
 8007cfe:	4602      	mov	r2, r0
 8007d00:	460b      	mov	r3, r1
 8007d02:	4620      	mov	r0, r4
 8007d04:	4629      	mov	r1, r5
 8007d06:	f7f8 fa6d 	bl	80001e4 <__adddf3>
 8007d0a:	4602      	mov	r2, r0
 8007d0c:	460b      	mov	r3, r1
 8007d0e:	e9c6 2300 	strd	r2, r3, [r6]
              Bs[4 + 0] += a1 * Ds[i1 * 4 + 0];
 8007d12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d14:	3320      	adds	r3, #32
 8007d16:	e9d3 4500 	ldrd	r4, r5, [r3]
 8007d1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007d1e:	015b      	lsls	r3, r3, #5
 8007d20:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007d22:	4413      	add	r3, r2
 8007d24:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007d28:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8007d2c:	f7f8 fc10 	bl	8000550 <__aeabi_dmul>
 8007d30:	4602      	mov	r2, r0
 8007d32:	460b      	mov	r3, r1
 8007d34:	4610      	mov	r0, r2
 8007d36:	4619      	mov	r1, r3
 8007d38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d3a:	f103 0620 	add.w	r6, r3, #32
 8007d3e:	4602      	mov	r2, r0
 8007d40:	460b      	mov	r3, r1
 8007d42:	4620      	mov	r0, r4
 8007d44:	4629      	mov	r1, r5
 8007d46:	f7f8 fa4d 	bl	80001e4 <__adddf3>
 8007d4a:	4602      	mov	r2, r0
 8007d4c:	460b      	mov	r3, r1
 8007d4e:	e9c6 2300 	strd	r2, r3, [r6]
              Bs[4 + 1] += a1 * Ds[i1 * 4 + 1];
 8007d52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d54:	3328      	adds	r3, #40	; 0x28
 8007d56:	e9d3 4500 	ldrd	r4, r5, [r3]
 8007d5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007d5e:	015b      	lsls	r3, r3, #5
 8007d60:	3308      	adds	r3, #8
 8007d62:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007d64:	4413      	add	r3, r2
 8007d66:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007d6a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8007d6e:	f7f8 fbef 	bl	8000550 <__aeabi_dmul>
 8007d72:	4602      	mov	r2, r0
 8007d74:	460b      	mov	r3, r1
 8007d76:	4610      	mov	r0, r2
 8007d78:	4619      	mov	r1, r3
 8007d7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d7c:	f103 0628 	add.w	r6, r3, #40	; 0x28
 8007d80:	4602      	mov	r2, r0
 8007d82:	460b      	mov	r3, r1
 8007d84:	4620      	mov	r0, r4
 8007d86:	4629      	mov	r1, r5
 8007d88:	f7f8 fa2c 	bl	80001e4 <__adddf3>
 8007d8c:	4602      	mov	r2, r0
 8007d8e:	460b      	mov	r3, r1
 8007d90:	e9c6 2300 	strd	r2, r3, [r6]
              Bs[4 + 2] += a1 * Ds[i1 * 4 + 2];
 8007d94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d96:	3330      	adds	r3, #48	; 0x30
 8007d98:	e9d3 4500 	ldrd	r4, r5, [r3]
 8007d9c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007da0:	015b      	lsls	r3, r3, #5
 8007da2:	3310      	adds	r3, #16
 8007da4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007da6:	4413      	add	r3, r2
 8007da8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007dac:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8007db0:	f7f8 fbce 	bl	8000550 <__aeabi_dmul>
 8007db4:	4602      	mov	r2, r0
 8007db6:	460b      	mov	r3, r1
 8007db8:	4610      	mov	r0, r2
 8007dba:	4619      	mov	r1, r3
 8007dbc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007dbe:	f103 0630 	add.w	r6, r3, #48	; 0x30
 8007dc2:	4602      	mov	r2, r0
 8007dc4:	460b      	mov	r3, r1
 8007dc6:	4620      	mov	r0, r4
 8007dc8:	4629      	mov	r1, r5
 8007dca:	f7f8 fa0b 	bl	80001e4 <__adddf3>
 8007dce:	4602      	mov	r2, r0
 8007dd0:	460b      	mov	r3, r1
 8007dd2:	e9c6 2300 	strd	r2, r3, [r6]
              Bs[4 + 3] += a1 * Ds[i1 * 4 + 3];
 8007dd6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007dd8:	3338      	adds	r3, #56	; 0x38
 8007dda:	e9d3 4500 	ldrd	r4, r5, [r3]
 8007dde:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007de2:	015b      	lsls	r3, r3, #5
 8007de4:	3318      	adds	r3, #24
 8007de6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007de8:	4413      	add	r3, r2
 8007dea:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007dee:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8007df2:	f7f8 fbad 	bl	8000550 <__aeabi_dmul>
 8007df6:	4602      	mov	r2, r0
 8007df8:	460b      	mov	r3, r1
 8007dfa:	4610      	mov	r0, r2
 8007dfc:	4619      	mov	r1, r3
 8007dfe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007e00:	f103 0638 	add.w	r6, r3, #56	; 0x38
 8007e04:	4602      	mov	r2, r0
 8007e06:	460b      	mov	r3, r1
 8007e08:	4620      	mov	r0, r4
 8007e0a:	4629      	mov	r1, r5
 8007e0c:	f7f8 f9ea 	bl	80001e4 <__adddf3>
 8007e10:	4602      	mov	r2, r0
 8007e12:	460b      	mov	r3, r1
 8007e14:	e9c6 2300 	strd	r2, r3, [r6]
          for (i1=0; i1 < 2; i1++) {
 8007e18:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007e1c:	3301      	adds	r3, #1
 8007e1e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007e22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007e26:	2b01      	cmp	r3, #1
 8007e28:	f77f ab60 	ble.w	80074ec <STMpil_step+0xeec>
            }
          }
        }
      }                                /* if (swChanged) */
    } while (swChanged > 0 && --loopsToDo > 0);
 8007e2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	dd09      	ble.n	8007e48 <STMpil_step+0x1848>
 8007e34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e38:	3b01      	subs	r3, #1
 8007e3a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007e3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	f73f a876 	bgt.w	8006f34 <STMpil_step+0x934>

    if (loopsToDo == 0) {
 8007e48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	f040 81ab 	bne.w	80081a8 <STMpil_step+0x1ba8>
      real_T *Cs = (real_T*)STMpil_DW.StateSpace_PWORK.CS;
 8007e52:	4ba5      	ldr	r3, [pc, #660]	; (80080e8 <STMpil_step+0x1ae8>)
 8007e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e56:	65fb      	str	r3, [r7, #92]	; 0x5c
      real_T *Ds = (real_T*)STMpil_DW.StateSpace_PWORK.DS;
 8007e58:	4ba3      	ldr	r3, [pc, #652]	; (80080e8 <STMpil_step+0x1ae8>)
 8007e5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e5c:	65bb      	str	r3, [r7, #88]	; 0x58
      accum = 0.0;
 8007e5e:	f04f 0200 	mov.w	r2, #0
 8007e62:	f04f 0300 	mov.w	r3, #0
 8007e66:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
      accum += *(Cs++) * STMpil_DW.StateSpace_DSTATE[0];
 8007e6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e6c:	f103 0208 	add.w	r2, r3, #8
 8007e70:	65fa      	str	r2, [r7, #92]	; 0x5c
 8007e72:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007e76:	4b9c      	ldr	r3, [pc, #624]	; (80080e8 <STMpil_step+0x1ae8>)
 8007e78:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8007e7c:	f7f8 fb68 	bl	8000550 <__aeabi_dmul>
 8007e80:	4602      	mov	r2, r0
 8007e82:	460b      	mov	r3, r1
 8007e84:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8007e88:	f7f8 f9ac 	bl	80001e4 <__adddf3>
 8007e8c:	4602      	mov	r2, r0
 8007e8e:	460b      	mov	r3, r1
 8007e90:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
      accum += *(Cs++) * STMpil_DW.StateSpace_DSTATE[1];
 8007e94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e96:	f103 0208 	add.w	r2, r3, #8
 8007e9a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8007e9c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007ea0:	4b91      	ldr	r3, [pc, #580]	; (80080e8 <STMpil_step+0x1ae8>)
 8007ea2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007ea6:	f7f8 fb53 	bl	8000550 <__aeabi_dmul>
 8007eaa:	4602      	mov	r2, r0
 8007eac:	460b      	mov	r3, r1
 8007eae:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8007eb2:	f7f8 f997 	bl	80001e4 <__adddf3>
 8007eb6:	4602      	mov	r2, r0
 8007eb8:	460b      	mov	r3, r1
 8007eba:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
      accum += *(Ds++) * STMpil_P.SwitchCurrents_Value[0];
 8007ebe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007ec0:	f103 0208 	add.w	r2, r3, #8
 8007ec4:	65ba      	str	r2, [r7, #88]	; 0x58
 8007ec6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007eca:	4b88      	ldr	r3, [pc, #544]	; (80080ec <STMpil_step+0x1aec>)
 8007ecc:	e9d3 2352 	ldrd	r2, r3, [r3, #328]	; 0x148
 8007ed0:	f7f8 fb3e 	bl	8000550 <__aeabi_dmul>
 8007ed4:	4602      	mov	r2, r0
 8007ed6:	460b      	mov	r3, r1
 8007ed8:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8007edc:	f7f8 f982 	bl	80001e4 <__adddf3>
 8007ee0:	4602      	mov	r2, r0
 8007ee2:	460b      	mov	r3, r1
 8007ee4:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
      accum += *(Ds++) * STMpil_P.SwitchCurrents_Value[1];
 8007ee8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007eea:	f103 0208 	add.w	r2, r3, #8
 8007eee:	65ba      	str	r2, [r7, #88]	; 0x58
 8007ef0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007ef4:	4b7d      	ldr	r3, [pc, #500]	; (80080ec <STMpil_step+0x1aec>)
 8007ef6:	e9d3 2354 	ldrd	r2, r3, [r3, #336]	; 0x150
 8007efa:	f7f8 fb29 	bl	8000550 <__aeabi_dmul>
 8007efe:	4602      	mov	r2, r0
 8007f00:	460b      	mov	r3, r1
 8007f02:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8007f06:	f7f8 f96d 	bl	80001e4 <__adddf3>
 8007f0a:	4602      	mov	r2, r0
 8007f0c:	460b      	mov	r3, r1
 8007f0e:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
      accum += *(Ds++) * STMpil_B.Switch2;
 8007f12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007f14:	f103 0208 	add.w	r2, r3, #8
 8007f18:	65ba      	str	r2, [r7, #88]	; 0x58
 8007f1a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007f1e:	4b74      	ldr	r3, [pc, #464]	; (80080f0 <STMpil_step+0x1af0>)
 8007f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f24:	f7f8 fb14 	bl	8000550 <__aeabi_dmul>
 8007f28:	4602      	mov	r2, r0
 8007f2a:	460b      	mov	r3, r1
 8007f2c:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8007f30:	f7f8 f958 	bl	80001e4 <__adddf3>
 8007f34:	4602      	mov	r2, r0
 8007f36:	460b      	mov	r3, r1
 8007f38:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
      accum += *(Ds++) * STMpil_U.In1;
 8007f3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007f3e:	f103 0208 	add.w	r2, r3, #8
 8007f42:	65ba      	str	r2, [r7, #88]	; 0x58
 8007f44:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007f48:	4b6a      	ldr	r3, [pc, #424]	; (80080f4 <STMpil_step+0x1af4>)
 8007f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f4e:	f7f8 faff 	bl	8000550 <__aeabi_dmul>
 8007f52:	4602      	mov	r2, r0
 8007f54:	460b      	mov	r3, r1
 8007f56:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8007f5a:	f7f8 f943 	bl	80001e4 <__adddf3>
 8007f5e:	4602      	mov	r2, r0
 8007f60:	460b      	mov	r3, r1
 8007f62:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
      STMpil_B.StateSpace_o1[0] = accum;
 8007f66:	4962      	ldr	r1, [pc, #392]	; (80080f0 <STMpil_step+0x1af0>)
 8007f68:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8007f6c:	e9c1 2302 	strd	r2, r3, [r1, #8]
      accum = 0.0;
 8007f70:	f04f 0200 	mov.w	r2, #0
 8007f74:	f04f 0300 	mov.w	r3, #0
 8007f78:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
      accum += *(Cs++) * STMpil_DW.StateSpace_DSTATE[0];
 8007f7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f7e:	f103 0208 	add.w	r2, r3, #8
 8007f82:	65fa      	str	r2, [r7, #92]	; 0x5c
 8007f84:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007f88:	4b57      	ldr	r3, [pc, #348]	; (80080e8 <STMpil_step+0x1ae8>)
 8007f8a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8007f8e:	f7f8 fadf 	bl	8000550 <__aeabi_dmul>
 8007f92:	4602      	mov	r2, r0
 8007f94:	460b      	mov	r3, r1
 8007f96:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8007f9a:	f7f8 f923 	bl	80001e4 <__adddf3>
 8007f9e:	4602      	mov	r2, r0
 8007fa0:	460b      	mov	r3, r1
 8007fa2:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
      accum += *(Cs++) * STMpil_DW.StateSpace_DSTATE[1];
 8007fa6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007fa8:	f103 0208 	add.w	r2, r3, #8
 8007fac:	65fa      	str	r2, [r7, #92]	; 0x5c
 8007fae:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007fb2:	4b4d      	ldr	r3, [pc, #308]	; (80080e8 <STMpil_step+0x1ae8>)
 8007fb4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007fb8:	f7f8 faca 	bl	8000550 <__aeabi_dmul>
 8007fbc:	4602      	mov	r2, r0
 8007fbe:	460b      	mov	r3, r1
 8007fc0:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8007fc4:	f7f8 f90e 	bl	80001e4 <__adddf3>
 8007fc8:	4602      	mov	r2, r0
 8007fca:	460b      	mov	r3, r1
 8007fcc:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
      accum += *(Ds++) * STMpil_P.SwitchCurrents_Value[0];
 8007fd0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007fd2:	f103 0208 	add.w	r2, r3, #8
 8007fd6:	65ba      	str	r2, [r7, #88]	; 0x58
 8007fd8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007fdc:	4b43      	ldr	r3, [pc, #268]	; (80080ec <STMpil_step+0x1aec>)
 8007fde:	e9d3 2352 	ldrd	r2, r3, [r3, #328]	; 0x148
 8007fe2:	f7f8 fab5 	bl	8000550 <__aeabi_dmul>
 8007fe6:	4602      	mov	r2, r0
 8007fe8:	460b      	mov	r3, r1
 8007fea:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8007fee:	f7f8 f8f9 	bl	80001e4 <__adddf3>
 8007ff2:	4602      	mov	r2, r0
 8007ff4:	460b      	mov	r3, r1
 8007ff6:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
      accum += *(Ds++) * STMpil_P.SwitchCurrents_Value[1];
 8007ffa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007ffc:	f103 0208 	add.w	r2, r3, #8
 8008000:	65ba      	str	r2, [r7, #88]	; 0x58
 8008002:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008006:	4b39      	ldr	r3, [pc, #228]	; (80080ec <STMpil_step+0x1aec>)
 8008008:	e9d3 2354 	ldrd	r2, r3, [r3, #336]	; 0x150
 800800c:	f7f8 faa0 	bl	8000550 <__aeabi_dmul>
 8008010:	4602      	mov	r2, r0
 8008012:	460b      	mov	r3, r1
 8008014:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8008018:	f7f8 f8e4 	bl	80001e4 <__adddf3>
 800801c:	4602      	mov	r2, r0
 800801e:	460b      	mov	r3, r1
 8008020:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
      accum += *(Ds++) * STMpil_B.Switch2;
 8008024:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008026:	f103 0208 	add.w	r2, r3, #8
 800802a:	65ba      	str	r2, [r7, #88]	; 0x58
 800802c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008030:	4b2f      	ldr	r3, [pc, #188]	; (80080f0 <STMpil_step+0x1af0>)
 8008032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008036:	f7f8 fa8b 	bl	8000550 <__aeabi_dmul>
 800803a:	4602      	mov	r2, r0
 800803c:	460b      	mov	r3, r1
 800803e:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8008042:	f7f8 f8cf 	bl	80001e4 <__adddf3>
 8008046:	4602      	mov	r2, r0
 8008048:	460b      	mov	r3, r1
 800804a:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
      accum += *(Ds++) * STMpil_U.In1;
 800804e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008050:	f103 0208 	add.w	r2, r3, #8
 8008054:	65ba      	str	r2, [r7, #88]	; 0x58
 8008056:	e9d3 0100 	ldrd	r0, r1, [r3]
 800805a:	4b26      	ldr	r3, [pc, #152]	; (80080f4 <STMpil_step+0x1af4>)
 800805c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008060:	f7f8 fa76 	bl	8000550 <__aeabi_dmul>
 8008064:	4602      	mov	r2, r0
 8008066:	460b      	mov	r3, r1
 8008068:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800806c:	f7f8 f8ba 	bl	80001e4 <__adddf3>
 8008070:	4602      	mov	r2, r0
 8008072:	460b      	mov	r3, r1
 8008074:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
      STMpil_B.StateSpace_o1[1] = accum;
 8008078:	491d      	ldr	r1, [pc, #116]	; (80080f0 <STMpil_step+0x1af0>)
 800807a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800807e:	e9c1 2304 	strd	r2, r3, [r1, #16]
      accum = 0.0;
 8008082:	f04f 0200 	mov.w	r2, #0
 8008086:	f04f 0300 	mov.w	r3, #0
 800808a:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
      accum += *(Cs++) * STMpil_DW.StateSpace_DSTATE[0];
 800808e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008090:	f103 0208 	add.w	r2, r3, #8
 8008094:	65fa      	str	r2, [r7, #92]	; 0x5c
 8008096:	e9d3 0100 	ldrd	r0, r1, [r3]
 800809a:	4b13      	ldr	r3, [pc, #76]	; (80080e8 <STMpil_step+0x1ae8>)
 800809c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80080a0:	f7f8 fa56 	bl	8000550 <__aeabi_dmul>
 80080a4:	4602      	mov	r2, r0
 80080a6:	460b      	mov	r3, r1
 80080a8:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 80080ac:	f7f8 f89a 	bl	80001e4 <__adddf3>
 80080b0:	4602      	mov	r2, r0
 80080b2:	460b      	mov	r3, r1
 80080b4:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
      accum += *(Cs++) * STMpil_DW.StateSpace_DSTATE[1];
 80080b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80080ba:	f103 0208 	add.w	r2, r3, #8
 80080be:	65fa      	str	r2, [r7, #92]	; 0x5c
 80080c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80080c4:	4b08      	ldr	r3, [pc, #32]	; (80080e8 <STMpil_step+0x1ae8>)
 80080c6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80080ca:	f7f8 fa41 	bl	8000550 <__aeabi_dmul>
 80080ce:	4602      	mov	r2, r0
 80080d0:	460b      	mov	r3, r1
 80080d2:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 80080d6:	f7f8 f885 	bl	80001e4 <__adddf3>
 80080da:	4602      	mov	r2, r0
 80080dc:	460b      	mov	r3, r1
 80080de:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
      accum += *(Ds++) * STMpil_P.SwitchCurrents_Value[0];
 80080e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80080e4:	e008      	b.n	80080f8 <STMpil_step+0x1af8>
 80080e6:	bf00      	nop
 80080e8:	20000538 	.word	0x20000538
 80080ec:	20000010 	.word	0x20000010
 80080f0:	200004f8 	.word	0x200004f8
 80080f4:	20000618 	.word	0x20000618
 80080f8:	f103 0208 	add.w	r2, r3, #8
 80080fc:	65ba      	str	r2, [r7, #88]	; 0x58
 80080fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008102:	4b64      	ldr	r3, [pc, #400]	; (8008294 <STMpil_step+0x1c94>)
 8008104:	e9d3 2352 	ldrd	r2, r3, [r3, #328]	; 0x148
 8008108:	f7f8 fa22 	bl	8000550 <__aeabi_dmul>
 800810c:	4602      	mov	r2, r0
 800810e:	460b      	mov	r3, r1
 8008110:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8008114:	f7f8 f866 	bl	80001e4 <__adddf3>
 8008118:	4602      	mov	r2, r0
 800811a:	460b      	mov	r3, r1
 800811c:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
      accum += *(Ds++) * STMpil_P.SwitchCurrents_Value[1];
 8008120:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008122:	f103 0208 	add.w	r2, r3, #8
 8008126:	65ba      	str	r2, [r7, #88]	; 0x58
 8008128:	e9d3 0100 	ldrd	r0, r1, [r3]
 800812c:	4b59      	ldr	r3, [pc, #356]	; (8008294 <STMpil_step+0x1c94>)
 800812e:	e9d3 2354 	ldrd	r2, r3, [r3, #336]	; 0x150
 8008132:	f7f8 fa0d 	bl	8000550 <__aeabi_dmul>
 8008136:	4602      	mov	r2, r0
 8008138:	460b      	mov	r3, r1
 800813a:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800813e:	f7f8 f851 	bl	80001e4 <__adddf3>
 8008142:	4602      	mov	r2, r0
 8008144:	460b      	mov	r3, r1
 8008146:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
      accum += *(Ds++) * STMpil_B.Switch2;
 800814a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800814c:	f103 0208 	add.w	r2, r3, #8
 8008150:	65ba      	str	r2, [r7, #88]	; 0x58
 8008152:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008156:	4b50      	ldr	r3, [pc, #320]	; (8008298 <STMpil_step+0x1c98>)
 8008158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800815c:	f7f8 f9f8 	bl	8000550 <__aeabi_dmul>
 8008160:	4602      	mov	r2, r0
 8008162:	460b      	mov	r3, r1
 8008164:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8008168:	f7f8 f83c 	bl	80001e4 <__adddf3>
 800816c:	4602      	mov	r2, r0
 800816e:	460b      	mov	r3, r1
 8008170:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
      accum += *(Ds++) * STMpil_U.In1;
 8008174:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008176:	f103 0208 	add.w	r2, r3, #8
 800817a:	65ba      	str	r2, [r7, #88]	; 0x58
 800817c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008180:	4b46      	ldr	r3, [pc, #280]	; (800829c <STMpil_step+0x1c9c>)
 8008182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008186:	f7f8 f9e3 	bl	8000550 <__aeabi_dmul>
 800818a:	4602      	mov	r2, r0
 800818c:	460b      	mov	r3, r1
 800818e:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8008192:	f7f8 f827 	bl	80001e4 <__adddf3>
 8008196:	4602      	mov	r2, r0
 8008198:	460b      	mov	r3, r1
 800819a:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
      STMpil_B.StateSpace_o1[2] = accum;
 800819e:	493e      	ldr	r1, [pc, #248]	; (8008298 <STMpil_step+0x1c98>)
 80081a0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80081a4:	e9c1 2306 	strd	r2, r3, [r1, #24]
    }

    /* Output new switches states */
    STMpil_B.StateSpace_o2[0] = (real_T)switch_status[0];
 80081a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	4618      	mov	r0, r3
 80081b0:	f7f8 f964 	bl	800047c <__aeabi_i2d>
 80081b4:	4602      	mov	r2, r0
 80081b6:	460b      	mov	r3, r1
 80081b8:	4937      	ldr	r1, [pc, #220]	; (8008298 <STMpil_step+0x1c98>)
 80081ba:	e9c1 2308 	strd	r2, r3, [r1, #32]
    STMpil_B.StateSpace_o2[1] = (real_T)switch_status[1];
 80081be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80081c2:	3304      	adds	r3, #4
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	4618      	mov	r0, r3
 80081c8:	f7f8 f958 	bl	800047c <__aeabi_i2d>
 80081cc:	4602      	mov	r2, r0
 80081ce:	460b      	mov	r3, r1
 80081d0:	4931      	ldr	r1, [pc, #196]	; (8008298 <STMpil_step+0x1c98>)
 80081d2:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
  }

  /* Outport: '<Root>/<Current (A)>' incorporates:
   *  Gain: '<S112>/do not delete this gain'
   */
  STMpil_Y.CurrentA = STMpil_P.donotdeletethisgain_Gain *
 80081d6:	4b2f      	ldr	r3, [pc, #188]	; (8008294 <STMpil_step+0x1c94>)
 80081d8:	e9d3 01a2 	ldrd	r0, r1, [r3, #648]	; 0x288
    STMpil_B.StateSpace_o1[2];
 80081dc:	4b2e      	ldr	r3, [pc, #184]	; (8008298 <STMpil_step+0x1c98>)
 80081de:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
  STMpil_Y.CurrentA = STMpil_P.donotdeletethisgain_Gain *
 80081e2:	f7f8 f9b5 	bl	8000550 <__aeabi_dmul>
 80081e6:	4602      	mov	r2, r0
 80081e8:	460b      	mov	r3, r1
 80081ea:	492d      	ldr	r1, [pc, #180]	; (80082a0 <STMpil_step+0x1ca0>)
 80081ec:	e9c1 2302 	strd	r2, r3, [r1, #8]

  /* Sum: '<S113>/Add' incorporates:
   *  Gain: '<S113>/R'
   *  Outport: '<Root>/<Current (A)>'
   */
  STMpil_Y.VoltageV = STMpil_B.Switch2 - (STMpil_P.R_Gain * STMpil_Y.CurrentA);
 80081f0:	4b29      	ldr	r3, [pc, #164]	; (8008298 <STMpil_step+0x1c98>)
 80081f2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80081f6:	4b27      	ldr	r3, [pc, #156]	; (8008294 <STMpil_step+0x1c94>)
 80081f8:	e9d3 01a4 	ldrd	r0, r1, [r3, #656]	; 0x290
 80081fc:	4b28      	ldr	r3, [pc, #160]	; (80082a0 <STMpil_step+0x1ca0>)
 80081fe:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8008202:	f7f8 f9a5 	bl	8000550 <__aeabi_dmul>
 8008206:	4602      	mov	r2, r0
 8008208:	460b      	mov	r3, r1
 800820a:	4620      	mov	r0, r4
 800820c:	4629      	mov	r1, r5
 800820e:	f7f7 ffe7 	bl	80001e0 <__aeabi_dsub>
 8008212:	4602      	mov	r2, r0
 8008214:	460b      	mov	r3, r1
 8008216:	4922      	ldr	r1, [pc, #136]	; (80082a0 <STMpil_step+0x1ca0>)
 8008218:	e9c1 2304 	strd	r2, r3, [r1, #16]
  /* MultiPortSwitch: '<S7>/Output' incorporates:
   *  Constant: '<S7>/Vector'
   *  UnitDelay: '<S104>/Output'
   */
  rtb_Integrator =
    STMpil_P.RepeatingSequenceStair_OutValue[STMpil_DW.Output_DSTATE];
 800821c:	4b21      	ldr	r3, [pc, #132]	; (80082a4 <STMpil_step+0x1ca4>)
 800821e:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
  rtb_Integrator =
 8008222:	4a1c      	ldr	r2, [pc, #112]	; (8008294 <STMpil_step+0x1c94>)
 8008224:	3307      	adds	r3, #7
 8008226:	00db      	lsls	r3, r3, #3
 8008228:	4413      	add	r3, r2
 800822a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800822e:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0

  /* Sum: '<S2>/Add3' incorporates:
   *  Constant: '<S2>/Constant4'
   */
  rtb_Add3_ocsa = STMpil_P.Constant4_Value - STMpil_Y.VoltageV;
 8008232:	4b18      	ldr	r3, [pc, #96]	; (8008294 <STMpil_step+0x1c94>)
 8008234:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	; 0x80
 8008238:	4b19      	ldr	r3, [pc, #100]	; (80082a0 <STMpil_step+0x1ca0>)
 800823a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800823e:	f7f7 ffcf 	bl	80001e0 <__aeabi_dsub>
 8008242:	4602      	mov	r2, r0
 8008244:	460b      	mov	r3, r1
 8008246:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8

  /* Sum: '<S48>/Sum' incorporates:
   *  DiscreteIntegrator: '<S39>/Integrator'
   *  Gain: '<S44>/Proportional Gain'
   */
  numAccum = (STMpil_P.PIDController3_P * rtb_Add3_ocsa) +
 800824a:	4b12      	ldr	r3, [pc, #72]	; (8008294 <STMpil_step+0x1c94>)
 800824c:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8008250:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8008254:	f7f8 f97c 	bl	8000550 <__aeabi_dmul>
 8008258:	4602      	mov	r2, r0
 800825a:	460b      	mov	r3, r1
 800825c:	4610      	mov	r0, r2
 800825e:	4619      	mov	r1, r3
    STMpil_DW.Integrator_DSTATE_hwv3;
 8008260:	4b10      	ldr	r3, [pc, #64]	; (80082a4 <STMpil_step+0x1ca4>)
 8008262:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
  numAccum = (STMpil_P.PIDController3_P * rtb_Add3_ocsa) +
 8008266:	f7f7 ffbd 	bl	80001e4 <__adddf3>
 800826a:	4602      	mov	r2, r0
 800826c:	460b      	mov	r3, r1
 800826e:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8

  /* Saturate: '<S46>/Saturation' */
  if (numAccum > STMpil_P.PIDController3_UpperSaturationL) {
 8008272:	4b08      	ldr	r3, [pc, #32]	; (8008294 <STMpil_step+0x1c94>)
 8008274:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8008278:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 800827c:	f7f8 fbf8 	bl	8000a70 <__aeabi_dcmpgt>
 8008280:	4603      	mov	r3, r0
 8008282:	2b00      	cmp	r3, #0
 8008284:	d010      	beq.n	80082a8 <STMpil_step+0x1ca8>
    numAccum = STMpil_P.PIDController3_UpperSaturationL;
 8008286:	4b03      	ldr	r3, [pc, #12]	; (8008294 <STMpil_step+0x1c94>)
 8008288:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800828c:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
 8008290:	e019      	b.n	80082c6 <STMpil_step+0x1cc6>
 8008292:	bf00      	nop
 8008294:	20000010 	.word	0x20000010
 8008298:	200004f8 	.word	0x200004f8
 800829c:	20000618 	.word	0x20000618
 80082a0:	20000620 	.word	0x20000620
 80082a4:	20000538 	.word	0x20000538
  } else {
    if (numAccum < STMpil_P.PIDController3_LowerSaturationL) {
 80082a8:	4b9d      	ldr	r3, [pc, #628]	; (8008520 <STMpil_step+0x1f20>)
 80082aa:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80082ae:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 80082b2:	f7f8 fbbf 	bl	8000a34 <__aeabi_dcmplt>
 80082b6:	4603      	mov	r3, r0
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d004      	beq.n	80082c6 <STMpil_step+0x1cc6>
      numAccum = STMpil_P.PIDController3_LowerSaturationL;
 80082bc:	4b98      	ldr	r3, [pc, #608]	; (8008520 <STMpil_step+0x1f20>)
 80082be:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80082c2:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
  /* End of Saturate: '<S46>/Saturation' */

  /* Sum: '<S2>/Add4' incorporates:
   *  Outport: '<Root>/<Current (A)>'
   */
  rtb_Add4 = numAccum - STMpil_Y.CurrentA;
 80082c6:	4b97      	ldr	r3, [pc, #604]	; (8008524 <STMpil_step+0x1f24>)
 80082c8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80082cc:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 80082d0:	f7f7 ff86 	bl	80001e0 <__aeabi_dsub>
 80082d4:	4602      	mov	r2, r0
 80082d6:	460b      	mov	r3, r1
 80082d8:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

  /* Sum: '<S96>/Sum' incorporates:
   *  DiscreteIntegrator: '<S87>/Integrator'
   *  Gain: '<S92>/Proportional Gain'
   */
  numAccum = (STMpil_P.PIDController4_P * rtb_Add4) +
 80082dc:	4b90      	ldr	r3, [pc, #576]	; (8008520 <STMpil_step+0x1f20>)
 80082de:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80082e2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80082e6:	f7f8 f933 	bl	8000550 <__aeabi_dmul>
 80082ea:	4602      	mov	r2, r0
 80082ec:	460b      	mov	r3, r1
 80082ee:	4610      	mov	r0, r2
 80082f0:	4619      	mov	r1, r3
    STMpil_DW.Integrator_DSTATE;
 80082f2:	4b8d      	ldr	r3, [pc, #564]	; (8008528 <STMpil_step+0x1f28>)
 80082f4:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
  numAccum = (STMpil_P.PIDController4_P * rtb_Add4) +
 80082f8:	f7f7 ff74 	bl	80001e4 <__adddf3>
 80082fc:	4602      	mov	r2, r0
 80082fe:	460b      	mov	r3, r1
 8008300:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8

  /* Sum: '<S105>/FixPt Sum1' incorporates:
   *  Constant: '<S105>/FixPt Constant'
   *  UnitDelay: '<S104>/Output'
   */
  STMpil_DW.Output_DSTATE = (uint8_T)(((uint32_T)STMpil_DW.Output_DSTATE) +
 8008304:	4b88      	ldr	r3, [pc, #544]	; (8008528 <STMpil_step+0x1f28>)
 8008306:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
    STMpil_P.FixPtConstant_Value);
 800830a:	4b85      	ldr	r3, [pc, #532]	; (8008520 <STMpil_step+0x1f20>)
 800830c:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
  STMpil_DW.Output_DSTATE = (uint8_T)(((uint32_T)STMpil_DW.Output_DSTATE) +
 8008310:	4413      	add	r3, r2
 8008312:	b2da      	uxtb	r2, r3
 8008314:	4b84      	ldr	r3, [pc, #528]	; (8008528 <STMpil_step+0x1f28>)
 8008316:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

  /* Switch: '<S106>/FixPt Switch' incorporates:
   *  Constant: '<S106>/Constant'
   *  UnitDelay: '<S104>/Output'
   */
  if (STMpil_DW.Output_DSTATE > STMpil_P.LimitedCounter_uplimit) {
 800831a:	4b83      	ldr	r3, [pc, #524]	; (8008528 <STMpil_step+0x1f28>)
 800831c:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
 8008320:	4b7f      	ldr	r3, [pc, #508]	; (8008520 <STMpil_step+0x1f20>)
 8008322:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8008326:	429a      	cmp	r2, r3
 8008328:	d905      	bls.n	8008336 <STMpil_step+0x1d36>
    STMpil_DW.Output_DSTATE = STMpil_P.Constant_Value_ip42;
 800832a:	4b7d      	ldr	r3, [pc, #500]	; (8008520 <STMpil_step+0x1f20>)
 800832c:	f893 22fa 	ldrb.w	r2, [r3, #762]	; 0x2fa
 8008330:	4b7d      	ldr	r3, [pc, #500]	; (8008528 <STMpil_step+0x1f28>)
 8008332:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
  /* End of Switch: '<S106>/FixPt Switch' */

  /* Update for DiscreteIntegrator: '<S87>/Integrator' incorporates:
   *  Gain: '<S84>/Integral Gain'
   */
  STMpil_DW.Integrator_DSTATE += STMpil_P.Integrator_gainval *
 8008336:	4b7c      	ldr	r3, [pc, #496]	; (8008528 <STMpil_step+0x1f28>)
 8008338:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 800833c:	4b78      	ldr	r3, [pc, #480]	; (8008520 <STMpil_step+0x1f20>)
 800833e:	e9d3 891e 	ldrd	r8, r9, [r3, #120]	; 0x78
    (STMpil_P.PIDController4_I * rtb_Add4);
 8008342:	4b77      	ldr	r3, [pc, #476]	; (8008520 <STMpil_step+0x1f20>)
 8008344:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8008348:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800834c:	f7f8 f900 	bl	8000550 <__aeabi_dmul>
 8008350:	4602      	mov	r2, r0
 8008352:	460b      	mov	r3, r1
  STMpil_DW.Integrator_DSTATE += STMpil_P.Integrator_gainval *
 8008354:	4640      	mov	r0, r8
 8008356:	4649      	mov	r1, r9
 8008358:	f7f8 f8fa 	bl	8000550 <__aeabi_dmul>
 800835c:	4602      	mov	r2, r0
 800835e:	460b      	mov	r3, r1
 8008360:	4620      	mov	r0, r4
 8008362:	4629      	mov	r1, r5
 8008364:	f7f7 ff3e 	bl	80001e4 <__adddf3>
 8008368:	4602      	mov	r2, r0
 800836a:	460b      	mov	r3, r1
 800836c:	496e      	ldr	r1, [pc, #440]	; (8008528 <STMpil_step+0x1f28>)
 800836e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

  /* Update for DiscreteIntegrator: '<S39>/Integrator' incorporates:
   *  Gain: '<S36>/Integral Gain'
   */
  STMpil_DW.Integrator_DSTATE_hwv3 += STMpil_P.Integrator_gainval_fnnq *
 8008372:	4b6d      	ldr	r3, [pc, #436]	; (8008528 <STMpil_step+0x1f28>)
 8008374:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8008378:	4b69      	ldr	r3, [pc, #420]	; (8008520 <STMpil_step+0x1f20>)
 800837a:	e9d3 8922 	ldrd	r8, r9, [r3, #136]	; 0x88
    (STMpil_P.PIDController3_I * rtb_Add3_ocsa);
 800837e:	4b68      	ldr	r3, [pc, #416]	; (8008520 <STMpil_step+0x1f20>)
 8008380:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8008384:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8008388:	f7f8 f8e2 	bl	8000550 <__aeabi_dmul>
 800838c:	4602      	mov	r2, r0
 800838e:	460b      	mov	r3, r1
  STMpil_DW.Integrator_DSTATE_hwv3 += STMpil_P.Integrator_gainval_fnnq *
 8008390:	4640      	mov	r0, r8
 8008392:	4649      	mov	r1, r9
 8008394:	f7f8 f8dc 	bl	8000550 <__aeabi_dmul>
 8008398:	4602      	mov	r2, r0
 800839a:	460b      	mov	r3, r1
 800839c:	4620      	mov	r0, r4
 800839e:	4629      	mov	r1, r5
 80083a0:	f7f7 ff20 	bl	80001e4 <__adddf3>
 80083a4:	4602      	mov	r2, r0
 80083a6:	460b      	mov	r3, r1
 80083a8:	495f      	ldr	r1, [pc, #380]	; (8008528 <STMpil_step+0x1f28>)
 80083aa:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30

  /* Saturate: '<S94>/Saturation' */
  if (numAccum > STMpil_P.PIDController4_UpperSaturationL) {
 80083ae:	4b5c      	ldr	r3, [pc, #368]	; (8008520 <STMpil_step+0x1f20>)
 80083b0:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80083b4:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 80083b8:	f7f8 fb5a 	bl	8000a70 <__aeabi_dcmpgt>
 80083bc:	4603      	mov	r3, r0
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d005      	beq.n	80083ce <STMpil_step+0x1dce>
    numAccum = STMpil_P.PIDController4_UpperSaturationL;
 80083c2:	4b57      	ldr	r3, [pc, #348]	; (8008520 <STMpil_step+0x1f20>)
 80083c4:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80083c8:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
 80083cc:	e00e      	b.n	80083ec <STMpil_step+0x1dec>
  } else {
    if (numAccum < STMpil_P.PIDController4_LowerSaturationL) {
 80083ce:	4b54      	ldr	r3, [pc, #336]	; (8008520 <STMpil_step+0x1f20>)
 80083d0:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80083d4:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 80083d8:	f7f8 fb2c 	bl	8000a34 <__aeabi_dcmplt>
 80083dc:	4603      	mov	r3, r0
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d004      	beq.n	80083ec <STMpil_step+0x1dec>
      numAccum = STMpil_P.PIDController4_LowerSaturationL;
 80083e2:	4b4f      	ldr	r3, [pc, #316]	; (8008520 <STMpil_step+0x1f20>)
 80083e4:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80083e8:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
  /* End of Saturate: '<S94>/Saturation' */

  /* DataTypeConversion: '<S123>/Data Type Conversion' incorporates:
   *  RelationalOperator: '<S2>/Relational Operator1'
   */
  STMpil_B.DataTypeConversion = (rtb_Integrator <= numAccum);
 80083ec:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 80083f0:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
 80083f4:	f7f8 fb28 	bl	8000a48 <__aeabi_dcmple>
 80083f8:	4603      	mov	r3, r0
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d003      	beq.n	8008406 <STMpil_step+0x1e06>
 80083fe:	f04f 0200 	mov.w	r2, #0
 8008402:	4b4a      	ldr	r3, [pc, #296]	; (800852c <STMpil_step+0x1f2c>)
 8008404:	e003      	b.n	800840e <STMpil_step+0x1e0e>
 8008406:	f04f 0200 	mov.w	r2, #0
 800840a:	f04f 0300 	mov.w	r3, #0
 800840e:	4948      	ldr	r1, [pc, #288]	; (8008530 <STMpil_step+0x1f30>)
 8008410:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30

  /* Fcn: '<S113>/Fcn1' incorporates:
   *  Gain: '<S113>/R4'
   *  Memory: '<S113>/it init1'
   */
  STMpil_Y.SOC = 100.0 * (1.0 - (rtb_Gain / (STMpil_P.R4_Gain *
 8008414:	4b42      	ldr	r3, [pc, #264]	; (8008520 <STMpil_step+0x1f20>)
 8008416:	e9d3 01b0 	ldrd	r0, r1, [r3, #704]	; 0x2c0
    STMpil_DW.itinit1_PreviousInput)));
 800841a:	4b43      	ldr	r3, [pc, #268]	; (8008528 <STMpil_step+0x1f28>)
 800841c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
  STMpil_Y.SOC = 100.0 * (1.0 - (rtb_Gain / (STMpil_P.R4_Gain *
 8008420:	f7f8 f896 	bl	8000550 <__aeabi_dmul>
 8008424:	4602      	mov	r2, r0
 8008426:	460b      	mov	r3, r1
 8008428:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 800842c:	f7f8 f9ba 	bl	80007a4 <__aeabi_ddiv>
 8008430:	4602      	mov	r2, r0
 8008432:	460b      	mov	r3, r1
 8008434:	f04f 0000 	mov.w	r0, #0
 8008438:	493c      	ldr	r1, [pc, #240]	; (800852c <STMpil_step+0x1f2c>)
 800843a:	f7f7 fed1 	bl	80001e0 <__aeabi_dsub>
 800843e:	4602      	mov	r2, r0
 8008440:	460b      	mov	r3, r1
 8008442:	4610      	mov	r0, r2
 8008444:	4619      	mov	r1, r3
 8008446:	f04f 0200 	mov.w	r2, #0
 800844a:	4b3a      	ldr	r3, [pc, #232]	; (8008534 <STMpil_step+0x1f34>)
 800844c:	f7f8 f880 	bl	8000550 <__aeabi_dmul>
 8008450:	4602      	mov	r2, r0
 8008452:	460b      	mov	r3, r1
 8008454:	4933      	ldr	r1, [pc, #204]	; (8008524 <STMpil_step+0x1f24>)
 8008456:	e9c1 2300 	strd	r2, r3, [r1]

  /* DataTypeConversion: '<S125>/Data Type Conversion' incorporates:
   *  Constant: '<S3>/Constant'
   */
  STMpil_B.DataTypeConversion_ni55 = STMpil_P.Constant_Value_fyee;
 800845a:	4b31      	ldr	r3, [pc, #196]	; (8008520 <STMpil_step+0x1f20>)
 800845c:	e9d3 23bc 	ldrd	r2, r3, [r3, #752]	; 0x2f0
 8008460:	4933      	ldr	r1, [pc, #204]	; (8008530 <STMpil_step+0x1f30>)
 8008462:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

  /* Update for Memory: '<S113>/it init1' incorporates:
   *  Constant: '<S113>/Constant12'
   */
  STMpil_DW.itinit1_PreviousInput = STMpil_P.Constant12_Value;
 8008466:	4b2e      	ldr	r3, [pc, #184]	; (8008520 <STMpil_step+0x1f20>)
 8008468:	e9d3 23b8 	ldrd	r2, r3, [r3, #736]	; 0x2e0
 800846c:	492e      	ldr	r1, [pc, #184]	; (8008528 <STMpil_step+0x1f28>)
 800846e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

  /* Update for DiscreteTransferFcn: '<S113>/Current filter' incorporates:
   *  Outport: '<Root>/<Current (A)>'
   */
  STMpil_DW.Currentfilter_states = (STMpil_Y.CurrentA -
 8008472:	4b2c      	ldr	r3, [pc, #176]	; (8008524 <STMpil_step+0x1f24>)
 8008474:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
    (STMpil_P.Currentfilter_DenCoef[1] * STMpil_DW.Currentfilter_states)) /
 8008478:	4b29      	ldr	r3, [pc, #164]	; (8008520 <STMpil_step+0x1f20>)
 800847a:	e9d3 0144 	ldrd	r0, r1, [r3, #272]	; 0x110
 800847e:	4b2a      	ldr	r3, [pc, #168]	; (8008528 <STMpil_step+0x1f28>)
 8008480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008484:	f7f8 f864 	bl	8000550 <__aeabi_dmul>
 8008488:	4602      	mov	r2, r0
 800848a:	460b      	mov	r3, r1
  STMpil_DW.Currentfilter_states = (STMpil_Y.CurrentA -
 800848c:	4620      	mov	r0, r4
 800848e:	4629      	mov	r1, r5
 8008490:	f7f7 fea6 	bl	80001e0 <__aeabi_dsub>
 8008494:	4602      	mov	r2, r0
 8008496:	460b      	mov	r3, r1
 8008498:	4610      	mov	r0, r2
 800849a:	4619      	mov	r1, r3
    STMpil_P.Currentfilter_DenCoef[0];
 800849c:	4b20      	ldr	r3, [pc, #128]	; (8008520 <STMpil_step+0x1f20>)
 800849e:	e9d3 2342 	ldrd	r2, r3, [r3, #264]	; 0x108
    (STMpil_P.Currentfilter_DenCoef[1] * STMpil_DW.Currentfilter_states)) /
 80084a2:	f7f8 f97f 	bl	80007a4 <__aeabi_ddiv>
 80084a6:	4602      	mov	r2, r0
 80084a8:	460b      	mov	r3, r1
  STMpil_DW.Currentfilter_states = (STMpil_Y.CurrentA -
 80084aa:	491f      	ldr	r1, [pc, #124]	; (8008528 <STMpil_step+0x1f28>)
 80084ac:	e9c1 2300 	strd	r2, r3, [r1]

  /* Update for Memory: '<S113>/it init' incorporates:
   *  Gain: '<S113>/Gain2'
   */
  STMpil_DW.itinit_PreviousInput = STMpil_P.Gain2_Gain * rtb_Gain;
 80084b0:	4b1b      	ldr	r3, [pc, #108]	; (8008520 <STMpil_step+0x1f20>)
 80084b2:	e9d3 01b6 	ldrd	r0, r1, [r3, #728]	; 0x2d8
 80084b6:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 80084ba:	f7f8 f849 	bl	8000550 <__aeabi_dmul>
 80084be:	4602      	mov	r2, r0
 80084c0:	460b      	mov	r3, r1
 80084c2:	4919      	ldr	r1, [pc, #100]	; (8008528 <STMpil_step+0x1f28>)
 80084c4:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

  /* Update for DiscreteIntegrator: '<S113>/int(i)' incorporates:
   *  Outport: '<Root>/<Current (A)>'
   */
  STMpil_DW.inti_IC_LOADING = 0U;
 80084c8:	4b17      	ldr	r3, [pc, #92]	; (8008528 <STMpil_step+0x1f28>)
 80084ca:	2200      	movs	r2, #0
 80084cc:	f883 20de 	strb.w	r2, [r3, #222]	; 0xde
  STMpil_DW.inti_DSTATE += STMpil_P.inti_gainval * STMpil_Y.CurrentA;
 80084d0:	4b15      	ldr	r3, [pc, #84]	; (8008528 <STMpil_step+0x1f28>)
 80084d2:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80084d6:	4b12      	ldr	r3, [pc, #72]	; (8008520 <STMpil_step+0x1f20>)
 80084d8:	e9d3 014a 	ldrd	r0, r1, [r3, #296]	; 0x128
 80084dc:	4b11      	ldr	r3, [pc, #68]	; (8008524 <STMpil_step+0x1f24>)
 80084de:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80084e2:	f7f8 f835 	bl	8000550 <__aeabi_dmul>
 80084e6:	4602      	mov	r2, r0
 80084e8:	460b      	mov	r3, r1
 80084ea:	4620      	mov	r0, r4
 80084ec:	4629      	mov	r1, r5
 80084ee:	f7f7 fe79 	bl	80001e4 <__adddf3>
 80084f2:	4602      	mov	r2, r0
 80084f4:	460b      	mov	r3, r1
 80084f6:	490c      	ldr	r1, [pc, #48]	; (8008528 <STMpil_step+0x1f28>)
 80084f8:	e9c1 2302 	strd	r2, r3, [r1, #8]
  if (STMpil_DW.inti_DSTATE >= STMpil_P.inti_UpperSat) {
 80084fc:	4b0a      	ldr	r3, [pc, #40]	; (8008528 <STMpil_step+0x1f28>)
 80084fe:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8008502:	4b07      	ldr	r3, [pc, #28]	; (8008520 <STMpil_step+0x1f20>)
 8008504:	e9d3 234c 	ldrd	r2, r3, [r3, #304]	; 0x130
 8008508:	f7f8 faa8 	bl	8000a5c <__aeabi_dcmpge>
 800850c:	4603      	mov	r3, r0
 800850e:	2b00      	cmp	r3, #0
 8008510:	d012      	beq.n	8008538 <STMpil_step+0x1f38>
    STMpil_DW.inti_DSTATE = STMpil_P.inti_UpperSat;
 8008512:	4b03      	ldr	r3, [pc, #12]	; (8008520 <STMpil_step+0x1f20>)
 8008514:	e9d3 234c 	ldrd	r2, r3, [r3, #304]	; 0x130
 8008518:	4903      	ldr	r1, [pc, #12]	; (8008528 <STMpil_step+0x1f28>)
 800851a:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800851e:	e01c      	b.n	800855a <STMpil_step+0x1f5a>
 8008520:	20000010 	.word	0x20000010
 8008524:	20000620 	.word	0x20000620
 8008528:	20000538 	.word	0x20000538
 800852c:	3ff00000 	.word	0x3ff00000
 8008530:	200004f8 	.word	0x200004f8
 8008534:	40590000 	.word	0x40590000
  } else {
    if (STMpil_DW.inti_DSTATE <= STMpil_P.inti_LowerSat) {
 8008538:	4b20      	ldr	r3, [pc, #128]	; (80085bc <STMpil_step+0x1fbc>)
 800853a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800853e:	4b20      	ldr	r3, [pc, #128]	; (80085c0 <STMpil_step+0x1fc0>)
 8008540:	e9d3 234e 	ldrd	r2, r3, [r3, #312]	; 0x138
 8008544:	f7f8 fa80 	bl	8000a48 <__aeabi_dcmple>
 8008548:	4603      	mov	r3, r0
 800854a:	2b00      	cmp	r3, #0
 800854c:	d005      	beq.n	800855a <STMpil_step+0x1f5a>
      STMpil_DW.inti_DSTATE = STMpil_P.inti_LowerSat;
 800854e:	4b1c      	ldr	r3, [pc, #112]	; (80085c0 <STMpil_step+0x1fc0>)
 8008550:	e9d3 234e 	ldrd	r2, r3, [r3, #312]	; 0x138
 8008554:	4919      	ldr	r1, [pc, #100]	; (80085bc <STMpil_step+0x1fbc>)
 8008556:	e9c1 2302 	strd	r2, r3, [r1, #8]
    }
  }

  if (rtb_DataTypeConversion2 > 0) {
 800855a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800855e:	2b00      	cmp	r3, #0
 8008560:	dd04      	ble.n	800856c <STMpil_step+0x1f6c>
    STMpil_DW.inti_PrevResetState = 1;
 8008562:	4b16      	ldr	r3, [pc, #88]	; (80085bc <STMpil_step+0x1fbc>)
 8008564:	2201      	movs	r2, #1
 8008566:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
 800856a:	e003      	b.n	8008574 <STMpil_step+0x1f74>
  } else {
    STMpil_DW.inti_PrevResetState = 0;
 800856c:	4b13      	ldr	r3, [pc, #76]	; (80085bc <STMpil_step+0x1fbc>)
 800856e:	2200      	movs	r2, #0
 8008570:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
   *  Outport: '<Root>/<Current (A)>'
   *  Product: '<S118>/Divide'
   *  RelationalOperator: '<S122>/Compare'
   *  Sum: '<S118>/Add3'
   */
  STMpil_DW.DiscreteTimeIntegrator_DSTATE +=
 8008574:	4b11      	ldr	r3, [pc, #68]	; (80085bc <STMpil_step+0x1fbc>)
 8008576:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
    STMpil_P.DiscreteTimeIntegrator_gainval * (STMpil_P.Gain1_Gain * (fabs
 800857a:	4b11      	ldr	r3, [pc, #68]	; (80085c0 <STMpil_step+0x1fc0>)
 800857c:	e9d3 ab5e 	ldrd	sl, fp, [r3, #376]	; 0x178
 8008580:	4b0f      	ldr	r3, [pc, #60]	; (80085c0 <STMpil_step+0x1fc0>)
 8008582:	ed93 7ba8 	vldr	d7, [r3, #672]	; 0x2a0
 8008586:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
    (STMpil_Y.CurrentA) * ((STMpil_P.Gain4_Gain * ((real_T)(STMpil_Y.CurrentA <
 800858a:	4b0e      	ldr	r3, [pc, #56]	; (80085c4 <STMpil_step+0x1fc4>)
 800858c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    STMpil_P.DiscreteTimeIntegrator_gainval * (STMpil_P.Gain1_Gain * (fabs
 8008590:	603a      	str	r2, [r7, #0]
 8008592:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008596:	607b      	str	r3, [r7, #4]
    (STMpil_Y.CurrentA) * ((STMpil_P.Gain4_Gain * ((real_T)(STMpil_Y.CurrentA <
 8008598:	4b09      	ldr	r3, [pc, #36]	; (80085c0 <STMpil_step+0x1fc0>)
 800859a:	e9d3 45a6 	ldrd	r4, r5, [r3, #664]	; 0x298
 800859e:	4b09      	ldr	r3, [pc, #36]	; (80085c4 <STMpil_step+0x1fc4>)
 80085a0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
    STMpil_P.Constant_Value_axhw))) - STMpil_DW.DiscreteTimeIntegrator_DSTATE)));
 80085a4:	4b06      	ldr	r3, [pc, #24]	; (80085c0 <STMpil_step+0x1fc0>)
 80085a6:	e9d3 233c 	ldrd	r2, r3, [r3, #240]	; 0xf0
    (STMpil_Y.CurrentA) * ((STMpil_P.Gain4_Gain * ((real_T)(STMpil_Y.CurrentA <
 80085aa:	f7f8 fa43 	bl	8000a34 <__aeabi_dcmplt>
 80085ae:	4603      	mov	r3, r0
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d00b      	beq.n	80085cc <STMpil_step+0x1fcc>
 80085b4:	f04f 0000 	mov.w	r0, #0
 80085b8:	4903      	ldr	r1, [pc, #12]	; (80085c8 <STMpil_step+0x1fc8>)
 80085ba:	e00b      	b.n	80085d4 <STMpil_step+0x1fd4>
 80085bc:	20000538 	.word	0x20000538
 80085c0:	20000010 	.word	0x20000010
 80085c4:	20000620 	.word	0x20000620
 80085c8:	3ff00000 	.word	0x3ff00000
 80085cc:	f04f 0000 	mov.w	r0, #0
 80085d0:	f04f 0100 	mov.w	r1, #0
 80085d4:	4622      	mov	r2, r4
 80085d6:	462b      	mov	r3, r5
 80085d8:	f7f7 ffba 	bl	8000550 <__aeabi_dmul>
 80085dc:	4602      	mov	r2, r0
 80085de:	460b      	mov	r3, r1
 80085e0:	4610      	mov	r0, r2
 80085e2:	4619      	mov	r1, r3
    STMpil_P.Constant_Value_axhw))) - STMpil_DW.DiscreteTimeIntegrator_DSTATE)));
 80085e4:	4ba6      	ldr	r3, [pc, #664]	; (8008880 <STMpil_step+0x2280>)
 80085e6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80085ea:	f7f7 fdf9 	bl	80001e0 <__aeabi_dsub>
 80085ee:	4602      	mov	r2, r0
 80085f0:	460b      	mov	r3, r1
    (STMpil_Y.CurrentA) * ((STMpil_P.Gain4_Gain * ((real_T)(STMpil_Y.CurrentA <
 80085f2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80085f6:	f7f7 ffab 	bl	8000550 <__aeabi_dmul>
 80085fa:	4602      	mov	r2, r0
 80085fc:	460b      	mov	r3, r1
    STMpil_P.DiscreteTimeIntegrator_gainval * (STMpil_P.Gain1_Gain * (fabs
 80085fe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8008602:	f7f7 ffa5 	bl	8000550 <__aeabi_dmul>
 8008606:	4602      	mov	r2, r0
 8008608:	460b      	mov	r3, r1
 800860a:	4650      	mov	r0, sl
 800860c:	4659      	mov	r1, fp
 800860e:	f7f7 ff9f 	bl	8000550 <__aeabi_dmul>
 8008612:	4602      	mov	r2, r0
 8008614:	460b      	mov	r3, r1
  STMpil_DW.DiscreteTimeIntegrator_DSTATE +=
 8008616:	4640      	mov	r0, r8
 8008618:	4649      	mov	r1, r9
 800861a:	f7f7 fde3 	bl	80001e4 <__adddf3>
 800861e:	4602      	mov	r2, r0
 8008620:	460b      	mov	r3, r1
 8008622:	4997      	ldr	r1, [pc, #604]	; (8008880 <STMpil_step+0x2280>)
 8008624:	e9c1 2304 	strd	r2, r3, [r1, #16]

  /* Update for Memory: '<S113>/Memory2' incorporates:
   *  Gain: '<S113>/R1'
   *  Outport: '<Root>/<Current (A)>'
   */
  STMpil_DW.Memory2_PreviousInput = STMpil_P.R1_Gain * STMpil_Y.CurrentA;
 8008628:	4b96      	ldr	r3, [pc, #600]	; (8008884 <STMpil_step+0x2284>)
 800862a:	e9d3 01aa 	ldrd	r0, r1, [r3, #680]	; 0x2a8
 800862e:	4b96      	ldr	r3, [pc, #600]	; (8008888 <STMpil_step+0x2288>)
 8008630:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8008634:	f7f7 ff8c 	bl	8000550 <__aeabi_dmul>
 8008638:	4602      	mov	r2, r0
 800863a:	460b      	mov	r3, r1
 800863c:	4990      	ldr	r1, [pc, #576]	; (8008880 <STMpil_step+0x2280>)
 800863e:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
   *  Inport: '<Root>/In1'
   */

  /* S-Function block: <S127>/State-Space */
  {
    const real_T *As = (real_T*)STMpil_DW.StateSpace_PWORK.AS;
 8008642:	4b8f      	ldr	r3, [pc, #572]	; (8008880 <STMpil_step+0x2280>)
 8008644:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008646:	64fb      	str	r3, [r7, #76]	; 0x4c
    const real_T *Bs = (real_T*)STMpil_DW.StateSpace_PWORK.BS;
 8008648:	4b8d      	ldr	r3, [pc, #564]	; (8008880 <STMpil_step+0x2280>)
 800864a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800864c:	64bb      	str	r3, [r7, #72]	; 0x48
    real_T *xtmp = (real_T*)STMpil_DW.StateSpace_PWORK.XTMP;
 800864e:	4b8c      	ldr	r3, [pc, #560]	; (8008880 <STMpil_step+0x2280>)
 8008650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008652:	647b      	str	r3, [r7, #68]	; 0x44
    real_T accum;

    /* Calculate new states... */
    accum = 0.0;
 8008654:	f04f 0200 	mov.w	r2, #0
 8008658:	f04f 0300 	mov.w	r3, #0
 800865c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    accum += *(As++) * STMpil_DW.StateSpace_DSTATE[0];
 8008660:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008662:	f103 0208 	add.w	r2, r3, #8
 8008666:	64fa      	str	r2, [r7, #76]	; 0x4c
 8008668:	e9d3 0100 	ldrd	r0, r1, [r3]
 800866c:	4b84      	ldr	r3, [pc, #528]	; (8008880 <STMpil_step+0x2280>)
 800866e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8008672:	f7f7 ff6d 	bl	8000550 <__aeabi_dmul>
 8008676:	4602      	mov	r2, r0
 8008678:	460b      	mov	r3, r1
 800867a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800867e:	f7f7 fdb1 	bl	80001e4 <__adddf3>
 8008682:	4602      	mov	r2, r0
 8008684:	460b      	mov	r3, r1
 8008686:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    accum += *(As++) * STMpil_DW.StateSpace_DSTATE[1];
 800868a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800868c:	f103 0208 	add.w	r2, r3, #8
 8008690:	64fa      	str	r2, [r7, #76]	; 0x4c
 8008692:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008696:	4b7a      	ldr	r3, [pc, #488]	; (8008880 <STMpil_step+0x2280>)
 8008698:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800869c:	f7f7 ff58 	bl	8000550 <__aeabi_dmul>
 80086a0:	4602      	mov	r2, r0
 80086a2:	460b      	mov	r3, r1
 80086a4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80086a8:	f7f7 fd9c 	bl	80001e4 <__adddf3>
 80086ac:	4602      	mov	r2, r0
 80086ae:	460b      	mov	r3, r1
 80086b0:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    accum += *(Bs++) * (STMpil_P.SwitchCurrents_Value[0]);
 80086b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086b6:	f103 0208 	add.w	r2, r3, #8
 80086ba:	64ba      	str	r2, [r7, #72]	; 0x48
 80086bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80086c0:	4b70      	ldr	r3, [pc, #448]	; (8008884 <STMpil_step+0x2284>)
 80086c2:	e9d3 2352 	ldrd	r2, r3, [r3, #328]	; 0x148
 80086c6:	f7f7 ff43 	bl	8000550 <__aeabi_dmul>
 80086ca:	4602      	mov	r2, r0
 80086cc:	460b      	mov	r3, r1
 80086ce:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80086d2:	f7f7 fd87 	bl	80001e4 <__adddf3>
 80086d6:	4602      	mov	r2, r0
 80086d8:	460b      	mov	r3, r1
 80086da:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    accum += *(Bs++) * (STMpil_P.SwitchCurrents_Value[1]);
 80086de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086e0:	f103 0208 	add.w	r2, r3, #8
 80086e4:	64ba      	str	r2, [r7, #72]	; 0x48
 80086e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80086ea:	4b66      	ldr	r3, [pc, #408]	; (8008884 <STMpil_step+0x2284>)
 80086ec:	e9d3 2354 	ldrd	r2, r3, [r3, #336]	; 0x150
 80086f0:	f7f7 ff2e 	bl	8000550 <__aeabi_dmul>
 80086f4:	4602      	mov	r2, r0
 80086f6:	460b      	mov	r3, r1
 80086f8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80086fc:	f7f7 fd72 	bl	80001e4 <__adddf3>
 8008700:	4602      	mov	r2, r0
 8008702:	460b      	mov	r3, r1
 8008704:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    accum += *(Bs++) * STMpil_B.Switch2;
 8008708:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800870a:	f103 0208 	add.w	r2, r3, #8
 800870e:	64ba      	str	r2, [r7, #72]	; 0x48
 8008710:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008714:	4b5d      	ldr	r3, [pc, #372]	; (800888c <STMpil_step+0x228c>)
 8008716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800871a:	f7f7 ff19 	bl	8000550 <__aeabi_dmul>
 800871e:	4602      	mov	r2, r0
 8008720:	460b      	mov	r3, r1
 8008722:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8008726:	f7f7 fd5d 	bl	80001e4 <__adddf3>
 800872a:	4602      	mov	r2, r0
 800872c:	460b      	mov	r3, r1
 800872e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    accum += *(Bs++) * STMpil_U.In1;
 8008732:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008734:	f103 0208 	add.w	r2, r3, #8
 8008738:	64ba      	str	r2, [r7, #72]	; 0x48
 800873a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800873e:	4b54      	ldr	r3, [pc, #336]	; (8008890 <STMpil_step+0x2290>)
 8008740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008744:	f7f7 ff04 	bl	8000550 <__aeabi_dmul>
 8008748:	4602      	mov	r2, r0
 800874a:	460b      	mov	r3, r1
 800874c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8008750:	f7f7 fd48 	bl	80001e4 <__adddf3>
 8008754:	4602      	mov	r2, r0
 8008756:	460b      	mov	r3, r1
 8008758:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xtmp[0] = accum;
 800875c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800875e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008762:	e9c1 2300 	strd	r2, r3, [r1]
    accum = 0.0;
 8008766:	f04f 0200 	mov.w	r2, #0
 800876a:	f04f 0300 	mov.w	r3, #0
 800876e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    accum += *(As++) * STMpil_DW.StateSpace_DSTATE[0];
 8008772:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008774:	f103 0208 	add.w	r2, r3, #8
 8008778:	64fa      	str	r2, [r7, #76]	; 0x4c
 800877a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800877e:	4b40      	ldr	r3, [pc, #256]	; (8008880 <STMpil_step+0x2280>)
 8008780:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8008784:	f7f7 fee4 	bl	8000550 <__aeabi_dmul>
 8008788:	4602      	mov	r2, r0
 800878a:	460b      	mov	r3, r1
 800878c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8008790:	f7f7 fd28 	bl	80001e4 <__adddf3>
 8008794:	4602      	mov	r2, r0
 8008796:	460b      	mov	r3, r1
 8008798:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    accum += *(As++) * STMpil_DW.StateSpace_DSTATE[1];
 800879c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800879e:	f103 0208 	add.w	r2, r3, #8
 80087a2:	64fa      	str	r2, [r7, #76]	; 0x4c
 80087a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80087a8:	4b35      	ldr	r3, [pc, #212]	; (8008880 <STMpil_step+0x2280>)
 80087aa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80087ae:	f7f7 fecf 	bl	8000550 <__aeabi_dmul>
 80087b2:	4602      	mov	r2, r0
 80087b4:	460b      	mov	r3, r1
 80087b6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80087ba:	f7f7 fd13 	bl	80001e4 <__adddf3>
 80087be:	4602      	mov	r2, r0
 80087c0:	460b      	mov	r3, r1
 80087c2:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    accum += *(Bs++) * (STMpil_P.SwitchCurrents_Value[0]);
 80087c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087c8:	f103 0208 	add.w	r2, r3, #8
 80087cc:	64ba      	str	r2, [r7, #72]	; 0x48
 80087ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80087d2:	4b2c      	ldr	r3, [pc, #176]	; (8008884 <STMpil_step+0x2284>)
 80087d4:	e9d3 2352 	ldrd	r2, r3, [r3, #328]	; 0x148
 80087d8:	f7f7 feba 	bl	8000550 <__aeabi_dmul>
 80087dc:	4602      	mov	r2, r0
 80087de:	460b      	mov	r3, r1
 80087e0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80087e4:	f7f7 fcfe 	bl	80001e4 <__adddf3>
 80087e8:	4602      	mov	r2, r0
 80087ea:	460b      	mov	r3, r1
 80087ec:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    accum += *(Bs++) * (STMpil_P.SwitchCurrents_Value[1]);
 80087f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087f2:	f103 0208 	add.w	r2, r3, #8
 80087f6:	64ba      	str	r2, [r7, #72]	; 0x48
 80087f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80087fc:	4b21      	ldr	r3, [pc, #132]	; (8008884 <STMpil_step+0x2284>)
 80087fe:	e9d3 2354 	ldrd	r2, r3, [r3, #336]	; 0x150
 8008802:	f7f7 fea5 	bl	8000550 <__aeabi_dmul>
 8008806:	4602      	mov	r2, r0
 8008808:	460b      	mov	r3, r1
 800880a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800880e:	f7f7 fce9 	bl	80001e4 <__adddf3>
 8008812:	4602      	mov	r2, r0
 8008814:	460b      	mov	r3, r1
 8008816:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    accum += *(Bs++) * STMpil_B.Switch2;
 800881a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800881c:	f103 0208 	add.w	r2, r3, #8
 8008820:	64ba      	str	r2, [r7, #72]	; 0x48
 8008822:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008826:	4b19      	ldr	r3, [pc, #100]	; (800888c <STMpil_step+0x228c>)
 8008828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800882c:	f7f7 fe90 	bl	8000550 <__aeabi_dmul>
 8008830:	4602      	mov	r2, r0
 8008832:	460b      	mov	r3, r1
 8008834:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8008838:	f7f7 fcd4 	bl	80001e4 <__adddf3>
 800883c:	4602      	mov	r2, r0
 800883e:	460b      	mov	r3, r1
 8008840:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    accum += *(Bs++) * STMpil_U.In1;
 8008844:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008846:	f103 0208 	add.w	r2, r3, #8
 800884a:	64ba      	str	r2, [r7, #72]	; 0x48
 800884c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008850:	4b0f      	ldr	r3, [pc, #60]	; (8008890 <STMpil_step+0x2290>)
 8008852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008856:	f7f7 fe7b 	bl	8000550 <__aeabi_dmul>
 800885a:	4602      	mov	r2, r0
 800885c:	460b      	mov	r3, r1
 800885e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8008862:	f7f7 fcbf 	bl	80001e4 <__adddf3>
 8008866:	4602      	mov	r2, r0
 8008868:	460b      	mov	r3, r1
 800886a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xtmp[1] = accum;
 800886e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008870:	f103 0108 	add.w	r1, r3, #8
 8008874:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008878:	e9c1 2300 	strd	r2, r3, [r1]
 800887c:	e00a      	b.n	8008894 <STMpil_step+0x2294>
 800887e:	bf00      	nop
 8008880:	20000538 	.word	0x20000538
 8008884:	20000010 	.word	0x20000010
 8008888:	20000620 	.word	0x20000620
 800888c:	200004f8 	.word	0x200004f8
 8008890:	20000618 	.word	0x20000618
    STMpil_DW.StateSpace_DSTATE[0] = xtmp[0];
 8008894:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800889a:	4927      	ldr	r1, [pc, #156]	; (8008938 <STMpil_step+0x2338>)
 800889c:	e9c1 2306 	strd	r2, r3, [r1, #24]
    STMpil_DW.StateSpace_DSTATE[1] = xtmp[1];
 80088a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088a2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80088a6:	4924      	ldr	r1, [pc, #144]	; (8008938 <STMpil_step+0x2338>)
 80088a8:	e9c1 2308 	strd	r2, r3, [r1, #32]

    {
      int_T *gState = (int_T*)STMpil_DW.StateSpace_PWORK.G_STATE;
 80088ac:	4b22      	ldr	r3, [pc, #136]	; (8008938 <STMpil_step+0x2338>)
 80088ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80088b2:	637b      	str	r3, [r7, #52]	; 0x34

      /* Store switch gates values for next step */
      *(gState++) = (int_T) STMpil_B.DataTypeConversion_ni55;
 80088b4:	4b21      	ldr	r3, [pc, #132]	; (800893c <STMpil_step+0x233c>)
 80088b6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80088ba:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 80088bc:	1d21      	adds	r1, r4, #4
 80088be:	6379      	str	r1, [r7, #52]	; 0x34
 80088c0:	4610      	mov	r0, r2
 80088c2:	4619      	mov	r1, r3
 80088c4:	f7f8 f8de 	bl	8000a84 <__aeabi_d2iz>
 80088c8:	4603      	mov	r3, r0
 80088ca:	6023      	str	r3, [r4, #0]
      *(gState++) = (int_T) STMpil_B.DataTypeConversion;
 80088cc:	4b1b      	ldr	r3, [pc, #108]	; (800893c <STMpil_step+0x233c>)
 80088ce:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80088d2:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 80088d4:	1d21      	adds	r1, r4, #4
 80088d6:	6379      	str	r1, [r7, #52]	; 0x34
 80088d8:	4610      	mov	r0, r2
 80088da:	4619      	mov	r1, r3
 80088dc:	f7f8 f8d2 	bl	8000a84 <__aeabi_d2iz>
 80088e0:	4603      	mov	r3, r0
 80088e2:	6023      	str	r3, [r4, #0]
    }
  }

  /* Saturate: '<S113>/Saturation' */
  if (STMpil_Y.SOC > STMpil_P.Saturation_UpperSat_egqb) {
 80088e4:	4b16      	ldr	r3, [pc, #88]	; (8008940 <STMpil_step+0x2340>)
 80088e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80088ea:	4b16      	ldr	r3, [pc, #88]	; (8008944 <STMpil_step+0x2344>)
 80088ec:	e9d3 23b2 	ldrd	r2, r3, [r3, #712]	; 0x2c8
 80088f0:	f7f8 f8be 	bl	8000a70 <__aeabi_dcmpgt>
 80088f4:	4603      	mov	r3, r0
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d006      	beq.n	8008908 <STMpil_step+0x2308>
    /* Outport: '<Root>/<SOC (%)>' */
    STMpil_Y.SOC = STMpil_P.Saturation_UpperSat_egqb;
 80088fa:	4b12      	ldr	r3, [pc, #72]	; (8008944 <STMpil_step+0x2344>)
 80088fc:	e9d3 23b2 	ldrd	r2, r3, [r3, #712]	; 0x2c8
 8008900:	490f      	ldr	r1, [pc, #60]	; (8008940 <STMpil_step+0x2340>)
 8008902:	e9c1 2300 	strd	r2, r3, [r1]
    }
  }

  /* End of Saturate: '<S113>/Saturation' */
  /* End of Outputs for SubSystem: '<Root>/STMpil' */
}
 8008906:	e011      	b.n	800892c <STMpil_step+0x232c>
    if (STMpil_Y.SOC < STMpil_P.Saturation_LowerSat_dzqb) {
 8008908:	4b0d      	ldr	r3, [pc, #52]	; (8008940 <STMpil_step+0x2340>)
 800890a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800890e:	4b0d      	ldr	r3, [pc, #52]	; (8008944 <STMpil_step+0x2344>)
 8008910:	e9d3 23b4 	ldrd	r2, r3, [r3, #720]	; 0x2d0
 8008914:	f7f8 f88e 	bl	8000a34 <__aeabi_dcmplt>
 8008918:	4603      	mov	r3, r0
 800891a:	2b00      	cmp	r3, #0
 800891c:	d100      	bne.n	8008920 <STMpil_step+0x2320>
}
 800891e:	e005      	b.n	800892c <STMpil_step+0x232c>
      STMpil_Y.SOC = STMpil_P.Saturation_LowerSat_dzqb;
 8008920:	4b08      	ldr	r3, [pc, #32]	; (8008944 <STMpil_step+0x2344>)
 8008922:	e9d3 23b4 	ldrd	r2, r3, [r3, #720]	; 0x2d0
 8008926:	4906      	ldr	r1, [pc, #24]	; (8008940 <STMpil_step+0x2340>)
 8008928:	e9c1 2300 	strd	r2, r3, [r1]
}
 800892c:	bf00      	nop
 800892e:	f507 7782 	add.w	r7, r7, #260	; 0x104
 8008932:	46bd      	mov	sp, r7
 8008934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008938:	20000538 	.word	0x20000538
 800893c:	200004f8 	.word	0x200004f8
 8008940:	20000620 	.word	0x20000620
 8008944:	20000010 	.word	0x20000010

08008948 <STMpil_initialize>:

/* Model initialize function */
void STMpil_initialize(void)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b090      	sub	sp, #64	; 0x40
 800894c:	af00      	add	r7, sp, #0
  /* Registration code */

  /* initialize non-finites */
  rt_InitInfAndNaN(sizeof(real_T));
 800894e:	2008      	movs	r0, #8
 8008950:	f000 fb22 	bl	8008f98 <rt_InitInfAndNaN>

  /* non-finite (run-time) assignments */
  STMpil_P.Saturation_LowerSat = rtMinusInf;
 8008954:	4bac      	ldr	r3, [pc, #688]	; (8008c08 <STMpil_initialize+0x2c0>)
 8008956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800895a:	49ac      	ldr	r1, [pc, #688]	; (8008c0c <STMpil_initialize+0x2c4>)
 800895c:	e9c1 232e 	strd	r2, r3, [r1, #184]	; 0xb8
  STMpil_P.inti_LowerSat = rtMinusInf;
 8008960:	4ba9      	ldr	r3, [pc, #676]	; (8008c08 <STMpil_initialize+0x2c0>)
 8008962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008966:	49a9      	ldr	r1, [pc, #676]	; (8008c0c <STMpil_initialize+0x2c4>)
 8008968:	e9c1 234e 	strd	r2, r3, [r1, #312]	; 0x138

  /* block I/O */
  (void) memset(((void *) &STMpil_B), 0,
 800896c:	2240      	movs	r2, #64	; 0x40
 800896e:	2100      	movs	r1, #0
 8008970:	48a7      	ldr	r0, [pc, #668]	; (8008c10 <STMpil_initialize+0x2c8>)
 8008972:	f002 fe9b 	bl	800b6ac <memset>
                sizeof(B_STMpil_T));

  /* states (dwork) */
  (void) memset((void *)&STMpil_DW, 0,
 8008976:	22e0      	movs	r2, #224	; 0xe0
 8008978:	2100      	movs	r1, #0
 800897a:	48a6      	ldr	r0, [pc, #664]	; (8008c14 <STMpil_initialize+0x2cc>)
 800897c:	f002 fe96 	bl	800b6ac <memset>
                sizeof(DW_STMpil_T));

  /* external inputs */
  STMpil_U.In1 = 0.0;
 8008980:	49a5      	ldr	r1, [pc, #660]	; (8008c18 <STMpil_initialize+0x2d0>)
 8008982:	f04f 0200 	mov.w	r2, #0
 8008986:	f04f 0300 	mov.w	r3, #0
 800898a:	e9c1 2300 	strd	r2, r3, [r1]

  /* external outputs */
  (void) memset((void *)&STMpil_Y, 0,
 800898e:	2218      	movs	r2, #24
 8008990:	2100      	movs	r1, #0
 8008992:	48a2      	ldr	r0, [pc, #648]	; (8008c1c <STMpil_initialize+0x2d4>)
 8008994:	f002 fe8a 	bl	800b6ac <memset>
     *  Inport: '<Root>/In1'
     */

    /* S-Function block: <S127>/State-Space */
    {
      STMpil_DW.StateSpace_PWORK.AS = (real_T*)calloc(2 * 2, sizeof(real_T));
 8008998:	2108      	movs	r1, #8
 800899a:	2004      	movs	r0, #4
 800899c:	f002 fe36 	bl	800b60c <calloc>
 80089a0:	4603      	mov	r3, r0
 80089a2:	461a      	mov	r2, r3
 80089a4:	4b9b      	ldr	r3, [pc, #620]	; (8008c14 <STMpil_initialize+0x2cc>)
 80089a6:	651a      	str	r2, [r3, #80]	; 0x50
      STMpil_DW.StateSpace_PWORK.BS = (real_T*)calloc(2 * 4, sizeof(real_T));
 80089a8:	2108      	movs	r1, #8
 80089aa:	2008      	movs	r0, #8
 80089ac:	f002 fe2e 	bl	800b60c <calloc>
 80089b0:	4603      	mov	r3, r0
 80089b2:	461a      	mov	r2, r3
 80089b4:	4b97      	ldr	r3, [pc, #604]	; (8008c14 <STMpil_initialize+0x2cc>)
 80089b6:	655a      	str	r2, [r3, #84]	; 0x54
      STMpil_DW.StateSpace_PWORK.CS = (real_T*)calloc(3 * 2, sizeof(real_T));
 80089b8:	2108      	movs	r1, #8
 80089ba:	2006      	movs	r0, #6
 80089bc:	f002 fe26 	bl	800b60c <calloc>
 80089c0:	4603      	mov	r3, r0
 80089c2:	461a      	mov	r2, r3
 80089c4:	4b93      	ldr	r3, [pc, #588]	; (8008c14 <STMpil_initialize+0x2cc>)
 80089c6:	659a      	str	r2, [r3, #88]	; 0x58
      STMpil_DW.StateSpace_PWORK.DS = (real_T*)calloc(3 * 4, sizeof(real_T));
 80089c8:	2108      	movs	r1, #8
 80089ca:	200c      	movs	r0, #12
 80089cc:	f002 fe1e 	bl	800b60c <calloc>
 80089d0:	4603      	mov	r3, r0
 80089d2:	461a      	mov	r2, r3
 80089d4:	4b8f      	ldr	r3, [pc, #572]	; (8008c14 <STMpil_initialize+0x2cc>)
 80089d6:	65da      	str	r2, [r3, #92]	; 0x5c
      STMpil_DW.StateSpace_PWORK.DX_COL = (real_T*)calloc(3, sizeof(real_T));
 80089d8:	2108      	movs	r1, #8
 80089da:	2003      	movs	r0, #3
 80089dc:	f002 fe16 	bl	800b60c <calloc>
 80089e0:	4603      	mov	r3, r0
 80089e2:	461a      	mov	r2, r3
 80089e4:	4b8b      	ldr	r3, [pc, #556]	; (8008c14 <STMpil_initialize+0x2cc>)
 80089e6:	661a      	str	r2, [r3, #96]	; 0x60
      STMpil_DW.StateSpace_PWORK.TMP2 = (real_T*)calloc(4, sizeof(real_T));
 80089e8:	2108      	movs	r1, #8
 80089ea:	2004      	movs	r0, #4
 80089ec:	f002 fe0e 	bl	800b60c <calloc>
 80089f0:	4603      	mov	r3, r0
 80089f2:	461a      	mov	r2, r3
 80089f4:	4b87      	ldr	r3, [pc, #540]	; (8008c14 <STMpil_initialize+0x2cc>)
 80089f6:	66da      	str	r2, [r3, #108]	; 0x6c
      STMpil_DW.StateSpace_PWORK.BD_COL = (real_T*)calloc(2, sizeof(real_T));
 80089f8:	2108      	movs	r1, #8
 80089fa:	2002      	movs	r0, #2
 80089fc:	f002 fe06 	bl	800b60c <calloc>
 8008a00:	4603      	mov	r3, r0
 8008a02:	461a      	mov	r2, r3
 8008a04:	4b83      	ldr	r3, [pc, #524]	; (8008c14 <STMpil_initialize+0x2cc>)
 8008a06:	665a      	str	r2, [r3, #100]	; 0x64
      STMpil_DW.StateSpace_PWORK.TMP1 = (real_T*)calloc(2, sizeof(real_T));
 8008a08:	2108      	movs	r1, #8
 8008a0a:	2002      	movs	r0, #2
 8008a0c:	f002 fdfe 	bl	800b60c <calloc>
 8008a10:	4603      	mov	r3, r0
 8008a12:	461a      	mov	r2, r3
 8008a14:	4b7f      	ldr	r3, [pc, #508]	; (8008c14 <STMpil_initialize+0x2cc>)
 8008a16:	669a      	str	r2, [r3, #104]	; 0x68
      STMpil_DW.StateSpace_PWORK.XTMP = (real_T*)calloc(2, sizeof(real_T));
 8008a18:	2108      	movs	r1, #8
 8008a1a:	2002      	movs	r0, #2
 8008a1c:	f002 fdf6 	bl	800b60c <calloc>
 8008a20:	4603      	mov	r3, r0
 8008a22:	461a      	mov	r2, r3
 8008a24:	4b7b      	ldr	r3, [pc, #492]	; (8008c14 <STMpil_initialize+0x2cc>)
 8008a26:	671a      	str	r2, [r3, #112]	; 0x70
      STMpil_DW.StateSpace_PWORK.SWITCH_STATUS = (int_T*)calloc(2, sizeof(int_T));
 8008a28:	2104      	movs	r1, #4
 8008a2a:	2002      	movs	r0, #2
 8008a2c:	f002 fdee 	bl	800b60c <calloc>
 8008a30:	4603      	mov	r3, r0
 8008a32:	461a      	mov	r2, r3
 8008a34:	4b77      	ldr	r3, [pc, #476]	; (8008c14 <STMpil_initialize+0x2cc>)
 8008a36:	675a      	str	r2, [r3, #116]	; 0x74
      STMpil_DW.StateSpace_PWORK.SW_CHG = (int_T*)calloc(2, sizeof(int_T));
 8008a38:	2104      	movs	r1, #4
 8008a3a:	2002      	movs	r0, #2
 8008a3c:	f002 fde6 	bl	800b60c <calloc>
 8008a40:	4603      	mov	r3, r0
 8008a42:	461a      	mov	r2, r3
 8008a44:	4b73      	ldr	r3, [pc, #460]	; (8008c14 <STMpil_initialize+0x2cc>)
 8008a46:	67da      	str	r2, [r3, #124]	; 0x7c
      STMpil_DW.StateSpace_PWORK.G_STATE = (int_T*)calloc(2, sizeof(int_T));
 8008a48:	2104      	movs	r1, #4
 8008a4a:	2002      	movs	r0, #2
 8008a4c:	f002 fdde 	bl	800b60c <calloc>
 8008a50:	4603      	mov	r3, r0
 8008a52:	461a      	mov	r2, r3
 8008a54:	4b6f      	ldr	r3, [pc, #444]	; (8008c14 <STMpil_initialize+0x2cc>)
 8008a56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      STMpil_DW.StateSpace_PWORK.Y_SWITCH = (real_T*)calloc(2, sizeof(real_T));
 8008a5a:	2108      	movs	r1, #8
 8008a5c:	2002      	movs	r0, #2
 8008a5e:	f002 fdd5 	bl	800b60c <calloc>
 8008a62:	4603      	mov	r3, r0
 8008a64:	461a      	mov	r2, r3
 8008a66:	4b6b      	ldr	r3, [pc, #428]	; (8008c14 <STMpil_initialize+0x2cc>)
 8008a68:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      STMpil_DW.StateSpace_PWORK.SWITCH_TYPES = (int_T*)calloc(2, sizeof(int_T));
 8008a6c:	2104      	movs	r1, #4
 8008a6e:	2002      	movs	r0, #2
 8008a70:	f002 fdcc 	bl	800b60c <calloc>
 8008a74:	4603      	mov	r3, r0
 8008a76:	461a      	mov	r2, r3
 8008a78:	4b66      	ldr	r3, [pc, #408]	; (8008c14 <STMpil_initialize+0x2cc>)
 8008a7a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
      STMpil_DW.StateSpace_PWORK.IDX_OUT_SW = (int_T*)calloc(2, sizeof(int_T));
 8008a7e:	2104      	movs	r1, #4
 8008a80:	2002      	movs	r0, #2
 8008a82:	f002 fdc3 	bl	800b60c <calloc>
 8008a86:	4603      	mov	r3, r0
 8008a88:	461a      	mov	r2, r3
 8008a8a:	4b62      	ldr	r3, [pc, #392]	; (8008c14 <STMpil_initialize+0x2cc>)
 8008a8c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
      STMpil_DW.StateSpace_PWORK.SWITCH_STATUS_INIT = (int_T*)calloc(2, sizeof
 8008a90:	2104      	movs	r1, #4
 8008a92:	2002      	movs	r0, #2
 8008a94:	f002 fdba 	bl	800b60c <calloc>
 8008a98:	4603      	mov	r3, r0
 8008a9a:	461a      	mov	r2, r3
 8008a9c:	4b5d      	ldr	r3, [pc, #372]	; (8008c14 <STMpil_initialize+0x2cc>)
 8008a9e:	679a      	str	r2, [r3, #120]	; 0x78
        (int_T));
      STMpil_DW.StateSpace_PWORK.USWLAST = (real_T*)calloc(2, sizeof(real_T));
 8008aa0:	2108      	movs	r1, #8
 8008aa2:	2002      	movs	r0, #2
 8008aa4:	f002 fdb2 	bl	800b60c <calloc>
 8008aa8:	4603      	mov	r3, r0
 8008aaa:	461a      	mov	r2, r3
 8008aac:	4b59      	ldr	r3, [pc, #356]	; (8008c14 <STMpil_initialize+0x2cc>)
 8008aae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* InitializeConditions for Memory: '<S113>/it init1' */
    STMpil_DW.itinit1_PreviousInput = STMpil_P.itinit1_InitialCondition;
 8008ab2:	4b56      	ldr	r3, [pc, #344]	; (8008c0c <STMpil_initialize+0x2c4>)
 8008ab4:	e9d3 233e 	ldrd	r2, r3, [r3, #248]	; 0xf8
 8008ab8:	4956      	ldr	r1, [pc, #344]	; (8008c14 <STMpil_initialize+0x2cc>)
 8008aba:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    /* InitializeConditions for DiscreteTransferFcn: '<S113>/Current filter' */
    STMpil_DW.Currentfilter_states = STMpil_P.Currentfilter_InitialStates;
 8008abe:	4b53      	ldr	r3, [pc, #332]	; (8008c0c <STMpil_initialize+0x2c4>)
 8008ac0:	e9d3 2346 	ldrd	r2, r3, [r3, #280]	; 0x118
 8008ac4:	4953      	ldr	r1, [pc, #332]	; (8008c14 <STMpil_initialize+0x2cc>)
 8008ac6:	e9c1 2300 	strd	r2, r3, [r1]

    /* InitializeConditions for Memory: '<S113>/it init' incorporates:
     *  DiscreteIntegrator: '<S118>/Discrete-Time Integrator'
     */
    itinit_PreviousInput_tmp = 1.0 - (STMpil_P.Battery_SOC / 100.0);
 8008aca:	4b50      	ldr	r3, [pc, #320]	; (8008c0c <STMpil_initialize+0x2c4>)
 8008acc:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8008ad0:	f04f 0200 	mov.w	r2, #0
 8008ad4:	4b52      	ldr	r3, [pc, #328]	; (8008c20 <STMpil_initialize+0x2d8>)
 8008ad6:	f7f7 fe65 	bl	80007a4 <__aeabi_ddiv>
 8008ada:	4602      	mov	r2, r0
 8008adc:	460b      	mov	r3, r1
 8008ade:	f04f 0000 	mov.w	r0, #0
 8008ae2:	4950      	ldr	r1, [pc, #320]	; (8008c24 <STMpil_initialize+0x2dc>)
 8008ae4:	f7f7 fb7c 	bl	80001e0 <__aeabi_dsub>
 8008ae8:	4602      	mov	r2, r0
 8008aea:	460b      	mov	r3, r1
 8008aec:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    STMpil_DW.itinit_PreviousInput = ((itinit_PreviousInput_tmp *
 8008af0:	a33d      	add	r3, pc, #244	; (adr r3, 8008be8 <STMpil_initialize+0x2a0>)
 8008af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008af6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8008afa:	f7f7 fd29 	bl	8000550 <__aeabi_dmul>
 8008afe:	4602      	mov	r2, r0
 8008b00:	460b      	mov	r3, r1
 8008b02:	4610      	mov	r0, r2
 8008b04:	4619      	mov	r1, r3
      2.1750499999999882) * 0.942507068803021) * 3600.0;
 8008b06:	a33a      	add	r3, pc, #232	; (adr r3, 8008bf0 <STMpil_initialize+0x2a8>)
 8008b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b0c:	f7f7 fd20 	bl	8000550 <__aeabi_dmul>
 8008b10:	4602      	mov	r2, r0
 8008b12:	460b      	mov	r3, r1
 8008b14:	4610      	mov	r0, r2
 8008b16:	4619      	mov	r1, r3
 8008b18:	a337      	add	r3, pc, #220	; (adr r3, 8008bf8 <STMpil_initialize+0x2b0>)
 8008b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b1e:	f7f7 fd17 	bl	8000550 <__aeabi_dmul>
 8008b22:	4602      	mov	r2, r0
 8008b24:	460b      	mov	r3, r1
    STMpil_DW.itinit_PreviousInput = ((itinit_PreviousInput_tmp *
 8008b26:	493b      	ldr	r1, [pc, #236]	; (8008c14 <STMpil_initialize+0x2cc>)
 8008b28:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    /* InitializeConditions for DiscreteIntegrator: '<S113>/int(i)' */
    STMpil_DW.inti_PrevResetState = 2;
 8008b2c:	4b39      	ldr	r3, [pc, #228]	; (8008c14 <STMpil_initialize+0x2cc>)
 8008b2e:	2202      	movs	r2, #2
 8008b30:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
    STMpil_DW.inti_IC_LOADING = 1U;
 8008b34:	4b37      	ldr	r3, [pc, #220]	; (8008c14 <STMpil_initialize+0x2cc>)
 8008b36:	2201      	movs	r2, #1
 8008b38:	f883 20de 	strb.w	r2, [r3, #222]	; 0xde

    /* InitializeConditions for DiscreteIntegrator: '<S118>/Discrete-Time Integrator' */
    STMpil_DW.DiscreteTimeIntegrator_DSTATE = 0.21089319159632841 * exp((-15.0 *
 8008b3c:	f04f 0200 	mov.w	r2, #0
 8008b40:	4b39      	ldr	r3, [pc, #228]	; (8008c28 <STMpil_initialize+0x2e0>)
 8008b42:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8008b46:	f7f7 fd03 	bl	8000550 <__aeabi_dmul>
 8008b4a:	4602      	mov	r2, r0
 8008b4c:	460b      	mov	r3, r1
 8008b4e:	4610      	mov	r0, r2
 8008b50:	4619      	mov	r1, r3
 8008b52:	a325      	add	r3, pc, #148	; (adr r3, 8008be8 <STMpil_initialize+0x2a0>)
 8008b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b58:	f7f7 fcfa 	bl	8000550 <__aeabi_dmul>
 8008b5c:	4602      	mov	r2, r0
 8008b5e:	460b      	mov	r3, r1
 8008b60:	ec43 2b17 	vmov	d7, r2, r3
 8008b64:	eeb0 0a47 	vmov.f32	s0, s14
 8008b68:	eef0 0a67 	vmov.f32	s1, s15
 8008b6c:	f002 febc 	bl	800b8e8 <exp>
 8008b70:	ec51 0b10 	vmov	r0, r1, d0
 8008b74:	a322      	add	r3, pc, #136	; (adr r3, 8008c00 <STMpil_initialize+0x2b8>)
 8008b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b7a:	f7f7 fce9 	bl	8000550 <__aeabi_dmul>
 8008b7e:	4602      	mov	r2, r0
 8008b80:	460b      	mov	r3, r1
 8008b82:	4924      	ldr	r1, [pc, #144]	; (8008c14 <STMpil_initialize+0x2cc>)
 8008b84:	e9c1 2304 	strd	r2, r3, [r1, #16]
      itinit_PreviousInput_tmp) * 2.1750499999999882);

    /* InitializeConditions for Memory: '<S113>/Memory2' */
    STMpil_DW.Memory2_PreviousInput = STMpil_P.Memory2_InitialCondition;
 8008b88:	4b20      	ldr	r3, [pc, #128]	; (8008c0c <STMpil_initialize+0x2c4>)
 8008b8a:	e9d3 2360 	ldrd	r2, r3, [r3, #384]	; 0x180
 8008b8e:	4921      	ldr	r1, [pc, #132]	; (8008c14 <STMpil_initialize+0x2cc>)
 8008b90:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
     *  Constant: '<S129>/SwitchCurrents'
     *  Inport: '<Root>/In1'
     */
    {
      int32_T i, j;
      real_T *As = (real_T*)STMpil_DW.StateSpace_PWORK.AS;
 8008b94:	4b1f      	ldr	r3, [pc, #124]	; (8008c14 <STMpil_initialize+0x2cc>)
 8008b96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b98:	62fb      	str	r3, [r7, #44]	; 0x2c
      real_T *Bs = (real_T*)STMpil_DW.StateSpace_PWORK.BS;
 8008b9a:	4b1e      	ldr	r3, [pc, #120]	; (8008c14 <STMpil_initialize+0x2cc>)
 8008b9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b9e:	62bb      	str	r3, [r7, #40]	; 0x28
      real_T *Cs = (real_T*)STMpil_DW.StateSpace_PWORK.CS;
 8008ba0:	4b1c      	ldr	r3, [pc, #112]	; (8008c14 <STMpil_initialize+0x2cc>)
 8008ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ba4:	627b      	str	r3, [r7, #36]	; 0x24
      real_T *Ds = (real_T*)STMpil_DW.StateSpace_PWORK.DS;
 8008ba6:	4b1b      	ldr	r3, [pc, #108]	; (8008c14 <STMpil_initialize+0x2cc>)
 8008ba8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008baa:	623b      	str	r3, [r7, #32]
      real_T *X0 = (real_T*)&STMpil_DW.StateSpace_DSTATE[0];
 8008bac:	4b1f      	ldr	r3, [pc, #124]	; (8008c2c <STMpil_initialize+0x2e4>)
 8008bae:	61fb      	str	r3, [r7, #28]
      for (i = 0; i < 2; i++) {
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008bb4:	e00f      	b.n	8008bd6 <STMpil_initialize+0x28e>
        X0[i] = (STMpil_P.StateSpace_X0_param[i]);
 8008bb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bb8:	00db      	lsls	r3, r3, #3
 8008bba:	69fa      	ldr	r2, [r7, #28]
 8008bbc:	18d1      	adds	r1, r2, r3
 8008bbe:	4a13      	ldr	r2, [pc, #76]	; (8008c0c <STMpil_initialize+0x2c4>)
 8008bc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bc2:	334f      	adds	r3, #79	; 0x4f
 8008bc4:	00db      	lsls	r3, r3, #3
 8008bc6:	4413      	add	r3, r2
 8008bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bcc:	e9c1 2300 	strd	r2, r3, [r1]
      for (i = 0; i < 2; i++) {
 8008bd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bd2:	3301      	adds	r3, #1
 8008bd4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008bd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bd8:	2b01      	cmp	r3, #1
 8008bda:	ddec      	ble.n	8008bb6 <STMpil_initialize+0x26e>
      }

      /* Copy and transpose A and B */
      for (i=0; i<2; i++) {
 8008bdc:	2300      	movs	r3, #0
 8008bde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008be0:	e05e      	b.n	8008ca0 <STMpil_initialize+0x358>
        for (j=0; j<2; j++)
 8008be2:	2300      	movs	r3, #0
 8008be4:	63bb      	str	r3, [r7, #56]	; 0x38
 8008be6:	e039      	b.n	8008c5c <STMpil_initialize+0x314>
 8008be8:	9d495168 	.word	0x9d495168
 8008bec:	40016680 	.word	0x40016680
 8008bf0:	95983fe0 	.word	0x95983fe0
 8008bf4:	3fee2904 	.word	0x3fee2904
 8008bf8:	00000000 	.word	0x00000000
 8008bfc:	40ac2000 	.word	0x40ac2000
 8008c00:	506d7a3a 	.word	0x506d7a3a
 8008c04:	3fcafe8c 	.word	0x3fcafe8c
 8008c08:	20000640 	.word	0x20000640
 8008c0c:	20000010 	.word	0x20000010
 8008c10:	200004f8 	.word	0x200004f8
 8008c14:	20000538 	.word	0x20000538
 8008c18:	20000618 	.word	0x20000618
 8008c1c:	20000620 	.word	0x20000620
 8008c20:	40590000 	.word	0x40590000
 8008c24:	3ff00000 	.word	0x3ff00000
 8008c28:	c02e0000 	.word	0xc02e0000
 8008c2c:	20000550 	.word	0x20000550
          As[i*2 + j] = (STMpil_P.StateSpace_AS_param[i + j*2]);
 8008c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c32:	005a      	lsls	r2, r3, #1
 8008c34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c36:	4413      	add	r3, r2
 8008c38:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008c3a:	0051      	lsls	r1, r2, #1
 8008c3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008c3e:	440a      	add	r2, r1
 8008c40:	00d2      	lsls	r2, r2, #3
 8008c42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008c44:	4411      	add	r1, r2
 8008c46:	4a6e      	ldr	r2, [pc, #440]	; (8008e00 <STMpil_initialize+0x4b8>)
 8008c48:	3331      	adds	r3, #49	; 0x31
 8008c4a:	00db      	lsls	r3, r3, #3
 8008c4c:	4413      	add	r3, r2
 8008c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c52:	e9c1 2300 	strd	r2, r3, [r1]
        for (j=0; j<2; j++)
 8008c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c58:	3301      	adds	r3, #1
 8008c5a:	63bb      	str	r3, [r7, #56]	; 0x38
 8008c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c5e:	2b01      	cmp	r3, #1
 8008c60:	dde6      	ble.n	8008c30 <STMpil_initialize+0x2e8>
        for (j=0; j<4; j++)
 8008c62:	2300      	movs	r3, #0
 8008c64:	63bb      	str	r3, [r7, #56]	; 0x38
 8008c66:	e015      	b.n	8008c94 <STMpil_initialize+0x34c>
          Bs[i*4 + j] = (STMpil_P.StateSpace_BS_param[i + j*2]);
 8008c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c6a:	005a      	lsls	r2, r3, #1
 8008c6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c6e:	4413      	add	r3, r2
 8008c70:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008c72:	0091      	lsls	r1, r2, #2
 8008c74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008c76:	440a      	add	r2, r1
 8008c78:	00d2      	lsls	r2, r2, #3
 8008c7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008c7c:	4411      	add	r1, r2
 8008c7e:	4a60      	ldr	r2, [pc, #384]	; (8008e00 <STMpil_initialize+0x4b8>)
 8008c80:	3335      	adds	r3, #53	; 0x35
 8008c82:	00db      	lsls	r3, r3, #3
 8008c84:	4413      	add	r3, r2
 8008c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c8a:	e9c1 2300 	strd	r2, r3, [r1]
        for (j=0; j<4; j++)
 8008c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c90:	3301      	adds	r3, #1
 8008c92:	63bb      	str	r3, [r7, #56]	; 0x38
 8008c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c96:	2b03      	cmp	r3, #3
 8008c98:	dde6      	ble.n	8008c68 <STMpil_initialize+0x320>
      for (i=0; i<2; i++) {
 8008c9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c9c:	3301      	adds	r3, #1
 8008c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ca0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ca2:	2b01      	cmp	r3, #1
 8008ca4:	dd9d      	ble.n	8008be2 <STMpil_initialize+0x29a>
      }

      /* Copy and transpose C */
      for (i=0; i<3; i++) {
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008caa:	e020      	b.n	8008cee <STMpil_initialize+0x3a6>
        for (j=0; j<2; j++)
 8008cac:	2300      	movs	r3, #0
 8008cae:	63bb      	str	r3, [r7, #56]	; 0x38
 8008cb0:	e017      	b.n	8008ce2 <STMpil_initialize+0x39a>
          Cs[i*2 + j] = (STMpil_P.StateSpace_CS_param[i + j*3]);
 8008cb2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008cb4:	4613      	mov	r3, r2
 8008cb6:	005b      	lsls	r3, r3, #1
 8008cb8:	441a      	add	r2, r3
 8008cba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cbc:	4413      	add	r3, r2
 8008cbe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008cc0:	0051      	lsls	r1, r2, #1
 8008cc2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008cc4:	440a      	add	r2, r1
 8008cc6:	00d2      	lsls	r2, r2, #3
 8008cc8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008cca:	4411      	add	r1, r2
 8008ccc:	4a4c      	ldr	r2, [pc, #304]	; (8008e00 <STMpil_initialize+0x4b8>)
 8008cce:	333d      	adds	r3, #61	; 0x3d
 8008cd0:	00db      	lsls	r3, r3, #3
 8008cd2:	4413      	add	r3, r2
 8008cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cd8:	e9c1 2300 	strd	r2, r3, [r1]
        for (j=0; j<2; j++)
 8008cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cde:	3301      	adds	r3, #1
 8008ce0:	63bb      	str	r3, [r7, #56]	; 0x38
 8008ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ce4:	2b01      	cmp	r3, #1
 8008ce6:	dde4      	ble.n	8008cb2 <STMpil_initialize+0x36a>
      for (i=0; i<3; i++) {
 8008ce8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cea:	3301      	adds	r3, #1
 8008cec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008cee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cf0:	2b02      	cmp	r3, #2
 8008cf2:	dddb      	ble.n	8008cac <STMpil_initialize+0x364>
      }

      /* Copy and transpose D */
      for (i=0; i<3; i++) {
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008cf8:	e020      	b.n	8008d3c <STMpil_initialize+0x3f4>
        for (j=0; j<4; j++)
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	63bb      	str	r3, [r7, #56]	; 0x38
 8008cfe:	e017      	b.n	8008d30 <STMpil_initialize+0x3e8>
          Ds[i*4 + j] = (STMpil_P.StateSpace_DS_param[i + j*3]);
 8008d00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008d02:	4613      	mov	r3, r2
 8008d04:	005b      	lsls	r3, r3, #1
 8008d06:	441a      	add	r2, r3
 8008d08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d0a:	4413      	add	r3, r2
 8008d0c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008d0e:	0091      	lsls	r1, r2, #2
 8008d10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008d12:	440a      	add	r2, r1
 8008d14:	00d2      	lsls	r2, r2, #3
 8008d16:	6a39      	ldr	r1, [r7, #32]
 8008d18:	4411      	add	r1, r2
 8008d1a:	4a39      	ldr	r2, [pc, #228]	; (8008e00 <STMpil_initialize+0x4b8>)
 8008d1c:	3343      	adds	r3, #67	; 0x43
 8008d1e:	00db      	lsls	r3, r3, #3
 8008d20:	4413      	add	r3, r2
 8008d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d26:	e9c1 2300 	strd	r2, r3, [r1]
        for (j=0; j<4; j++)
 8008d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d2c:	3301      	adds	r3, #1
 8008d2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d32:	2b03      	cmp	r3, #3
 8008d34:	dde4      	ble.n	8008d00 <STMpil_initialize+0x3b8>
      for (i=0; i<3; i++) {
 8008d36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d38:	3301      	adds	r3, #1
 8008d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d3e:	2b02      	cmp	r3, #2
 8008d40:	dddb      	ble.n	8008cfa <STMpil_initialize+0x3b2>
      }

      {
        /* Switches work vectors */
        int_T *switch_status = (int_T*) STMpil_DW.StateSpace_PWORK.SWITCH_STATUS;
 8008d42:	4b30      	ldr	r3, [pc, #192]	; (8008e04 <STMpil_initialize+0x4bc>)
 8008d44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d46:	61bb      	str	r3, [r7, #24]
        int_T *gState = (int_T*)STMpil_DW.StateSpace_PWORK.G_STATE;
 8008d48:	4b2e      	ldr	r3, [pc, #184]	; (8008e04 <STMpil_initialize+0x4bc>)
 8008d4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008d4e:	617b      	str	r3, [r7, #20]
        real_T *yswitch = (real_T*)STMpil_DW.StateSpace_PWORK.Y_SWITCH;
 8008d50:	4b2c      	ldr	r3, [pc, #176]	; (8008e04 <STMpil_initialize+0x4bc>)
 8008d52:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008d56:	613b      	str	r3, [r7, #16]
        int_T *switchTypes = (int_T*)STMpil_DW.StateSpace_PWORK.SWITCH_TYPES;
 8008d58:	4b2a      	ldr	r3, [pc, #168]	; (8008e04 <STMpil_initialize+0x4bc>)
 8008d5a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008d5e:	60fb      	str	r3, [r7, #12]
        int_T *idxOutSw = (int_T*)STMpil_DW.StateSpace_PWORK.IDX_OUT_SW;
 8008d60:	4b28      	ldr	r3, [pc, #160]	; (8008e04 <STMpil_initialize+0x4bc>)
 8008d62:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008d66:	60bb      	str	r3, [r7, #8]
        int_T *switch_status_init = (int_T*)
 8008d68:	4b26      	ldr	r3, [pc, #152]	; (8008e04 <STMpil_initialize+0x4bc>)
 8008d6a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008d6c:	607b      	str	r3, [r7, #4]
          STMpil_DW.StateSpace_PWORK.SWITCH_STATUS_INIT;

        /* Initialize work vectors */
        switch_status[0] = 0;
 8008d6e:	69bb      	ldr	r3, [r7, #24]
 8008d70:	2200      	movs	r2, #0
 8008d72:	601a      	str	r2, [r3, #0]
        switch_status_init[0] = 0;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2200      	movs	r2, #0
 8008d78:	601a      	str	r2, [r3, #0]
        gState[0] = (int_T) 0.0;
 8008d7a:	697b      	ldr	r3, [r7, #20]
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	601a      	str	r2, [r3, #0]
        yswitch[0] = 1/0.001;
 8008d80:	6939      	ldr	r1, [r7, #16]
 8008d82:	f04f 0200 	mov.w	r2, #0
 8008d86:	4b20      	ldr	r3, [pc, #128]	; (8008e08 <STMpil_initialize+0x4c0>)
 8008d88:	e9c1 2300 	strd	r2, r3, [r1]
        switchTypes[0] = (int_T)1.0;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	2201      	movs	r2, #1
 8008d90:	601a      	str	r2, [r3, #0]
        idxOutSw[0] = ((int_T)0.0) - 1;
 8008d92:	68bb      	ldr	r3, [r7, #8]
 8008d94:	f04f 32ff 	mov.w	r2, #4294967295
 8008d98:	601a      	str	r2, [r3, #0]
        switch_status[1] = 0;
 8008d9a:	69bb      	ldr	r3, [r7, #24]
 8008d9c:	3304      	adds	r3, #4
 8008d9e:	2200      	movs	r2, #0
 8008da0:	601a      	str	r2, [r3, #0]
        switch_status_init[1] = 0;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	3304      	adds	r3, #4
 8008da6:	2200      	movs	r2, #0
 8008da8:	601a      	str	r2, [r3, #0]
        gState[1] = (int_T) 0.0;
 8008daa:	697b      	ldr	r3, [r7, #20]
 8008dac:	3304      	adds	r3, #4
 8008dae:	2200      	movs	r2, #0
 8008db0:	601a      	str	r2, [r3, #0]
        yswitch[1] = 1/0.001;
 8008db2:	693b      	ldr	r3, [r7, #16]
 8008db4:	f103 0108 	add.w	r1, r3, #8
 8008db8:	f04f 0200 	mov.w	r2, #0
 8008dbc:	4b12      	ldr	r3, [pc, #72]	; (8008e08 <STMpil_initialize+0x4c0>)
 8008dbe:	e9c1 2300 	strd	r2, r3, [r1]
        switchTypes[1] = (int_T)7.0;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	3304      	adds	r3, #4
 8008dc6:	2207      	movs	r2, #7
 8008dc8:	601a      	str	r2, [r3, #0]
        idxOutSw[1] = ((int_T)0.0) - 1;
 8008dca:	68bb      	ldr	r3, [r7, #8]
 8008dcc:	3304      	adds	r3, #4
 8008dce:	f04f 32ff 	mov.w	r2, #4294967295
 8008dd2:	601a      	str	r2, [r3, #0]
      }
    }

    /* SystemInitialize for Atomic SubSystem: '<S1>/MyPIL' */
    /* InitializeConditions for UnitDelay: '<S104>/Output' */
    STMpil_DW.Output_DSTATE = STMpil_P.Output_InitialCondition;
 8008dd4:	4b0a      	ldr	r3, [pc, #40]	; (8008e00 <STMpil_initialize+0x4b8>)
 8008dd6:	f893 22f8 	ldrb.w	r2, [r3, #760]	; 0x2f8
 8008dda:	4b0a      	ldr	r3, [pc, #40]	; (8008e04 <STMpil_initialize+0x4bc>)
 8008ddc:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

    /* InitializeConditions for DiscreteIntegrator: '<S87>/Integrator' */
    STMpil_DW.Integrator_DSTATE = STMpil_P.PIDController4_InitialCondition;
 8008de0:	4b07      	ldr	r3, [pc, #28]	; (8008e00 <STMpil_initialize+0x4b8>)
 8008de2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8008de6:	4907      	ldr	r1, [pc, #28]	; (8008e04 <STMpil_initialize+0x4bc>)
 8008de8:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

    /* InitializeConditions for DiscreteIntegrator: '<S39>/Integrator' */
    STMpil_DW.Integrator_DSTATE_hwv3 = STMpil_P.PIDController3_InitialCondition;
 8008dec:	4b04      	ldr	r3, [pc, #16]	; (8008e00 <STMpil_initialize+0x4b8>)
 8008dee:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008df2:	4904      	ldr	r1, [pc, #16]	; (8008e04 <STMpil_initialize+0x4bc>)
 8008df4:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30

    /* End of SystemInitialize for SubSystem: '<S1>/MyPIL' */
    /* End of SystemInitialize for SubSystem: '<Root>/STMpil' */
  }
}
 8008df8:	bf00      	nop
 8008dfa:	3740      	adds	r7, #64	; 0x40
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bd80      	pop	{r7, pc}
 8008e00:	20000010 	.word	0x20000010
 8008e04:	20000538 	.word	0x20000538
 8008e08:	408f4000 	.word	0x408f4000

08008e0c <rtGetInf>:
/*
 * Initialize rtInf needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
real_T rtGetInf(void)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b086      	sub	sp, #24
 8008e10:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 8008e12:	2340      	movs	r3, #64	; 0x40
 8008e14:	60fb      	str	r3, [r7, #12]
  real_T inf = 0.0;
 8008e16:	f04f 0200 	mov.w	r2, #0
 8008e1a:	f04f 0300 	mov.w	r3, #0
 8008e1e:	e9c7 2304 	strd	r2, r3, [r7, #16]
  if (bitsPerReal == 32U) {
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	2b20      	cmp	r3, #32
 8008e26:	d10b      	bne.n	8008e40 <rtGetInf+0x34>
    inf = rtGetInfF();
 8008e28:	f000 f820 	bl	8008e6c <rtGetInfF>
 8008e2c:	ee10 3a10 	vmov	r3, s0
 8008e30:	4618      	mov	r0, r3
 8008e32:	f7f7 fb35 	bl	80004a0 <__aeabi_f2d>
 8008e36:	4602      	mov	r2, r0
 8008e38:	460b      	mov	r3, r1
 8008e3a:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8008e3e:	e007      	b.n	8008e50 <rtGetInf+0x44>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.bitVal.words.wordH = 0x7FF00000U;
 8008e40:	4b09      	ldr	r3, [pc, #36]	; (8008e68 <rtGetInf+0x5c>)
 8008e42:	607b      	str	r3, [r7, #4]
    tmpVal.bitVal.words.wordL = 0x00000000U;
 8008e44:	2300      	movs	r3, #0
 8008e46:	603b      	str	r3, [r7, #0]
    inf = tmpVal.fltVal;
 8008e48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e4c:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  return inf;
 8008e50:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008e54:	ec43 2b17 	vmov	d7, r2, r3
}
 8008e58:	eeb0 0a47 	vmov.f32	s0, s14
 8008e5c:	eef0 0a67 	vmov.f32	s1, s15
 8008e60:	3718      	adds	r7, #24
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd80      	pop	{r7, pc}
 8008e66:	bf00      	nop
 8008e68:	7ff00000 	.word	0x7ff00000

08008e6c <rtGetInfF>:
/*
 * Initialize rtInfF needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
real32_T rtGetInfF(void)
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	b083      	sub	sp, #12
 8008e70:	af00      	add	r7, sp, #0
  IEEESingle infF;
  infF.wordL.wordLuint = 0x7F800000U;
 8008e72:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 8008e76:	607b      	str	r3, [r7, #4]
  return infF.wordL.wordLreal;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	ee07 3a90 	vmov	s15, r3
}
 8008e7e:	eeb0 0a67 	vmov.f32	s0, s15
 8008e82:	370c      	adds	r7, #12
 8008e84:	46bd      	mov	sp, r7
 8008e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8a:	4770      	bx	lr

08008e8c <rtGetMinusInf>:
/*
 * Initialize rtMinusInf needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
real_T rtGetMinusInf(void)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b086      	sub	sp, #24
 8008e90:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 8008e92:	2340      	movs	r3, #64	; 0x40
 8008e94:	60fb      	str	r3, [r7, #12]
  real_T minf = 0.0;
 8008e96:	f04f 0200 	mov.w	r2, #0
 8008e9a:	f04f 0300 	mov.w	r3, #0
 8008e9e:	e9c7 2304 	strd	r2, r3, [r7, #16]
  if (bitsPerReal == 32U) {
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	2b20      	cmp	r3, #32
 8008ea6:	d10b      	bne.n	8008ec0 <rtGetMinusInf+0x34>
    minf = rtGetMinusInfF();
 8008ea8:	f000 f820 	bl	8008eec <rtGetMinusInfF>
 8008eac:	ee10 3a10 	vmov	r3, s0
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	f7f7 faf5 	bl	80004a0 <__aeabi_f2d>
 8008eb6:	4602      	mov	r2, r0
 8008eb8:	460b      	mov	r3, r1
 8008eba:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8008ebe:	e007      	b.n	8008ed0 <rtGetMinusInf+0x44>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.bitVal.words.wordH = 0xFFF00000U;
 8008ec0:	4b09      	ldr	r3, [pc, #36]	; (8008ee8 <rtGetMinusInf+0x5c>)
 8008ec2:	607b      	str	r3, [r7, #4]
    tmpVal.bitVal.words.wordL = 0x00000000U;
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	603b      	str	r3, [r7, #0]
    minf = tmpVal.fltVal;
 8008ec8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ecc:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  return minf;
 8008ed0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008ed4:	ec43 2b17 	vmov	d7, r2, r3
}
 8008ed8:	eeb0 0a47 	vmov.f32	s0, s14
 8008edc:	eef0 0a67 	vmov.f32	s1, s15
 8008ee0:	3718      	adds	r7, #24
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bd80      	pop	{r7, pc}
 8008ee6:	bf00      	nop
 8008ee8:	fff00000 	.word	0xfff00000

08008eec <rtGetMinusInfF>:
/*
 * Initialize rtMinusInfF needed by the generated code.
 * Inf is initialized as non-signaling. Assumes IEEE.
 */
real32_T rtGetMinusInfF(void)
{
 8008eec:	b480      	push	{r7}
 8008eee:	b083      	sub	sp, #12
 8008ef0:	af00      	add	r7, sp, #0
  IEEESingle minfF;
  minfF.wordL.wordLuint = 0xFF800000U;
 8008ef2:	4b06      	ldr	r3, [pc, #24]	; (8008f0c <rtGetMinusInfF+0x20>)
 8008ef4:	607b      	str	r3, [r7, #4]
  return minfF.wordL.wordLreal;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	ee07 3a90 	vmov	s15, r3
}
 8008efc:	eeb0 0a67 	vmov.f32	s0, s15
 8008f00:	370c      	adds	r7, #12
 8008f02:	46bd      	mov	sp, r7
 8008f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f08:	4770      	bx	lr
 8008f0a:	bf00      	nop
 8008f0c:	ff800000 	.word	0xff800000

08008f10 <rtGetNaN>:
/*
 * Initialize rtNaN needed by the generated code.
 * NaN is initialized as non-signaling. Assumes IEEE.
 */
real_T rtGetNaN(void)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b086      	sub	sp, #24
 8008f14:	af00      	add	r7, sp, #0
  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);
 8008f16:	2340      	movs	r3, #64	; 0x40
 8008f18:	60fb      	str	r3, [r7, #12]
  real_T nan = 0.0;
 8008f1a:	f04f 0200 	mov.w	r2, #0
 8008f1e:	f04f 0300 	mov.w	r3, #0
 8008f22:	e9c7 2304 	strd	r2, r3, [r7, #16]
  if (bitsPerReal == 32U) {
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	2b20      	cmp	r3, #32
 8008f2a:	d10b      	bne.n	8008f44 <rtGetNaN+0x34>
    nan = rtGetNaNF();
 8008f2c:	f000 f820 	bl	8008f70 <rtGetNaNF>
 8008f30:	ee10 3a10 	vmov	r3, s0
 8008f34:	4618      	mov	r0, r3
 8008f36:	f7f7 fab3 	bl	80004a0 <__aeabi_f2d>
 8008f3a:	4602      	mov	r2, r0
 8008f3c:	460b      	mov	r3, r1
 8008f3e:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8008f42:	e007      	b.n	8008f54 <rtGetNaN+0x44>
    union {
      LittleEndianIEEEDouble bitVal;
      real_T fltVal;
    } tmpVal;

    tmpVal.bitVal.words.wordH = 0xFFF80000U;
 8008f44:	4b09      	ldr	r3, [pc, #36]	; (8008f6c <rtGetNaN+0x5c>)
 8008f46:	607b      	str	r3, [r7, #4]
    tmpVal.bitVal.words.wordL = 0x00000000U;
 8008f48:	2300      	movs	r3, #0
 8008f4a:	603b      	str	r3, [r7, #0]
    nan = tmpVal.fltVal;
 8008f4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f50:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  return nan;
 8008f54:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008f58:	ec43 2b17 	vmov	d7, r2, r3
}
 8008f5c:	eeb0 0a47 	vmov.f32	s0, s14
 8008f60:	eef0 0a67 	vmov.f32	s1, s15
 8008f64:	3718      	adds	r7, #24
 8008f66:	46bd      	mov	sp, r7
 8008f68:	bd80      	pop	{r7, pc}
 8008f6a:	bf00      	nop
 8008f6c:	fff80000 	.word	0xfff80000

08008f70 <rtGetNaNF>:
/*
 * Initialize rtNaNF needed by the generated code.
 * NaN is initialized as non-signaling. Assumes IEEE.
 */
real32_T rtGetNaNF(void)
{
 8008f70:	b480      	push	{r7}
 8008f72:	b083      	sub	sp, #12
 8008f74:	af00      	add	r7, sp, #0
  IEEESingle nanF = { { 0 } };
 8008f76:	f04f 0300 	mov.w	r3, #0
 8008f7a:	607b      	str	r3, [r7, #4]

  nanF.wordL.wordLuint = 0xFFC00000U;
 8008f7c:	4b05      	ldr	r3, [pc, #20]	; (8008f94 <rtGetNaNF+0x24>)
 8008f7e:	607b      	str	r3, [r7, #4]
  return nanF.wordL.wordLreal;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	ee07 3a90 	vmov	s15, r3
}
 8008f86:	eeb0 0a67 	vmov.f32	s0, s15
 8008f8a:	370c      	adds	r7, #12
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f92:	4770      	bx	lr
 8008f94:	ffc00000 	.word	0xffc00000

08008f98 <rt_InitInfAndNaN>:
/*
 * Initialize the rtInf, rtMinusInf, and rtNaN needed by the
 * generated code. NaN is initialized as non-signaling. Assumes IEEE.
 */
void rt_InitInfAndNaN(size_t realSize)
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b082      	sub	sp, #8
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
  (void) (realSize);
  rtNaN = rtGetNaN();
 8008fa0:	f7ff ffb6 	bl	8008f10 <rtGetNaN>
 8008fa4:	eeb0 7a40 	vmov.f32	s14, s0
 8008fa8:	eef0 7a60 	vmov.f32	s15, s1
 8008fac:	4b16      	ldr	r3, [pc, #88]	; (8009008 <rt_InitInfAndNaN+0x70>)
 8008fae:	ed83 7b00 	vstr	d7, [r3]
  rtNaNF = rtGetNaNF();
 8008fb2:	f7ff ffdd 	bl	8008f70 <rtGetNaNF>
 8008fb6:	eef0 7a40 	vmov.f32	s15, s0
 8008fba:	4b14      	ldr	r3, [pc, #80]	; (800900c <rt_InitInfAndNaN+0x74>)
 8008fbc:	edc3 7a00 	vstr	s15, [r3]
  rtInf = rtGetInf();
 8008fc0:	f7ff ff24 	bl	8008e0c <rtGetInf>
 8008fc4:	eeb0 7a40 	vmov.f32	s14, s0
 8008fc8:	eef0 7a60 	vmov.f32	s15, s1
 8008fcc:	4b10      	ldr	r3, [pc, #64]	; (8009010 <rt_InitInfAndNaN+0x78>)
 8008fce:	ed83 7b00 	vstr	d7, [r3]
  rtInfF = rtGetInfF();
 8008fd2:	f7ff ff4b 	bl	8008e6c <rtGetInfF>
 8008fd6:	eef0 7a40 	vmov.f32	s15, s0
 8008fda:	4b0e      	ldr	r3, [pc, #56]	; (8009014 <rt_InitInfAndNaN+0x7c>)
 8008fdc:	edc3 7a00 	vstr	s15, [r3]
  rtMinusInf = rtGetMinusInf();
 8008fe0:	f7ff ff54 	bl	8008e8c <rtGetMinusInf>
 8008fe4:	eeb0 7a40 	vmov.f32	s14, s0
 8008fe8:	eef0 7a60 	vmov.f32	s15, s1
 8008fec:	4b0a      	ldr	r3, [pc, #40]	; (8009018 <rt_InitInfAndNaN+0x80>)
 8008fee:	ed83 7b00 	vstr	d7, [r3]
  rtMinusInfF = rtGetMinusInfF();
 8008ff2:	f7ff ff7b 	bl	8008eec <rtGetMinusInfF>
 8008ff6:	eef0 7a40 	vmov.f32	s15, s0
 8008ffa:	4b08      	ldr	r3, [pc, #32]	; (800901c <rt_InitInfAndNaN+0x84>)
 8008ffc:	edc3 7a00 	vstr	s15, [r3]
}
 8009000:	bf00      	nop
 8009002:	3708      	adds	r7, #8
 8009004:	46bd      	mov	sp, r7
 8009006:	bd80      	pop	{r7, pc}
 8009008:	20000648 	.word	0x20000648
 800900c:	20000658 	.word	0x20000658
 8009010:	20000638 	.word	0x20000638
 8009014:	20000650 	.word	0x20000650
 8009018:	20000640 	.word	0x20000640
 800901c:	20000654 	.word	0x20000654

08009020 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8009020:	b590      	push	{r4, r7, lr}
 8009022:	b089      	sub	sp, #36	; 0x24
 8009024:	af04      	add	r7, sp, #16
 8009026:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8009028:	2301      	movs	r3, #1
 800902a:	2202      	movs	r2, #2
 800902c:	2102      	movs	r1, #2
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f000 fc66 	bl	8009900 <USBH_FindInterface>
 8009034:	4603      	mov	r3, r0
 8009036:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009038:	7bfb      	ldrb	r3, [r7, #15]
 800903a:	2bff      	cmp	r3, #255	; 0xff
 800903c:	d002      	beq.n	8009044 <USBH_CDC_InterfaceInit+0x24>
 800903e:	7bfb      	ldrb	r3, [r7, #15]
 8009040:	2b01      	cmp	r3, #1
 8009042:	d901      	bls.n	8009048 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009044:	2302      	movs	r3, #2
 8009046:	e13d      	b.n	80092c4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8009048:	7bfb      	ldrb	r3, [r7, #15]
 800904a:	4619      	mov	r1, r3
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f000 fc3b 	bl	80098c8 <USBH_SelectInterface>
 8009052:	4603      	mov	r3, r0
 8009054:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8009056:	7bbb      	ldrb	r3, [r7, #14]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d001      	beq.n	8009060 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800905c:	2302      	movs	r3, #2
 800905e:	e131      	b.n	80092c4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8009066:	2050      	movs	r0, #80	; 0x50
 8009068:	f002 fb02 	bl	800b670 <malloc>
 800906c:	4603      	mov	r3, r0
 800906e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009076:	69db      	ldr	r3, [r3, #28]
 8009078:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800907a:	68bb      	ldr	r3, [r7, #8]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d101      	bne.n	8009084 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8009080:	2302      	movs	r3, #2
 8009082:	e11f      	b.n	80092c4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8009084:	2250      	movs	r2, #80	; 0x50
 8009086:	2100      	movs	r1, #0
 8009088:	68b8      	ldr	r0, [r7, #8]
 800908a:	f002 fb0f 	bl	800b6ac <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800908e:	7bfb      	ldrb	r3, [r7, #15]
 8009090:	687a      	ldr	r2, [r7, #4]
 8009092:	211a      	movs	r1, #26
 8009094:	fb01 f303 	mul.w	r3, r1, r3
 8009098:	4413      	add	r3, r2
 800909a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800909e:	781b      	ldrb	r3, [r3, #0]
 80090a0:	b25b      	sxtb	r3, r3
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	da15      	bge.n	80090d2 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80090a6:	7bfb      	ldrb	r3, [r7, #15]
 80090a8:	687a      	ldr	r2, [r7, #4]
 80090aa:	211a      	movs	r1, #26
 80090ac:	fb01 f303 	mul.w	r3, r1, r3
 80090b0:	4413      	add	r3, r2
 80090b2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80090b6:	781a      	ldrb	r2, [r3, #0]
 80090b8:	68bb      	ldr	r3, [r7, #8]
 80090ba:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80090bc:	7bfb      	ldrb	r3, [r7, #15]
 80090be:	687a      	ldr	r2, [r7, #4]
 80090c0:	211a      	movs	r1, #26
 80090c2:	fb01 f303 	mul.w	r3, r1, r3
 80090c6:	4413      	add	r3, r2
 80090c8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80090cc:	881a      	ldrh	r2, [r3, #0]
 80090ce:	68bb      	ldr	r3, [r7, #8]
 80090d0:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80090d2:	68bb      	ldr	r3, [r7, #8]
 80090d4:	785b      	ldrb	r3, [r3, #1]
 80090d6:	4619      	mov	r1, r3
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f001 ff2c 	bl	800af36 <USBH_AllocPipe>
 80090de:	4603      	mov	r3, r0
 80090e0:	461a      	mov	r2, r3
 80090e2:	68bb      	ldr	r3, [r7, #8]
 80090e4:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80090e6:	68bb      	ldr	r3, [r7, #8]
 80090e8:	7819      	ldrb	r1, [r3, #0]
 80090ea:	68bb      	ldr	r3, [r7, #8]
 80090ec:	7858      	ldrb	r0, [r3, #1]
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80090fa:	68ba      	ldr	r2, [r7, #8]
 80090fc:	8952      	ldrh	r2, [r2, #10]
 80090fe:	9202      	str	r2, [sp, #8]
 8009100:	2203      	movs	r2, #3
 8009102:	9201      	str	r2, [sp, #4]
 8009104:	9300      	str	r3, [sp, #0]
 8009106:	4623      	mov	r3, r4
 8009108:	4602      	mov	r2, r0
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	f001 fee4 	bl	800aed8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8009110:	68bb      	ldr	r3, [r7, #8]
 8009112:	781b      	ldrb	r3, [r3, #0]
 8009114:	2200      	movs	r2, #0
 8009116:	4619      	mov	r1, r3
 8009118:	6878      	ldr	r0, [r7, #4]
 800911a:	f002 f9f3 	bl	800b504 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800911e:	2300      	movs	r3, #0
 8009120:	2200      	movs	r2, #0
 8009122:	210a      	movs	r1, #10
 8009124:	6878      	ldr	r0, [r7, #4]
 8009126:	f000 fbeb 	bl	8009900 <USBH_FindInterface>
 800912a:	4603      	mov	r3, r0
 800912c:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800912e:	7bfb      	ldrb	r3, [r7, #15]
 8009130:	2bff      	cmp	r3, #255	; 0xff
 8009132:	d002      	beq.n	800913a <USBH_CDC_InterfaceInit+0x11a>
 8009134:	7bfb      	ldrb	r3, [r7, #15]
 8009136:	2b01      	cmp	r3, #1
 8009138:	d901      	bls.n	800913e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800913a:	2302      	movs	r3, #2
 800913c:	e0c2      	b.n	80092c4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800913e:	7bfb      	ldrb	r3, [r7, #15]
 8009140:	687a      	ldr	r2, [r7, #4]
 8009142:	211a      	movs	r1, #26
 8009144:	fb01 f303 	mul.w	r3, r1, r3
 8009148:	4413      	add	r3, r2
 800914a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800914e:	781b      	ldrb	r3, [r3, #0]
 8009150:	b25b      	sxtb	r3, r3
 8009152:	2b00      	cmp	r3, #0
 8009154:	da16      	bge.n	8009184 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009156:	7bfb      	ldrb	r3, [r7, #15]
 8009158:	687a      	ldr	r2, [r7, #4]
 800915a:	211a      	movs	r1, #26
 800915c:	fb01 f303 	mul.w	r3, r1, r3
 8009160:	4413      	add	r3, r2
 8009162:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009166:	781a      	ldrb	r2, [r3, #0]
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800916c:	7bfb      	ldrb	r3, [r7, #15]
 800916e:	687a      	ldr	r2, [r7, #4]
 8009170:	211a      	movs	r1, #26
 8009172:	fb01 f303 	mul.w	r3, r1, r3
 8009176:	4413      	add	r3, r2
 8009178:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800917c:	881a      	ldrh	r2, [r3, #0]
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	835a      	strh	r2, [r3, #26]
 8009182:	e015      	b.n	80091b0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009184:	7bfb      	ldrb	r3, [r7, #15]
 8009186:	687a      	ldr	r2, [r7, #4]
 8009188:	211a      	movs	r1, #26
 800918a:	fb01 f303 	mul.w	r3, r1, r3
 800918e:	4413      	add	r3, r2
 8009190:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009194:	781a      	ldrb	r2, [r3, #0]
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800919a:	7bfb      	ldrb	r3, [r7, #15]
 800919c:	687a      	ldr	r2, [r7, #4]
 800919e:	211a      	movs	r1, #26
 80091a0:	fb01 f303 	mul.w	r3, r1, r3
 80091a4:	4413      	add	r3, r2
 80091a6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80091aa:	881a      	ldrh	r2, [r3, #0]
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80091b0:	7bfb      	ldrb	r3, [r7, #15]
 80091b2:	687a      	ldr	r2, [r7, #4]
 80091b4:	211a      	movs	r1, #26
 80091b6:	fb01 f303 	mul.w	r3, r1, r3
 80091ba:	4413      	add	r3, r2
 80091bc:	f203 3356 	addw	r3, r3, #854	; 0x356
 80091c0:	781b      	ldrb	r3, [r3, #0]
 80091c2:	b25b      	sxtb	r3, r3
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	da16      	bge.n	80091f6 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80091c8:	7bfb      	ldrb	r3, [r7, #15]
 80091ca:	687a      	ldr	r2, [r7, #4]
 80091cc:	211a      	movs	r1, #26
 80091ce:	fb01 f303 	mul.w	r3, r1, r3
 80091d2:	4413      	add	r3, r2
 80091d4:	f203 3356 	addw	r3, r3, #854	; 0x356
 80091d8:	781a      	ldrb	r2, [r3, #0]
 80091da:	68bb      	ldr	r3, [r7, #8]
 80091dc:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80091de:	7bfb      	ldrb	r3, [r7, #15]
 80091e0:	687a      	ldr	r2, [r7, #4]
 80091e2:	211a      	movs	r1, #26
 80091e4:	fb01 f303 	mul.w	r3, r1, r3
 80091e8:	4413      	add	r3, r2
 80091ea:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80091ee:	881a      	ldrh	r2, [r3, #0]
 80091f0:	68bb      	ldr	r3, [r7, #8]
 80091f2:	835a      	strh	r2, [r3, #26]
 80091f4:	e015      	b.n	8009222 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80091f6:	7bfb      	ldrb	r3, [r7, #15]
 80091f8:	687a      	ldr	r2, [r7, #4]
 80091fa:	211a      	movs	r1, #26
 80091fc:	fb01 f303 	mul.w	r3, r1, r3
 8009200:	4413      	add	r3, r2
 8009202:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009206:	781a      	ldrb	r2, [r3, #0]
 8009208:	68bb      	ldr	r3, [r7, #8]
 800920a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800920c:	7bfb      	ldrb	r3, [r7, #15]
 800920e:	687a      	ldr	r2, [r7, #4]
 8009210:	211a      	movs	r1, #26
 8009212:	fb01 f303 	mul.w	r3, r1, r3
 8009216:	4413      	add	r3, r2
 8009218:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800921c:	881a      	ldrh	r2, [r3, #0]
 800921e:	68bb      	ldr	r3, [r7, #8]
 8009220:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8009222:	68bb      	ldr	r3, [r7, #8]
 8009224:	7b9b      	ldrb	r3, [r3, #14]
 8009226:	4619      	mov	r1, r3
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	f001 fe84 	bl	800af36 <USBH_AllocPipe>
 800922e:	4603      	mov	r3, r0
 8009230:	461a      	mov	r2, r3
 8009232:	68bb      	ldr	r3, [r7, #8]
 8009234:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8009236:	68bb      	ldr	r3, [r7, #8]
 8009238:	7bdb      	ldrb	r3, [r3, #15]
 800923a:	4619      	mov	r1, r3
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	f001 fe7a 	bl	800af36 <USBH_AllocPipe>
 8009242:	4603      	mov	r3, r0
 8009244:	461a      	mov	r2, r3
 8009246:	68bb      	ldr	r3, [r7, #8]
 8009248:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800924a:	68bb      	ldr	r3, [r7, #8]
 800924c:	7b59      	ldrb	r1, [r3, #13]
 800924e:	68bb      	ldr	r3, [r7, #8]
 8009250:	7b98      	ldrb	r0, [r3, #14]
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800925e:	68ba      	ldr	r2, [r7, #8]
 8009260:	8b12      	ldrh	r2, [r2, #24]
 8009262:	9202      	str	r2, [sp, #8]
 8009264:	2202      	movs	r2, #2
 8009266:	9201      	str	r2, [sp, #4]
 8009268:	9300      	str	r3, [sp, #0]
 800926a:	4623      	mov	r3, r4
 800926c:	4602      	mov	r2, r0
 800926e:	6878      	ldr	r0, [r7, #4]
 8009270:	f001 fe32 	bl	800aed8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	7b19      	ldrb	r1, [r3, #12]
 8009278:	68bb      	ldr	r3, [r7, #8]
 800927a:	7bd8      	ldrb	r0, [r3, #15]
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009288:	68ba      	ldr	r2, [r7, #8]
 800928a:	8b52      	ldrh	r2, [r2, #26]
 800928c:	9202      	str	r2, [sp, #8]
 800928e:	2202      	movs	r2, #2
 8009290:	9201      	str	r2, [sp, #4]
 8009292:	9300      	str	r3, [sp, #0]
 8009294:	4623      	mov	r3, r4
 8009296:	4602      	mov	r2, r0
 8009298:	6878      	ldr	r0, [r7, #4]
 800929a:	f001 fe1d 	bl	800aed8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800929e:	68bb      	ldr	r3, [r7, #8]
 80092a0:	2200      	movs	r2, #0
 80092a2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80092a6:	68bb      	ldr	r3, [r7, #8]
 80092a8:	7b5b      	ldrb	r3, [r3, #13]
 80092aa:	2200      	movs	r2, #0
 80092ac:	4619      	mov	r1, r3
 80092ae:	6878      	ldr	r0, [r7, #4]
 80092b0:	f002 f928 	bl	800b504 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80092b4:	68bb      	ldr	r3, [r7, #8]
 80092b6:	7b1b      	ldrb	r3, [r3, #12]
 80092b8:	2200      	movs	r2, #0
 80092ba:	4619      	mov	r1, r3
 80092bc:	6878      	ldr	r0, [r7, #4]
 80092be:	f002 f921 	bl	800b504 <USBH_LL_SetToggle>

  return USBH_OK;
 80092c2:	2300      	movs	r3, #0
}
 80092c4:	4618      	mov	r0, r3
 80092c6:	3714      	adds	r7, #20
 80092c8:	46bd      	mov	sp, r7
 80092ca:	bd90      	pop	{r4, r7, pc}

080092cc <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b084      	sub	sp, #16
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80092da:	69db      	ldr	r3, [r3, #28]
 80092dc:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	781b      	ldrb	r3, [r3, #0]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d00e      	beq.n	8009304 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	781b      	ldrb	r3, [r3, #0]
 80092ea:	4619      	mov	r1, r3
 80092ec:	6878      	ldr	r0, [r7, #4]
 80092ee:	f001 fe12 	bl	800af16 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	781b      	ldrb	r3, [r3, #0]
 80092f6:	4619      	mov	r1, r3
 80092f8:	6878      	ldr	r0, [r7, #4]
 80092fa:	f001 fe3d 	bl	800af78 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	2200      	movs	r2, #0
 8009302:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	7b1b      	ldrb	r3, [r3, #12]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d00e      	beq.n	800932a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	7b1b      	ldrb	r3, [r3, #12]
 8009310:	4619      	mov	r1, r3
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f001 fdff 	bl	800af16 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	7b1b      	ldrb	r3, [r3, #12]
 800931c:	4619      	mov	r1, r3
 800931e:	6878      	ldr	r0, [r7, #4]
 8009320:	f001 fe2a 	bl	800af78 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	2200      	movs	r2, #0
 8009328:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	7b5b      	ldrb	r3, [r3, #13]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d00e      	beq.n	8009350 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	7b5b      	ldrb	r3, [r3, #13]
 8009336:	4619      	mov	r1, r3
 8009338:	6878      	ldr	r0, [r7, #4]
 800933a:	f001 fdec 	bl	800af16 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	7b5b      	ldrb	r3, [r3, #13]
 8009342:	4619      	mov	r1, r3
 8009344:	6878      	ldr	r0, [r7, #4]
 8009346:	f001 fe17 	bl	800af78 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	2200      	movs	r2, #0
 800934e:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009356:	69db      	ldr	r3, [r3, #28]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d00b      	beq.n	8009374 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009362:	69db      	ldr	r3, [r3, #28]
 8009364:	4618      	mov	r0, r3
 8009366:	f002 f98b 	bl	800b680 <free>
    phost->pActiveClass->pData = 0U;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009370:	2200      	movs	r2, #0
 8009372:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8009374:	2300      	movs	r3, #0
}
 8009376:	4618      	mov	r0, r3
 8009378:	3710      	adds	r7, #16
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}

0800937e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800937e:	b580      	push	{r7, lr}
 8009380:	b084      	sub	sp, #16
 8009382:	af00      	add	r7, sp, #0
 8009384:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800938c:	69db      	ldr	r3, [r3, #28]
 800938e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	3340      	adds	r3, #64	; 0x40
 8009394:	4619      	mov	r1, r3
 8009396:	6878      	ldr	r0, [r7, #4]
 8009398:	f000 f8b1 	bl	80094fe <GetLineCoding>
 800939c:	4603      	mov	r3, r0
 800939e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80093a0:	7afb      	ldrb	r3, [r7, #11]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d105      	bne.n	80093b2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80093ac:	2102      	movs	r1, #2
 80093ae:	6878      	ldr	r0, [r7, #4]
 80093b0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80093b2:	7afb      	ldrb	r3, [r7, #11]
}
 80093b4:	4618      	mov	r0, r3
 80093b6:	3710      	adds	r7, #16
 80093b8:	46bd      	mov	sp, r7
 80093ba:	bd80      	pop	{r7, pc}

080093bc <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b084      	sub	sp, #16
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80093c4:	2301      	movs	r3, #1
 80093c6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80093c8:	2300      	movs	r3, #0
 80093ca:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80093d2:	69db      	ldr	r3, [r3, #28]
 80093d4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80093d6:	68bb      	ldr	r3, [r7, #8]
 80093d8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80093dc:	2b04      	cmp	r3, #4
 80093de:	d877      	bhi.n	80094d0 <USBH_CDC_Process+0x114>
 80093e0:	a201      	add	r2, pc, #4	; (adr r2, 80093e8 <USBH_CDC_Process+0x2c>)
 80093e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093e6:	bf00      	nop
 80093e8:	080093fd 	.word	0x080093fd
 80093ec:	08009403 	.word	0x08009403
 80093f0:	08009433 	.word	0x08009433
 80093f4:	080094a7 	.word	0x080094a7
 80093f8:	080094b5 	.word	0x080094b5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80093fc:	2300      	movs	r3, #0
 80093fe:	73fb      	strb	r3, [r7, #15]
      break;
 8009400:	e06d      	b.n	80094de <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8009402:	68bb      	ldr	r3, [r7, #8]
 8009404:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009406:	4619      	mov	r1, r3
 8009408:	6878      	ldr	r0, [r7, #4]
 800940a:	f000 f897 	bl	800953c <SetLineCoding>
 800940e:	4603      	mov	r3, r0
 8009410:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009412:	7bbb      	ldrb	r3, [r7, #14]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d104      	bne.n	8009422 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8009418:	68bb      	ldr	r3, [r7, #8]
 800941a:	2202      	movs	r2, #2
 800941c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009420:	e058      	b.n	80094d4 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8009422:	7bbb      	ldrb	r3, [r7, #14]
 8009424:	2b01      	cmp	r3, #1
 8009426:	d055      	beq.n	80094d4 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009428:	68bb      	ldr	r3, [r7, #8]
 800942a:	2204      	movs	r2, #4
 800942c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8009430:	e050      	b.n	80094d4 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8009432:	68bb      	ldr	r3, [r7, #8]
 8009434:	3340      	adds	r3, #64	; 0x40
 8009436:	4619      	mov	r1, r3
 8009438:	6878      	ldr	r0, [r7, #4]
 800943a:	f000 f860 	bl	80094fe <GetLineCoding>
 800943e:	4603      	mov	r3, r0
 8009440:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009442:	7bbb      	ldrb	r3, [r7, #14]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d126      	bne.n	8009496 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8009448:	68bb      	ldr	r3, [r7, #8]
 800944a:	2200      	movs	r2, #0
 800944c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009450:	68bb      	ldr	r3, [r7, #8]
 8009452:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8009456:	68bb      	ldr	r3, [r7, #8]
 8009458:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800945a:	791b      	ldrb	r3, [r3, #4]
 800945c:	429a      	cmp	r2, r3
 800945e:	d13b      	bne.n	80094d8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009460:	68bb      	ldr	r3, [r7, #8]
 8009462:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8009466:	68bb      	ldr	r3, [r7, #8]
 8009468:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800946a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800946c:	429a      	cmp	r2, r3
 800946e:	d133      	bne.n	80094d8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8009476:	68bb      	ldr	r3, [r7, #8]
 8009478:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800947a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800947c:	429a      	cmp	r2, r3
 800947e:	d12b      	bne.n	80094d8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8009480:	68bb      	ldr	r3, [r7, #8]
 8009482:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009484:	68bb      	ldr	r3, [r7, #8]
 8009486:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009488:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800948a:	429a      	cmp	r2, r3
 800948c:	d124      	bne.n	80094d8 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800948e:	6878      	ldr	r0, [r7, #4]
 8009490:	f000 f958 	bl	8009744 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009494:	e020      	b.n	80094d8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8009496:	7bbb      	ldrb	r3, [r7, #14]
 8009498:	2b01      	cmp	r3, #1
 800949a:	d01d      	beq.n	80094d8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800949c:	68bb      	ldr	r3, [r7, #8]
 800949e:	2204      	movs	r2, #4
 80094a0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80094a4:	e018      	b.n	80094d8 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	f000 f867 	bl	800957a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80094ac:	6878      	ldr	r0, [r7, #4]
 80094ae:	f000 f8da 	bl	8009666 <CDC_ProcessReception>
      break;
 80094b2:	e014      	b.n	80094de <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80094b4:	2100      	movs	r1, #0
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	f000 ffef 	bl	800a49a <USBH_ClrFeature>
 80094bc:	4603      	mov	r3, r0
 80094be:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80094c0:	7bbb      	ldrb	r3, [r7, #14]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d10a      	bne.n	80094dc <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80094c6:	68bb      	ldr	r3, [r7, #8]
 80094c8:	2200      	movs	r2, #0
 80094ca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80094ce:	e005      	b.n	80094dc <USBH_CDC_Process+0x120>

    default:
      break;
 80094d0:	bf00      	nop
 80094d2:	e004      	b.n	80094de <USBH_CDC_Process+0x122>
      break;
 80094d4:	bf00      	nop
 80094d6:	e002      	b.n	80094de <USBH_CDC_Process+0x122>
      break;
 80094d8:	bf00      	nop
 80094da:	e000      	b.n	80094de <USBH_CDC_Process+0x122>
      break;
 80094dc:	bf00      	nop

  }

  return status;
 80094de:	7bfb      	ldrb	r3, [r7, #15]
}
 80094e0:	4618      	mov	r0, r3
 80094e2:	3710      	adds	r7, #16
 80094e4:	46bd      	mov	sp, r7
 80094e6:	bd80      	pop	{r7, pc}

080094e8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80094e8:	b480      	push	{r7}
 80094ea:	b083      	sub	sp, #12
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80094f0:	2300      	movs	r3, #0
}
 80094f2:	4618      	mov	r0, r3
 80094f4:	370c      	adds	r7, #12
 80094f6:	46bd      	mov	sp, r7
 80094f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fc:	4770      	bx	lr

080094fe <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80094fe:	b580      	push	{r7, lr}
 8009500:	b082      	sub	sp, #8
 8009502:	af00      	add	r7, sp, #0
 8009504:	6078      	str	r0, [r7, #4]
 8009506:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	22a1      	movs	r2, #161	; 0xa1
 800950c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	2221      	movs	r2, #33	; 0x21
 8009512:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2200      	movs	r2, #0
 8009518:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	2200      	movs	r2, #0
 800951e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2207      	movs	r2, #7
 8009524:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	2207      	movs	r2, #7
 800952a:	4619      	mov	r1, r3
 800952c:	6878      	ldr	r0, [r7, #4]
 800952e:	f001 fa81 	bl	800aa34 <USBH_CtlReq>
 8009532:	4603      	mov	r3, r0
}
 8009534:	4618      	mov	r0, r3
 8009536:	3708      	adds	r7, #8
 8009538:	46bd      	mov	sp, r7
 800953a:	bd80      	pop	{r7, pc}

0800953c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b082      	sub	sp, #8
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
 8009544:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2221      	movs	r2, #33	; 0x21
 800954a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2220      	movs	r2, #32
 8009550:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2200      	movs	r2, #0
 8009556:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2200      	movs	r2, #0
 800955c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	2207      	movs	r2, #7
 8009562:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	2207      	movs	r2, #7
 8009568:	4619      	mov	r1, r3
 800956a:	6878      	ldr	r0, [r7, #4]
 800956c:	f001 fa62 	bl	800aa34 <USBH_CtlReq>
 8009570:	4603      	mov	r3, r0
}
 8009572:	4618      	mov	r0, r3
 8009574:	3708      	adds	r7, #8
 8009576:	46bd      	mov	sp, r7
 8009578:	bd80      	pop	{r7, pc}

0800957a <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800957a:	b580      	push	{r7, lr}
 800957c:	b086      	sub	sp, #24
 800957e:	af02      	add	r7, sp, #8
 8009580:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009588:	69db      	ldr	r3, [r3, #28]
 800958a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800958c:	2300      	movs	r3, #0
 800958e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8009596:	2b01      	cmp	r3, #1
 8009598:	d002      	beq.n	80095a0 <CDC_ProcessTransmission+0x26>
 800959a:	2b02      	cmp	r3, #2
 800959c:	d023      	beq.n	80095e6 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800959e:	e05e      	b.n	800965e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095a4:	68fa      	ldr	r2, [r7, #12]
 80095a6:	8b12      	ldrh	r2, [r2, #24]
 80095a8:	4293      	cmp	r3, r2
 80095aa:	d90b      	bls.n	80095c4 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	69d9      	ldr	r1, [r3, #28]
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	8b1a      	ldrh	r2, [r3, #24]
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	7b5b      	ldrb	r3, [r3, #13]
 80095b8:	2001      	movs	r0, #1
 80095ba:	9000      	str	r0, [sp, #0]
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	f001 fc48 	bl	800ae52 <USBH_BulkSendData>
 80095c2:	e00b      	b.n	80095dc <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 80095cc:	b29a      	uxth	r2, r3
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	7b5b      	ldrb	r3, [r3, #13]
 80095d2:	2001      	movs	r0, #1
 80095d4:	9000      	str	r0, [sp, #0]
 80095d6:	6878      	ldr	r0, [r7, #4]
 80095d8:	f001 fc3b 	bl	800ae52 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	2202      	movs	r2, #2
 80095e0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80095e4:	e03b      	b.n	800965e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	7b5b      	ldrb	r3, [r3, #13]
 80095ea:	4619      	mov	r1, r3
 80095ec:	6878      	ldr	r0, [r7, #4]
 80095ee:	f001 ff5f 	bl	800b4b0 <USBH_LL_GetURBState>
 80095f2:	4603      	mov	r3, r0
 80095f4:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80095f6:	7afb      	ldrb	r3, [r7, #11]
 80095f8:	2b01      	cmp	r3, #1
 80095fa:	d128      	bne.n	800964e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009600:	68fa      	ldr	r2, [r7, #12]
 8009602:	8b12      	ldrh	r2, [r2, #24]
 8009604:	4293      	cmp	r3, r2
 8009606:	d90e      	bls.n	8009626 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800960c:	68fa      	ldr	r2, [r7, #12]
 800960e:	8b12      	ldrh	r2, [r2, #24]
 8009610:	1a9a      	subs	r2, r3, r2
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	69db      	ldr	r3, [r3, #28]
 800961a:	68fa      	ldr	r2, [r7, #12]
 800961c:	8b12      	ldrh	r2, [r2, #24]
 800961e:	441a      	add	r2, r3
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	61da      	str	r2, [r3, #28]
 8009624:	e002      	b.n	800962c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	2200      	movs	r2, #0
 800962a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009630:	2b00      	cmp	r3, #0
 8009632:	d004      	beq.n	800963e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	2201      	movs	r2, #1
 8009638:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800963c:	e00e      	b.n	800965c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	2200      	movs	r2, #0
 8009642:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8009646:	6878      	ldr	r0, [r7, #4]
 8009648:	f000 f868 	bl	800971c <USBH_CDC_TransmitCallback>
      break;
 800964c:	e006      	b.n	800965c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800964e:	7afb      	ldrb	r3, [r7, #11]
 8009650:	2b02      	cmp	r3, #2
 8009652:	d103      	bne.n	800965c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	2201      	movs	r2, #1
 8009658:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800965c:	bf00      	nop
  }
}
 800965e:	bf00      	nop
 8009660:	3710      	adds	r7, #16
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}

08009666 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8009666:	b580      	push	{r7, lr}
 8009668:	b086      	sub	sp, #24
 800966a:	af00      	add	r7, sp, #0
 800966c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009674:	69db      	ldr	r3, [r3, #28]
 8009676:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009678:	2300      	movs	r3, #0
 800967a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800967c:	697b      	ldr	r3, [r7, #20]
 800967e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8009682:	2b03      	cmp	r3, #3
 8009684:	d002      	beq.n	800968c <CDC_ProcessReception+0x26>
 8009686:	2b04      	cmp	r3, #4
 8009688:	d00e      	beq.n	80096a8 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800968a:	e043      	b.n	8009714 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800968c:	697b      	ldr	r3, [r7, #20]
 800968e:	6a19      	ldr	r1, [r3, #32]
 8009690:	697b      	ldr	r3, [r7, #20]
 8009692:	8b5a      	ldrh	r2, [r3, #26]
 8009694:	697b      	ldr	r3, [r7, #20]
 8009696:	7b1b      	ldrb	r3, [r3, #12]
 8009698:	6878      	ldr	r0, [r7, #4]
 800969a:	f001 fbff 	bl	800ae9c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800969e:	697b      	ldr	r3, [r7, #20]
 80096a0:	2204      	movs	r2, #4
 80096a2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80096a6:	e035      	b.n	8009714 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80096a8:	697b      	ldr	r3, [r7, #20]
 80096aa:	7b1b      	ldrb	r3, [r3, #12]
 80096ac:	4619      	mov	r1, r3
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	f001 fefe 	bl	800b4b0 <USBH_LL_GetURBState>
 80096b4:	4603      	mov	r3, r0
 80096b6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80096b8:	7cfb      	ldrb	r3, [r7, #19]
 80096ba:	2b01      	cmp	r3, #1
 80096bc:	d129      	bne.n	8009712 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80096be:	697b      	ldr	r3, [r7, #20]
 80096c0:	7b1b      	ldrb	r3, [r3, #12]
 80096c2:	4619      	mov	r1, r3
 80096c4:	6878      	ldr	r0, [r7, #4]
 80096c6:	f001 fe61 	bl	800b38c <USBH_LL_GetLastXferSize>
 80096ca:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80096cc:	697b      	ldr	r3, [r7, #20]
 80096ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096d0:	68fa      	ldr	r2, [r7, #12]
 80096d2:	429a      	cmp	r2, r3
 80096d4:	d016      	beq.n	8009704 <CDC_ProcessReception+0x9e>
 80096d6:	697b      	ldr	r3, [r7, #20]
 80096d8:	8b5b      	ldrh	r3, [r3, #26]
 80096da:	461a      	mov	r2, r3
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	4293      	cmp	r3, r2
 80096e0:	d910      	bls.n	8009704 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80096e2:	697b      	ldr	r3, [r7, #20]
 80096e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	1ad2      	subs	r2, r2, r3
 80096ea:	697b      	ldr	r3, [r7, #20]
 80096ec:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80096ee:	697b      	ldr	r3, [r7, #20]
 80096f0:	6a1a      	ldr	r2, [r3, #32]
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	441a      	add	r2, r3
 80096f6:	697b      	ldr	r3, [r7, #20]
 80096f8:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80096fa:	697b      	ldr	r3, [r7, #20]
 80096fc:	2203      	movs	r2, #3
 80096fe:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8009702:	e006      	b.n	8009712 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8009704:	697b      	ldr	r3, [r7, #20]
 8009706:	2200      	movs	r2, #0
 8009708:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800970c:	6878      	ldr	r0, [r7, #4]
 800970e:	f000 f80f 	bl	8009730 <USBH_CDC_ReceiveCallback>
      break;
 8009712:	bf00      	nop
  }
}
 8009714:	bf00      	nop
 8009716:	3718      	adds	r7, #24
 8009718:	46bd      	mov	sp, r7
 800971a:	bd80      	pop	{r7, pc}

0800971c <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800971c:	b480      	push	{r7}
 800971e:	b083      	sub	sp, #12
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009724:	bf00      	nop
 8009726:	370c      	adds	r7, #12
 8009728:	46bd      	mov	sp, r7
 800972a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972e:	4770      	bx	lr

08009730 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8009730:	b480      	push	{r7}
 8009732:	b083      	sub	sp, #12
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009738:	bf00      	nop
 800973a:	370c      	adds	r7, #12
 800973c:	46bd      	mov	sp, r7
 800973e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009742:	4770      	bx	lr

08009744 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8009744:	b480      	push	{r7}
 8009746:	b083      	sub	sp, #12
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800974c:	bf00      	nop
 800974e:	370c      	adds	r7, #12
 8009750:	46bd      	mov	sp, r7
 8009752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009756:	4770      	bx	lr

08009758 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b084      	sub	sp, #16
 800975c:	af00      	add	r7, sp, #0
 800975e:	60f8      	str	r0, [r7, #12]
 8009760:	60b9      	str	r1, [r7, #8]
 8009762:	4613      	mov	r3, r2
 8009764:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d101      	bne.n	8009770 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800976c:	2302      	movs	r3, #2
 800976e:	e029      	b.n	80097c4 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	79fa      	ldrb	r2, [r7, #7]
 8009774:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	2200      	movs	r2, #0
 800977c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	2200      	movs	r2, #0
 8009784:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8009788:	68f8      	ldr	r0, [r7, #12]
 800978a:	f000 f81f 	bl	80097cc <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	2200      	movs	r2, #0
 8009792:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	2200      	movs	r2, #0
 800979a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	2200      	movs	r2, #0
 80097a2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	2200      	movs	r2, #0
 80097aa:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80097ae:	68bb      	ldr	r3, [r7, #8]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d003      	beq.n	80097bc <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	68ba      	ldr	r2, [r7, #8]
 80097b8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80097bc:	68f8      	ldr	r0, [r7, #12]
 80097be:	f001 fd31 	bl	800b224 <USBH_LL_Init>

  return USBH_OK;
 80097c2:	2300      	movs	r3, #0
}
 80097c4:	4618      	mov	r0, r3
 80097c6:	3710      	adds	r7, #16
 80097c8:	46bd      	mov	sp, r7
 80097ca:	bd80      	pop	{r7, pc}

080097cc <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80097cc:	b480      	push	{r7}
 80097ce:	b085      	sub	sp, #20
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80097d4:	2300      	movs	r3, #0
 80097d6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80097d8:	2300      	movs	r3, #0
 80097da:	60fb      	str	r3, [r7, #12]
 80097dc:	e009      	b.n	80097f2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80097de:	687a      	ldr	r2, [r7, #4]
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	33e0      	adds	r3, #224	; 0xe0
 80097e4:	009b      	lsls	r3, r3, #2
 80097e6:	4413      	add	r3, r2
 80097e8:	2200      	movs	r2, #0
 80097ea:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	3301      	adds	r3, #1
 80097f0:	60fb      	str	r3, [r7, #12]
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	2b0f      	cmp	r3, #15
 80097f6:	d9f2      	bls.n	80097de <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80097f8:	2300      	movs	r3, #0
 80097fa:	60fb      	str	r3, [r7, #12]
 80097fc:	e009      	b.n	8009812 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80097fe:	687a      	ldr	r2, [r7, #4]
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	4413      	add	r3, r2
 8009804:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009808:	2200      	movs	r2, #0
 800980a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	3301      	adds	r3, #1
 8009810:	60fb      	str	r3, [r7, #12]
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009818:	d3f1      	bcc.n	80097fe <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	2200      	movs	r2, #0
 800981e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2200      	movs	r2, #0
 8009824:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	2201      	movs	r2, #1
 800982a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2200      	movs	r2, #0
 8009830:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2201      	movs	r2, #1
 8009838:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2240      	movs	r2, #64	; 0x40
 800983e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2200      	movs	r2, #0
 8009844:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	2200      	movs	r2, #0
 800984a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	2201      	movs	r2, #1
 8009852:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	2200      	movs	r2, #0
 800985a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	2200      	movs	r2, #0
 8009862:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8009866:	2300      	movs	r3, #0
}
 8009868:	4618      	mov	r0, r3
 800986a:	3714      	adds	r7, #20
 800986c:	46bd      	mov	sp, r7
 800986e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009872:	4770      	bx	lr

08009874 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8009874:	b480      	push	{r7}
 8009876:	b085      	sub	sp, #20
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
 800987c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800987e:	2300      	movs	r3, #0
 8009880:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8009882:	683b      	ldr	r3, [r7, #0]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d016      	beq.n	80098b6 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800988e:	2b00      	cmp	r3, #0
 8009890:	d10e      	bne.n	80098b0 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009898:	1c59      	adds	r1, r3, #1
 800989a:	687a      	ldr	r2, [r7, #4]
 800989c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80098a0:	687a      	ldr	r2, [r7, #4]
 80098a2:	33de      	adds	r3, #222	; 0xde
 80098a4:	6839      	ldr	r1, [r7, #0]
 80098a6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80098aa:	2300      	movs	r3, #0
 80098ac:	73fb      	strb	r3, [r7, #15]
 80098ae:	e004      	b.n	80098ba <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80098b0:	2302      	movs	r3, #2
 80098b2:	73fb      	strb	r3, [r7, #15]
 80098b4:	e001      	b.n	80098ba <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80098b6:	2302      	movs	r3, #2
 80098b8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80098ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80098bc:	4618      	mov	r0, r3
 80098be:	3714      	adds	r7, #20
 80098c0:	46bd      	mov	sp, r7
 80098c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c6:	4770      	bx	lr

080098c8 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80098c8:	b480      	push	{r7}
 80098ca:	b085      	sub	sp, #20
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
 80098d0:	460b      	mov	r3, r1
 80098d2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80098d4:	2300      	movs	r3, #0
 80098d6:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80098de:	78fa      	ldrb	r2, [r7, #3]
 80098e0:	429a      	cmp	r2, r3
 80098e2:	d204      	bcs.n	80098ee <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	78fa      	ldrb	r2, [r7, #3]
 80098e8:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80098ec:	e001      	b.n	80098f2 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80098ee:	2302      	movs	r3, #2
 80098f0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80098f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80098f4:	4618      	mov	r0, r3
 80098f6:	3714      	adds	r7, #20
 80098f8:	46bd      	mov	sp, r7
 80098fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fe:	4770      	bx	lr

08009900 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8009900:	b480      	push	{r7}
 8009902:	b087      	sub	sp, #28
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
 8009908:	4608      	mov	r0, r1
 800990a:	4611      	mov	r1, r2
 800990c:	461a      	mov	r2, r3
 800990e:	4603      	mov	r3, r0
 8009910:	70fb      	strb	r3, [r7, #3]
 8009912:	460b      	mov	r3, r1
 8009914:	70bb      	strb	r3, [r7, #2]
 8009916:	4613      	mov	r3, r2
 8009918:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800991a:	2300      	movs	r3, #0
 800991c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800991e:	2300      	movs	r3, #0
 8009920:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009928:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800992a:	e025      	b.n	8009978 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800992c:	7dfb      	ldrb	r3, [r7, #23]
 800992e:	221a      	movs	r2, #26
 8009930:	fb02 f303 	mul.w	r3, r2, r3
 8009934:	3308      	adds	r3, #8
 8009936:	68fa      	ldr	r2, [r7, #12]
 8009938:	4413      	add	r3, r2
 800993a:	3302      	adds	r3, #2
 800993c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800993e:	693b      	ldr	r3, [r7, #16]
 8009940:	795b      	ldrb	r3, [r3, #5]
 8009942:	78fa      	ldrb	r2, [r7, #3]
 8009944:	429a      	cmp	r2, r3
 8009946:	d002      	beq.n	800994e <USBH_FindInterface+0x4e>
 8009948:	78fb      	ldrb	r3, [r7, #3]
 800994a:	2bff      	cmp	r3, #255	; 0xff
 800994c:	d111      	bne.n	8009972 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800994e:	693b      	ldr	r3, [r7, #16]
 8009950:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009952:	78ba      	ldrb	r2, [r7, #2]
 8009954:	429a      	cmp	r2, r3
 8009956:	d002      	beq.n	800995e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009958:	78bb      	ldrb	r3, [r7, #2]
 800995a:	2bff      	cmp	r3, #255	; 0xff
 800995c:	d109      	bne.n	8009972 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800995e:	693b      	ldr	r3, [r7, #16]
 8009960:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009962:	787a      	ldrb	r2, [r7, #1]
 8009964:	429a      	cmp	r2, r3
 8009966:	d002      	beq.n	800996e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009968:	787b      	ldrb	r3, [r7, #1]
 800996a:	2bff      	cmp	r3, #255	; 0xff
 800996c:	d101      	bne.n	8009972 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800996e:	7dfb      	ldrb	r3, [r7, #23]
 8009970:	e006      	b.n	8009980 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8009972:	7dfb      	ldrb	r3, [r7, #23]
 8009974:	3301      	adds	r3, #1
 8009976:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009978:	7dfb      	ldrb	r3, [r7, #23]
 800997a:	2b01      	cmp	r3, #1
 800997c:	d9d6      	bls.n	800992c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800997e:	23ff      	movs	r3, #255	; 0xff
}
 8009980:	4618      	mov	r0, r3
 8009982:	371c      	adds	r7, #28
 8009984:	46bd      	mov	sp, r7
 8009986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998a:	4770      	bx	lr

0800998c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b082      	sub	sp, #8
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8009994:	6878      	ldr	r0, [r7, #4]
 8009996:	f001 fc81 	bl	800b29c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800999a:	2101      	movs	r1, #1
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f001 fd9a 	bl	800b4d6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80099a2:	2300      	movs	r3, #0
}
 80099a4:	4618      	mov	r0, r3
 80099a6:	3708      	adds	r7, #8
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bd80      	pop	{r7, pc}

080099ac <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b088      	sub	sp, #32
 80099b0:	af04      	add	r7, sp, #16
 80099b2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80099b4:	2302      	movs	r3, #2
 80099b6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80099b8:	2300      	movs	r3, #0
 80099ba:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80099c2:	b2db      	uxtb	r3, r3
 80099c4:	2b01      	cmp	r3, #1
 80099c6:	d102      	bne.n	80099ce <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2203      	movs	r2, #3
 80099cc:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	781b      	ldrb	r3, [r3, #0]
 80099d2:	b2db      	uxtb	r3, r3
 80099d4:	2b0b      	cmp	r3, #11
 80099d6:	f200 81be 	bhi.w	8009d56 <USBH_Process+0x3aa>
 80099da:	a201      	add	r2, pc, #4	; (adr r2, 80099e0 <USBH_Process+0x34>)
 80099dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099e0:	08009a11 	.word	0x08009a11
 80099e4:	08009a43 	.word	0x08009a43
 80099e8:	08009aab 	.word	0x08009aab
 80099ec:	08009cf1 	.word	0x08009cf1
 80099f0:	08009d57 	.word	0x08009d57
 80099f4:	08009b4f 	.word	0x08009b4f
 80099f8:	08009c97 	.word	0x08009c97
 80099fc:	08009b85 	.word	0x08009b85
 8009a00:	08009ba5 	.word	0x08009ba5
 8009a04:	08009bc5 	.word	0x08009bc5
 8009a08:	08009c09 	.word	0x08009c09
 8009a0c:	08009cd9 	.word	0x08009cd9
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009a16:	b2db      	uxtb	r3, r3
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	f000 819e 	beq.w	8009d5a <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	2201      	movs	r2, #1
 8009a22:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8009a24:	20c8      	movs	r0, #200	; 0xc8
 8009a26:	f001 fd9d 	bl	800b564 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8009a2a:	6878      	ldr	r0, [r7, #4]
 8009a2c:	f001 fc93 	bl	800b356 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	2200      	movs	r2, #0
 8009a34:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009a40:	e18b      	b.n	8009d5a <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8009a48:	2b01      	cmp	r3, #1
 8009a4a:	d107      	bne.n	8009a5c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	2200      	movs	r2, #0
 8009a50:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2202      	movs	r2, #2
 8009a58:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009a5a:	e18d      	b.n	8009d78 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009a62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009a66:	d914      	bls.n	8009a92 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8009a6e:	3301      	adds	r3, #1
 8009a70:	b2da      	uxtb	r2, r3
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8009a7e:	2b03      	cmp	r3, #3
 8009a80:	d903      	bls.n	8009a8a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	220d      	movs	r2, #13
 8009a86:	701a      	strb	r2, [r3, #0]
      break;
 8009a88:	e176      	b.n	8009d78 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	701a      	strb	r2, [r3, #0]
      break;
 8009a90:	e172      	b.n	8009d78 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009a98:	f103 020a 	add.w	r2, r3, #10
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8009aa2:	200a      	movs	r0, #10
 8009aa4:	f001 fd5e 	bl	800b564 <USBH_Delay>
      break;
 8009aa8:	e166      	b.n	8009d78 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d005      	beq.n	8009ac0 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009aba:	2104      	movs	r1, #4
 8009abc:	6878      	ldr	r0, [r7, #4]
 8009abe:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8009ac0:	2064      	movs	r0, #100	; 0x64
 8009ac2:	f001 fd4f 	bl	800b564 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f001 fc1e 	bl	800b308 <USBH_LL_GetSpeed>
 8009acc:	4603      	mov	r3, r0
 8009ace:	461a      	mov	r2, r3
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	2205      	movs	r2, #5
 8009ada:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8009adc:	2100      	movs	r1, #0
 8009ade:	6878      	ldr	r0, [r7, #4]
 8009ae0:	f001 fa29 	bl	800af36 <USBH_AllocPipe>
 8009ae4:	4603      	mov	r3, r0
 8009ae6:	461a      	mov	r2, r3
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009aec:	2180      	movs	r1, #128	; 0x80
 8009aee:	6878      	ldr	r0, [r7, #4]
 8009af0:	f001 fa21 	bl	800af36 <USBH_AllocPipe>
 8009af4:	4603      	mov	r3, r0
 8009af6:	461a      	mov	r2, r3
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	7919      	ldrb	r1, [r3, #4]
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009b0c:	687a      	ldr	r2, [r7, #4]
 8009b0e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009b10:	b292      	uxth	r2, r2
 8009b12:	9202      	str	r2, [sp, #8]
 8009b14:	2200      	movs	r2, #0
 8009b16:	9201      	str	r2, [sp, #4]
 8009b18:	9300      	str	r3, [sp, #0]
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	2280      	movs	r2, #128	; 0x80
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	f001 f9da 	bl	800aed8 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	7959      	ldrb	r1, [r3, #5]
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009b34:	687a      	ldr	r2, [r7, #4]
 8009b36:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009b38:	b292      	uxth	r2, r2
 8009b3a:	9202      	str	r2, [sp, #8]
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	9201      	str	r2, [sp, #4]
 8009b40:	9300      	str	r3, [sp, #0]
 8009b42:	4603      	mov	r3, r0
 8009b44:	2200      	movs	r2, #0
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	f001 f9c6 	bl	800aed8 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009b4c:	e114      	b.n	8009d78 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8009b4e:	6878      	ldr	r0, [r7, #4]
 8009b50:	f000 f918 	bl	8009d84 <USBH_HandleEnum>
 8009b54:	4603      	mov	r3, r0
 8009b56:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8009b58:	7bbb      	ldrb	r3, [r7, #14]
 8009b5a:	b2db      	uxtb	r3, r3
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	f040 80fe 	bne.w	8009d5e <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	2200      	movs	r2, #0
 8009b66:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8009b70:	2b01      	cmp	r3, #1
 8009b72:	d103      	bne.n	8009b7c <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2208      	movs	r2, #8
 8009b78:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009b7a:	e0f0      	b.n	8009d5e <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2207      	movs	r2, #7
 8009b80:	701a      	strb	r2, [r3, #0]
      break;
 8009b82:	e0ec      	b.n	8009d5e <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	f000 80e9 	beq.w	8009d62 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009b96:	2101      	movs	r1, #1
 8009b98:	6878      	ldr	r0, [r7, #4]
 8009b9a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2208      	movs	r2, #8
 8009ba0:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8009ba2:	e0de      	b.n	8009d62 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8009baa:	b29b      	uxth	r3, r3
 8009bac:	4619      	mov	r1, r3
 8009bae:	6878      	ldr	r0, [r7, #4]
 8009bb0:	f000 fc2c 	bl	800a40c <USBH_SetCfg>
 8009bb4:	4603      	mov	r3, r0
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	f040 80d5 	bne.w	8009d66 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2209      	movs	r2, #9
 8009bc0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009bc2:	e0d0      	b.n	8009d66 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8009bca:	f003 0320 	and.w	r3, r3, #32
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d016      	beq.n	8009c00 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8009bd2:	2101      	movs	r1, #1
 8009bd4:	6878      	ldr	r0, [r7, #4]
 8009bd6:	f000 fc3c 	bl	800a452 <USBH_SetFeature>
 8009bda:	4603      	mov	r3, r0
 8009bdc:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009bde:	7bbb      	ldrb	r3, [r7, #14]
 8009be0:	b2db      	uxtb	r3, r3
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d103      	bne.n	8009bee <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	220a      	movs	r2, #10
 8009bea:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009bec:	e0bd      	b.n	8009d6a <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8009bee:	7bbb      	ldrb	r3, [r7, #14]
 8009bf0:	b2db      	uxtb	r3, r3
 8009bf2:	2b03      	cmp	r3, #3
 8009bf4:	f040 80b9 	bne.w	8009d6a <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	220a      	movs	r2, #10
 8009bfc:	701a      	strb	r2, [r3, #0]
      break;
 8009bfe:	e0b4      	b.n	8009d6a <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	220a      	movs	r2, #10
 8009c04:	701a      	strb	r2, [r3, #0]
      break;
 8009c06:	e0b0      	b.n	8009d6a <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	f000 80ad 	beq.w	8009d6e <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2200      	movs	r2, #0
 8009c18:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	73fb      	strb	r3, [r7, #15]
 8009c20:	e016      	b.n	8009c50 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8009c22:	7bfa      	ldrb	r2, [r7, #15]
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	32de      	adds	r2, #222	; 0xde
 8009c28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c2c:	791a      	ldrb	r2, [r3, #4]
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8009c34:	429a      	cmp	r2, r3
 8009c36:	d108      	bne.n	8009c4a <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8009c38:	7bfa      	ldrb	r2, [r7, #15]
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	32de      	adds	r2, #222	; 0xde
 8009c3e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8009c48:	e005      	b.n	8009c56 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009c4a:	7bfb      	ldrb	r3, [r7, #15]
 8009c4c:	3301      	adds	r3, #1
 8009c4e:	73fb      	strb	r3, [r7, #15]
 8009c50:	7bfb      	ldrb	r3, [r7, #15]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d0e5      	beq.n	8009c22 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d016      	beq.n	8009c8e <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009c66:	689b      	ldr	r3, [r3, #8]
 8009c68:	6878      	ldr	r0, [r7, #4]
 8009c6a:	4798      	blx	r3
 8009c6c:	4603      	mov	r3, r0
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d109      	bne.n	8009c86 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	2206      	movs	r2, #6
 8009c76:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009c7e:	2103      	movs	r1, #3
 8009c80:	6878      	ldr	r0, [r7, #4]
 8009c82:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009c84:	e073      	b.n	8009d6e <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	220d      	movs	r2, #13
 8009c8a:	701a      	strb	r2, [r3, #0]
      break;
 8009c8c:	e06f      	b.n	8009d6e <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	220d      	movs	r2, #13
 8009c92:	701a      	strb	r2, [r3, #0]
      break;
 8009c94:	e06b      	b.n	8009d6e <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d017      	beq.n	8009cd0 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009ca6:	691b      	ldr	r3, [r3, #16]
 8009ca8:	6878      	ldr	r0, [r7, #4]
 8009caa:	4798      	blx	r3
 8009cac:	4603      	mov	r3, r0
 8009cae:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009cb0:	7bbb      	ldrb	r3, [r7, #14]
 8009cb2:	b2db      	uxtb	r3, r3
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d103      	bne.n	8009cc0 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	220b      	movs	r2, #11
 8009cbc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009cbe:	e058      	b.n	8009d72 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8009cc0:	7bbb      	ldrb	r3, [r7, #14]
 8009cc2:	b2db      	uxtb	r3, r3
 8009cc4:	2b02      	cmp	r3, #2
 8009cc6:	d154      	bne.n	8009d72 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	220d      	movs	r2, #13
 8009ccc:	701a      	strb	r2, [r3, #0]
      break;
 8009cce:	e050      	b.n	8009d72 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	220d      	movs	r2, #13
 8009cd4:	701a      	strb	r2, [r3, #0]
      break;
 8009cd6:	e04c      	b.n	8009d72 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d049      	beq.n	8009d76 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009ce8:	695b      	ldr	r3, [r3, #20]
 8009cea:	6878      	ldr	r0, [r7, #4]
 8009cec:	4798      	blx	r3
      }
      break;
 8009cee:	e042      	b.n	8009d76 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8009cf8:	6878      	ldr	r0, [r7, #4]
 8009cfa:	f7ff fd67 	bl	80097cc <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d009      	beq.n	8009d1c <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009d0e:	68db      	ldr	r3, [r3, #12]
 8009d10:	6878      	ldr	r0, [r7, #4]
 8009d12:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	2200      	movs	r2, #0
 8009d18:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d005      	beq.n	8009d32 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009d2c:	2105      	movs	r1, #5
 8009d2e:	6878      	ldr	r0, [r7, #4]
 8009d30:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8009d38:	b2db      	uxtb	r3, r3
 8009d3a:	2b01      	cmp	r3, #1
 8009d3c:	d107      	bne.n	8009d4e <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	2200      	movs	r2, #0
 8009d42:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8009d46:	6878      	ldr	r0, [r7, #4]
 8009d48:	f7ff fe20 	bl	800998c <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009d4c:	e014      	b.n	8009d78 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8009d4e:	6878      	ldr	r0, [r7, #4]
 8009d50:	f001 faa4 	bl	800b29c <USBH_LL_Start>
      break;
 8009d54:	e010      	b.n	8009d78 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8009d56:	bf00      	nop
 8009d58:	e00e      	b.n	8009d78 <USBH_Process+0x3cc>
      break;
 8009d5a:	bf00      	nop
 8009d5c:	e00c      	b.n	8009d78 <USBH_Process+0x3cc>
      break;
 8009d5e:	bf00      	nop
 8009d60:	e00a      	b.n	8009d78 <USBH_Process+0x3cc>
    break;
 8009d62:	bf00      	nop
 8009d64:	e008      	b.n	8009d78 <USBH_Process+0x3cc>
      break;
 8009d66:	bf00      	nop
 8009d68:	e006      	b.n	8009d78 <USBH_Process+0x3cc>
      break;
 8009d6a:	bf00      	nop
 8009d6c:	e004      	b.n	8009d78 <USBH_Process+0x3cc>
      break;
 8009d6e:	bf00      	nop
 8009d70:	e002      	b.n	8009d78 <USBH_Process+0x3cc>
      break;
 8009d72:	bf00      	nop
 8009d74:	e000      	b.n	8009d78 <USBH_Process+0x3cc>
      break;
 8009d76:	bf00      	nop
  }
  return USBH_OK;
 8009d78:	2300      	movs	r3, #0
}
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	3710      	adds	r7, #16
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	bd80      	pop	{r7, pc}
 8009d82:	bf00      	nop

08009d84 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b088      	sub	sp, #32
 8009d88:	af04      	add	r7, sp, #16
 8009d8a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009d8c:	2301      	movs	r3, #1
 8009d8e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8009d90:	2301      	movs	r3, #1
 8009d92:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	785b      	ldrb	r3, [r3, #1]
 8009d98:	2b07      	cmp	r3, #7
 8009d9a:	f200 81c1 	bhi.w	800a120 <USBH_HandleEnum+0x39c>
 8009d9e:	a201      	add	r2, pc, #4	; (adr r2, 8009da4 <USBH_HandleEnum+0x20>)
 8009da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009da4:	08009dc5 	.word	0x08009dc5
 8009da8:	08009e83 	.word	0x08009e83
 8009dac:	08009eed 	.word	0x08009eed
 8009db0:	08009f7b 	.word	0x08009f7b
 8009db4:	08009fe5 	.word	0x08009fe5
 8009db8:	0800a055 	.word	0x0800a055
 8009dbc:	0800a09b 	.word	0x0800a09b
 8009dc0:	0800a0e1 	.word	0x0800a0e1
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8009dc4:	2108      	movs	r1, #8
 8009dc6:	6878      	ldr	r0, [r7, #4]
 8009dc8:	f000 fa50 	bl	800a26c <USBH_Get_DevDesc>
 8009dcc:	4603      	mov	r3, r0
 8009dce:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009dd0:	7bbb      	ldrb	r3, [r7, #14]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d130      	bne.n	8009e38 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	2201      	movs	r2, #1
 8009de4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	7919      	ldrb	r1, [r3, #4]
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009df6:	687a      	ldr	r2, [r7, #4]
 8009df8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009dfa:	b292      	uxth	r2, r2
 8009dfc:	9202      	str	r2, [sp, #8]
 8009dfe:	2200      	movs	r2, #0
 8009e00:	9201      	str	r2, [sp, #4]
 8009e02:	9300      	str	r3, [sp, #0]
 8009e04:	4603      	mov	r3, r0
 8009e06:	2280      	movs	r2, #128	; 0x80
 8009e08:	6878      	ldr	r0, [r7, #4]
 8009e0a:	f001 f865 	bl	800aed8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	7959      	ldrb	r1, [r3, #5]
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009e1e:	687a      	ldr	r2, [r7, #4]
 8009e20:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009e22:	b292      	uxth	r2, r2
 8009e24:	9202      	str	r2, [sp, #8]
 8009e26:	2200      	movs	r2, #0
 8009e28:	9201      	str	r2, [sp, #4]
 8009e2a:	9300      	str	r3, [sp, #0]
 8009e2c:	4603      	mov	r3, r0
 8009e2e:	2200      	movs	r2, #0
 8009e30:	6878      	ldr	r0, [r7, #4]
 8009e32:	f001 f851 	bl	800aed8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009e36:	e175      	b.n	800a124 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009e38:	7bbb      	ldrb	r3, [r7, #14]
 8009e3a:	2b03      	cmp	r3, #3
 8009e3c:	f040 8172 	bne.w	800a124 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009e46:	3301      	adds	r3, #1
 8009e48:	b2da      	uxtb	r2, r3
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009e56:	2b03      	cmp	r3, #3
 8009e58:	d903      	bls.n	8009e62 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	220d      	movs	r2, #13
 8009e5e:	701a      	strb	r2, [r3, #0]
      break;
 8009e60:	e160      	b.n	800a124 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	795b      	ldrb	r3, [r3, #5]
 8009e66:	4619      	mov	r1, r3
 8009e68:	6878      	ldr	r0, [r7, #4]
 8009e6a:	f001 f885 	bl	800af78 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	791b      	ldrb	r3, [r3, #4]
 8009e72:	4619      	mov	r1, r3
 8009e74:	6878      	ldr	r0, [r7, #4]
 8009e76:	f001 f87f 	bl	800af78 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	701a      	strb	r2, [r3, #0]
      break;
 8009e80:	e150      	b.n	800a124 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8009e82:	2112      	movs	r1, #18
 8009e84:	6878      	ldr	r0, [r7, #4]
 8009e86:	f000 f9f1 	bl	800a26c <USBH_Get_DevDesc>
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009e8e:	7bbb      	ldrb	r3, [r7, #14]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d103      	bne.n	8009e9c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2202      	movs	r2, #2
 8009e98:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009e9a:	e145      	b.n	800a128 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009e9c:	7bbb      	ldrb	r3, [r7, #14]
 8009e9e:	2b03      	cmp	r3, #3
 8009ea0:	f040 8142 	bne.w	800a128 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009eaa:	3301      	adds	r3, #1
 8009eac:	b2da      	uxtb	r2, r3
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009eba:	2b03      	cmp	r3, #3
 8009ebc:	d903      	bls.n	8009ec6 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	220d      	movs	r2, #13
 8009ec2:	701a      	strb	r2, [r3, #0]
      break;
 8009ec4:	e130      	b.n	800a128 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	795b      	ldrb	r3, [r3, #5]
 8009eca:	4619      	mov	r1, r3
 8009ecc:	6878      	ldr	r0, [r7, #4]
 8009ece:	f001 f853 	bl	800af78 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	791b      	ldrb	r3, [r3, #4]
 8009ed6:	4619      	mov	r1, r3
 8009ed8:	6878      	ldr	r0, [r7, #4]
 8009eda:	f001 f84d 	bl	800af78 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	701a      	strb	r2, [r3, #0]
      break;
 8009eea:	e11d      	b.n	800a128 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8009eec:	2101      	movs	r1, #1
 8009eee:	6878      	ldr	r0, [r7, #4]
 8009ef0:	f000 fa68 	bl	800a3c4 <USBH_SetAddress>
 8009ef4:	4603      	mov	r3, r0
 8009ef6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009ef8:	7bbb      	ldrb	r3, [r7, #14]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d132      	bne.n	8009f64 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8009efe:	2002      	movs	r0, #2
 8009f00:	f001 fb30 	bl	800b564 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2201      	movs	r2, #1
 8009f08:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2203      	movs	r2, #3
 8009f10:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	7919      	ldrb	r1, [r3, #4]
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009f22:	687a      	ldr	r2, [r7, #4]
 8009f24:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009f26:	b292      	uxth	r2, r2
 8009f28:	9202      	str	r2, [sp, #8]
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	9201      	str	r2, [sp, #4]
 8009f2e:	9300      	str	r3, [sp, #0]
 8009f30:	4603      	mov	r3, r0
 8009f32:	2280      	movs	r2, #128	; 0x80
 8009f34:	6878      	ldr	r0, [r7, #4]
 8009f36:	f000 ffcf 	bl	800aed8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	7959      	ldrb	r1, [r3, #5]
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009f4a:	687a      	ldr	r2, [r7, #4]
 8009f4c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009f4e:	b292      	uxth	r2, r2
 8009f50:	9202      	str	r2, [sp, #8]
 8009f52:	2200      	movs	r2, #0
 8009f54:	9201      	str	r2, [sp, #4]
 8009f56:	9300      	str	r3, [sp, #0]
 8009f58:	4603      	mov	r3, r0
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	6878      	ldr	r0, [r7, #4]
 8009f5e:	f000 ffbb 	bl	800aed8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009f62:	e0e3      	b.n	800a12c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009f64:	7bbb      	ldrb	r3, [r7, #14]
 8009f66:	2b03      	cmp	r3, #3
 8009f68:	f040 80e0 	bne.w	800a12c <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	220d      	movs	r2, #13
 8009f70:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	2200      	movs	r2, #0
 8009f76:	705a      	strb	r2, [r3, #1]
      break;
 8009f78:	e0d8      	b.n	800a12c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8009f7a:	2109      	movs	r1, #9
 8009f7c:	6878      	ldr	r0, [r7, #4]
 8009f7e:	f000 f99d 	bl	800a2bc <USBH_Get_CfgDesc>
 8009f82:	4603      	mov	r3, r0
 8009f84:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009f86:	7bbb      	ldrb	r3, [r7, #14]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d103      	bne.n	8009f94 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	2204      	movs	r2, #4
 8009f90:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009f92:	e0cd      	b.n	800a130 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009f94:	7bbb      	ldrb	r3, [r7, #14]
 8009f96:	2b03      	cmp	r3, #3
 8009f98:	f040 80ca 	bne.w	800a130 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009fa2:	3301      	adds	r3, #1
 8009fa4:	b2da      	uxtb	r2, r3
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009fb2:	2b03      	cmp	r3, #3
 8009fb4:	d903      	bls.n	8009fbe <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	220d      	movs	r2, #13
 8009fba:	701a      	strb	r2, [r3, #0]
      break;
 8009fbc:	e0b8      	b.n	800a130 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	795b      	ldrb	r3, [r3, #5]
 8009fc2:	4619      	mov	r1, r3
 8009fc4:	6878      	ldr	r0, [r7, #4]
 8009fc6:	f000 ffd7 	bl	800af78 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	791b      	ldrb	r3, [r3, #4]
 8009fce:	4619      	mov	r1, r3
 8009fd0:	6878      	ldr	r0, [r7, #4]
 8009fd2:	f000 ffd1 	bl	800af78 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	2200      	movs	r2, #0
 8009fda:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2200      	movs	r2, #0
 8009fe0:	701a      	strb	r2, [r3, #0]
      break;
 8009fe2:	e0a5      	b.n	800a130 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8009fea:	4619      	mov	r1, r3
 8009fec:	6878      	ldr	r0, [r7, #4]
 8009fee:	f000 f965 	bl	800a2bc <USBH_Get_CfgDesc>
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009ff6:	7bbb      	ldrb	r3, [r7, #14]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d103      	bne.n	800a004 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2205      	movs	r2, #5
 800a000:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a002:	e097      	b.n	800a134 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a004:	7bbb      	ldrb	r3, [r7, #14]
 800a006:	2b03      	cmp	r3, #3
 800a008:	f040 8094 	bne.w	800a134 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a012:	3301      	adds	r3, #1
 800a014:	b2da      	uxtb	r2, r3
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a022:	2b03      	cmp	r3, #3
 800a024:	d903      	bls.n	800a02e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	220d      	movs	r2, #13
 800a02a:	701a      	strb	r2, [r3, #0]
      break;
 800a02c:	e082      	b.n	800a134 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	795b      	ldrb	r3, [r3, #5]
 800a032:	4619      	mov	r1, r3
 800a034:	6878      	ldr	r0, [r7, #4]
 800a036:	f000 ff9f 	bl	800af78 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	791b      	ldrb	r3, [r3, #4]
 800a03e:	4619      	mov	r1, r3
 800a040:	6878      	ldr	r0, [r7, #4]
 800a042:	f000 ff99 	bl	800af78 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	2200      	movs	r2, #0
 800a04a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2200      	movs	r2, #0
 800a050:	701a      	strb	r2, [r3, #0]
      break;
 800a052:	e06f      	b.n	800a134 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d019      	beq.n	800a092 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a06a:	23ff      	movs	r3, #255	; 0xff
 800a06c:	6878      	ldr	r0, [r7, #4]
 800a06e:	f000 f949 	bl	800a304 <USBH_Get_StringDesc>
 800a072:	4603      	mov	r3, r0
 800a074:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a076:	7bbb      	ldrb	r3, [r7, #14]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d103      	bne.n	800a084 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2206      	movs	r2, #6
 800a080:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a082:	e059      	b.n	800a138 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a084:	7bbb      	ldrb	r3, [r7, #14]
 800a086:	2b03      	cmp	r3, #3
 800a088:	d156      	bne.n	800a138 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2206      	movs	r2, #6
 800a08e:	705a      	strb	r2, [r3, #1]
      break;
 800a090:	e052      	b.n	800a138 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	2206      	movs	r2, #6
 800a096:	705a      	strb	r2, [r3, #1]
      break;
 800a098:	e04e      	b.n	800a138 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d019      	beq.n	800a0d8 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a0b0:	23ff      	movs	r3, #255	; 0xff
 800a0b2:	6878      	ldr	r0, [r7, #4]
 800a0b4:	f000 f926 	bl	800a304 <USBH_Get_StringDesc>
 800a0b8:	4603      	mov	r3, r0
 800a0ba:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a0bc:	7bbb      	ldrb	r3, [r7, #14]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d103      	bne.n	800a0ca <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	2207      	movs	r2, #7
 800a0c6:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a0c8:	e038      	b.n	800a13c <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a0ca:	7bbb      	ldrb	r3, [r7, #14]
 800a0cc:	2b03      	cmp	r3, #3
 800a0ce:	d135      	bne.n	800a13c <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2207      	movs	r2, #7
 800a0d4:	705a      	strb	r2, [r3, #1]
      break;
 800a0d6:	e031      	b.n	800a13c <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2207      	movs	r2, #7
 800a0dc:	705a      	strb	r2, [r3, #1]
      break;
 800a0de:	e02d      	b.n	800a13c <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d017      	beq.n	800a11a <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a0f6:	23ff      	movs	r3, #255	; 0xff
 800a0f8:	6878      	ldr	r0, [r7, #4]
 800a0fa:	f000 f903 	bl	800a304 <USBH_Get_StringDesc>
 800a0fe:	4603      	mov	r3, r0
 800a100:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a102:	7bbb      	ldrb	r3, [r7, #14]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d102      	bne.n	800a10e <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800a108:	2300      	movs	r3, #0
 800a10a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800a10c:	e018      	b.n	800a140 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a10e:	7bbb      	ldrb	r3, [r7, #14]
 800a110:	2b03      	cmp	r3, #3
 800a112:	d115      	bne.n	800a140 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800a114:	2300      	movs	r3, #0
 800a116:	73fb      	strb	r3, [r7, #15]
      break;
 800a118:	e012      	b.n	800a140 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800a11a:	2300      	movs	r3, #0
 800a11c:	73fb      	strb	r3, [r7, #15]
      break;
 800a11e:	e00f      	b.n	800a140 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800a120:	bf00      	nop
 800a122:	e00e      	b.n	800a142 <USBH_HandleEnum+0x3be>
      break;
 800a124:	bf00      	nop
 800a126:	e00c      	b.n	800a142 <USBH_HandleEnum+0x3be>
      break;
 800a128:	bf00      	nop
 800a12a:	e00a      	b.n	800a142 <USBH_HandleEnum+0x3be>
      break;
 800a12c:	bf00      	nop
 800a12e:	e008      	b.n	800a142 <USBH_HandleEnum+0x3be>
      break;
 800a130:	bf00      	nop
 800a132:	e006      	b.n	800a142 <USBH_HandleEnum+0x3be>
      break;
 800a134:	bf00      	nop
 800a136:	e004      	b.n	800a142 <USBH_HandleEnum+0x3be>
      break;
 800a138:	bf00      	nop
 800a13a:	e002      	b.n	800a142 <USBH_HandleEnum+0x3be>
      break;
 800a13c:	bf00      	nop
 800a13e:	e000      	b.n	800a142 <USBH_HandleEnum+0x3be>
      break;
 800a140:	bf00      	nop
  }
  return Status;
 800a142:	7bfb      	ldrb	r3, [r7, #15]
}
 800a144:	4618      	mov	r0, r3
 800a146:	3710      	adds	r7, #16
 800a148:	46bd      	mov	sp, r7
 800a14a:	bd80      	pop	{r7, pc}

0800a14c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800a14c:	b480      	push	{r7}
 800a14e:	b083      	sub	sp, #12
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
 800a154:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	683a      	ldr	r2, [r7, #0]
 800a15a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800a15e:	bf00      	nop
 800a160:	370c      	adds	r7, #12
 800a162:	46bd      	mov	sp, r7
 800a164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a168:	4770      	bx	lr

0800a16a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800a16a:	b580      	push	{r7, lr}
 800a16c:	b082      	sub	sp, #8
 800a16e:	af00      	add	r7, sp, #0
 800a170:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a178:	1c5a      	adds	r2, r3, #1
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800a180:	6878      	ldr	r0, [r7, #4]
 800a182:	f000 f804 	bl	800a18e <USBH_HandleSof>
}
 800a186:	bf00      	nop
 800a188:	3708      	adds	r7, #8
 800a18a:	46bd      	mov	sp, r7
 800a18c:	bd80      	pop	{r7, pc}

0800a18e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800a18e:	b580      	push	{r7, lr}
 800a190:	b082      	sub	sp, #8
 800a192:	af00      	add	r7, sp, #0
 800a194:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	781b      	ldrb	r3, [r3, #0]
 800a19a:	b2db      	uxtb	r3, r3
 800a19c:	2b0b      	cmp	r3, #11
 800a19e:	d10a      	bne.n	800a1b6 <USBH_HandleSof+0x28>
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d005      	beq.n	800a1b6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a1b0:	699b      	ldr	r3, [r3, #24]
 800a1b2:	6878      	ldr	r0, [r7, #4]
 800a1b4:	4798      	blx	r3
  }
}
 800a1b6:	bf00      	nop
 800a1b8:	3708      	adds	r7, #8
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	bd80      	pop	{r7, pc}

0800a1be <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800a1be:	b480      	push	{r7}
 800a1c0:	b083      	sub	sp, #12
 800a1c2:	af00      	add	r7, sp, #0
 800a1c4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	2201      	movs	r2, #1
 800a1ca:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800a1ce:	bf00      	nop
}
 800a1d0:	370c      	adds	r7, #12
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d8:	4770      	bx	lr

0800a1da <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800a1da:	b480      	push	{r7}
 800a1dc:	b083      	sub	sp, #12
 800a1de:	af00      	add	r7, sp, #0
 800a1e0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800a1ea:	bf00      	nop
}
 800a1ec:	370c      	adds	r7, #12
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f4:	4770      	bx	lr

0800a1f6 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800a1f6:	b480      	push	{r7}
 800a1f8:	b083      	sub	sp, #12
 800a1fa:	af00      	add	r7, sp, #0
 800a1fc:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	2201      	movs	r2, #1
 800a202:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	2200      	movs	r2, #0
 800a20a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	2200      	movs	r2, #0
 800a212:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800a216:	2300      	movs	r3, #0
}
 800a218:	4618      	mov	r0, r3
 800a21a:	370c      	adds	r7, #12
 800a21c:	46bd      	mov	sp, r7
 800a21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a222:	4770      	bx	lr

0800a224 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b082      	sub	sp, #8
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2201      	movs	r2, #1
 800a230:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	2200      	movs	r2, #0
 800a238:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2200      	movs	r2, #0
 800a240:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800a244:	6878      	ldr	r0, [r7, #4]
 800a246:	f001 f844 	bl	800b2d2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	791b      	ldrb	r3, [r3, #4]
 800a24e:	4619      	mov	r1, r3
 800a250:	6878      	ldr	r0, [r7, #4]
 800a252:	f000 fe91 	bl	800af78 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	795b      	ldrb	r3, [r3, #5]
 800a25a:	4619      	mov	r1, r3
 800a25c:	6878      	ldr	r0, [r7, #4]
 800a25e:	f000 fe8b 	bl	800af78 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800a262:	2300      	movs	r3, #0
}
 800a264:	4618      	mov	r0, r3
 800a266:	3708      	adds	r7, #8
 800a268:	46bd      	mov	sp, r7
 800a26a:	bd80      	pop	{r7, pc}

0800a26c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b086      	sub	sp, #24
 800a270:	af02      	add	r7, sp, #8
 800a272:	6078      	str	r0, [r7, #4]
 800a274:	460b      	mov	r3, r1
 800a276:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800a27e:	78fb      	ldrb	r3, [r7, #3]
 800a280:	b29b      	uxth	r3, r3
 800a282:	9300      	str	r3, [sp, #0]
 800a284:	4613      	mov	r3, r2
 800a286:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a28a:	2100      	movs	r1, #0
 800a28c:	6878      	ldr	r0, [r7, #4]
 800a28e:	f000 f864 	bl	800a35a <USBH_GetDescriptor>
 800a292:	4603      	mov	r3, r0
 800a294:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800a296:	7bfb      	ldrb	r3, [r7, #15]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d10a      	bne.n	800a2b2 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	f203 3026 	addw	r0, r3, #806	; 0x326
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a2a8:	78fa      	ldrb	r2, [r7, #3]
 800a2aa:	b292      	uxth	r2, r2
 800a2ac:	4619      	mov	r1, r3
 800a2ae:	f000 f918 	bl	800a4e2 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800a2b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	3710      	adds	r7, #16
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	bd80      	pop	{r7, pc}

0800a2bc <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b086      	sub	sp, #24
 800a2c0:	af02      	add	r7, sp, #8
 800a2c2:	6078      	str	r0, [r7, #4]
 800a2c4:	460b      	mov	r3, r1
 800a2c6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	331c      	adds	r3, #28
 800a2cc:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800a2ce:	887b      	ldrh	r3, [r7, #2]
 800a2d0:	9300      	str	r3, [sp, #0]
 800a2d2:	68bb      	ldr	r3, [r7, #8]
 800a2d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a2d8:	2100      	movs	r1, #0
 800a2da:	6878      	ldr	r0, [r7, #4]
 800a2dc:	f000 f83d 	bl	800a35a <USBH_GetDescriptor>
 800a2e0:	4603      	mov	r3, r0
 800a2e2:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800a2e4:	7bfb      	ldrb	r3, [r7, #15]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d107      	bne.n	800a2fa <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800a2ea:	887b      	ldrh	r3, [r7, #2]
 800a2ec:	461a      	mov	r2, r3
 800a2ee:	68b9      	ldr	r1, [r7, #8]
 800a2f0:	6878      	ldr	r0, [r7, #4]
 800a2f2:	f000 f987 	bl	800a604 <USBH_ParseCfgDesc>
 800a2f6:	4603      	mov	r3, r0
 800a2f8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a2fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	3710      	adds	r7, #16
 800a300:	46bd      	mov	sp, r7
 800a302:	bd80      	pop	{r7, pc}

0800a304 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800a304:	b580      	push	{r7, lr}
 800a306:	b088      	sub	sp, #32
 800a308:	af02      	add	r7, sp, #8
 800a30a:	60f8      	str	r0, [r7, #12]
 800a30c:	607a      	str	r2, [r7, #4]
 800a30e:	461a      	mov	r2, r3
 800a310:	460b      	mov	r3, r1
 800a312:	72fb      	strb	r3, [r7, #11]
 800a314:	4613      	mov	r3, r2
 800a316:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800a318:	7afb      	ldrb	r3, [r7, #11]
 800a31a:	b29b      	uxth	r3, r3
 800a31c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800a320:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800a328:	893b      	ldrh	r3, [r7, #8]
 800a32a:	9300      	str	r3, [sp, #0]
 800a32c:	460b      	mov	r3, r1
 800a32e:	2100      	movs	r1, #0
 800a330:	68f8      	ldr	r0, [r7, #12]
 800a332:	f000 f812 	bl	800a35a <USBH_GetDescriptor>
 800a336:	4603      	mov	r3, r0
 800a338:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800a33a:	7dfb      	ldrb	r3, [r7, #23]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d107      	bne.n	800a350 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a346:	893a      	ldrh	r2, [r7, #8]
 800a348:	6879      	ldr	r1, [r7, #4]
 800a34a:	4618      	mov	r0, r3
 800a34c:	f000 fb24 	bl	800a998 <USBH_ParseStringDesc>
  }

  return status;
 800a350:	7dfb      	ldrb	r3, [r7, #23]
}
 800a352:	4618      	mov	r0, r3
 800a354:	3718      	adds	r7, #24
 800a356:	46bd      	mov	sp, r7
 800a358:	bd80      	pop	{r7, pc}

0800a35a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800a35a:	b580      	push	{r7, lr}
 800a35c:	b084      	sub	sp, #16
 800a35e:	af00      	add	r7, sp, #0
 800a360:	60f8      	str	r0, [r7, #12]
 800a362:	607b      	str	r3, [r7, #4]
 800a364:	460b      	mov	r3, r1
 800a366:	72fb      	strb	r3, [r7, #11]
 800a368:	4613      	mov	r3, r2
 800a36a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	789b      	ldrb	r3, [r3, #2]
 800a370:	2b01      	cmp	r3, #1
 800a372:	d11c      	bne.n	800a3ae <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800a374:	7afb      	ldrb	r3, [r7, #11]
 800a376:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a37a:	b2da      	uxtb	r2, r3
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	2206      	movs	r2, #6
 800a384:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	893a      	ldrh	r2, [r7, #8]
 800a38a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800a38c:	893b      	ldrh	r3, [r7, #8]
 800a38e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a392:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a396:	d104      	bne.n	800a3a2 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	f240 4209 	movw	r2, #1033	; 0x409
 800a39e:	829a      	strh	r2, [r3, #20]
 800a3a0:	e002      	b.n	800a3a8 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	8b3a      	ldrh	r2, [r7, #24]
 800a3ac:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800a3ae:	8b3b      	ldrh	r3, [r7, #24]
 800a3b0:	461a      	mov	r2, r3
 800a3b2:	6879      	ldr	r1, [r7, #4]
 800a3b4:	68f8      	ldr	r0, [r7, #12]
 800a3b6:	f000 fb3d 	bl	800aa34 <USBH_CtlReq>
 800a3ba:	4603      	mov	r3, r0
}
 800a3bc:	4618      	mov	r0, r3
 800a3be:	3710      	adds	r7, #16
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	bd80      	pop	{r7, pc}

0800a3c4 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b082      	sub	sp, #8
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
 800a3cc:	460b      	mov	r3, r1
 800a3ce:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	789b      	ldrb	r3, [r3, #2]
 800a3d4:	2b01      	cmp	r3, #1
 800a3d6:	d10f      	bne.n	800a3f8 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	2200      	movs	r2, #0
 800a3dc:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	2205      	movs	r2, #5
 800a3e2:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800a3e4:	78fb      	ldrb	r3, [r7, #3]
 800a3e6:	b29a      	uxth	r2, r3
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	2100      	movs	r1, #0
 800a3fc:	6878      	ldr	r0, [r7, #4]
 800a3fe:	f000 fb19 	bl	800aa34 <USBH_CtlReq>
 800a402:	4603      	mov	r3, r0
}
 800a404:	4618      	mov	r0, r3
 800a406:	3708      	adds	r7, #8
 800a408:	46bd      	mov	sp, r7
 800a40a:	bd80      	pop	{r7, pc}

0800a40c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b082      	sub	sp, #8
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
 800a414:	460b      	mov	r3, r1
 800a416:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	789b      	ldrb	r3, [r3, #2]
 800a41c:	2b01      	cmp	r3, #1
 800a41e:	d10e      	bne.n	800a43e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	2200      	movs	r2, #0
 800a424:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	2209      	movs	r2, #9
 800a42a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	887a      	ldrh	r2, [r7, #2]
 800a430:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	2200      	movs	r2, #0
 800a436:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	2200      	movs	r2, #0
 800a43c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a43e:	2200      	movs	r2, #0
 800a440:	2100      	movs	r1, #0
 800a442:	6878      	ldr	r0, [r7, #4]
 800a444:	f000 faf6 	bl	800aa34 <USBH_CtlReq>
 800a448:	4603      	mov	r3, r0
}
 800a44a:	4618      	mov	r0, r3
 800a44c:	3708      	adds	r7, #8
 800a44e:	46bd      	mov	sp, r7
 800a450:	bd80      	pop	{r7, pc}

0800a452 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800a452:	b580      	push	{r7, lr}
 800a454:	b082      	sub	sp, #8
 800a456:	af00      	add	r7, sp, #0
 800a458:	6078      	str	r0, [r7, #4]
 800a45a:	460b      	mov	r3, r1
 800a45c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	789b      	ldrb	r3, [r3, #2]
 800a462:	2b01      	cmp	r3, #1
 800a464:	d10f      	bne.n	800a486 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	2200      	movs	r2, #0
 800a46a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	2203      	movs	r2, #3
 800a470:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800a472:	78fb      	ldrb	r3, [r7, #3]
 800a474:	b29a      	uxth	r2, r3
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	2200      	movs	r2, #0
 800a47e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2200      	movs	r2, #0
 800a484:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a486:	2200      	movs	r2, #0
 800a488:	2100      	movs	r1, #0
 800a48a:	6878      	ldr	r0, [r7, #4]
 800a48c:	f000 fad2 	bl	800aa34 <USBH_CtlReq>
 800a490:	4603      	mov	r3, r0
}
 800a492:	4618      	mov	r0, r3
 800a494:	3708      	adds	r7, #8
 800a496:	46bd      	mov	sp, r7
 800a498:	bd80      	pop	{r7, pc}

0800a49a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800a49a:	b580      	push	{r7, lr}
 800a49c:	b082      	sub	sp, #8
 800a49e:	af00      	add	r7, sp, #0
 800a4a0:	6078      	str	r0, [r7, #4]
 800a4a2:	460b      	mov	r3, r1
 800a4a4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	789b      	ldrb	r3, [r3, #2]
 800a4aa:	2b01      	cmp	r3, #1
 800a4ac:	d10f      	bne.n	800a4ce <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	2202      	movs	r2, #2
 800a4b2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2201      	movs	r2, #1
 800a4b8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	2200      	movs	r2, #0
 800a4be:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800a4c0:	78fb      	ldrb	r3, [r7, #3]
 800a4c2:	b29a      	uxth	r2, r3
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	2100      	movs	r1, #0
 800a4d2:	6878      	ldr	r0, [r7, #4]
 800a4d4:	f000 faae 	bl	800aa34 <USBH_CtlReq>
 800a4d8:	4603      	mov	r3, r0
}
 800a4da:	4618      	mov	r0, r3
 800a4dc:	3708      	adds	r7, #8
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	bd80      	pop	{r7, pc}

0800a4e2 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800a4e2:	b480      	push	{r7}
 800a4e4:	b085      	sub	sp, #20
 800a4e6:	af00      	add	r7, sp, #0
 800a4e8:	60f8      	str	r0, [r7, #12]
 800a4ea:	60b9      	str	r1, [r7, #8]
 800a4ec:	4613      	mov	r3, r2
 800a4ee:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800a4f0:	68bb      	ldr	r3, [r7, #8]
 800a4f2:	781a      	ldrb	r2, [r3, #0]
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800a4f8:	68bb      	ldr	r3, [r7, #8]
 800a4fa:	785a      	ldrb	r2, [r3, #1]
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800a500:	68bb      	ldr	r3, [r7, #8]
 800a502:	3302      	adds	r3, #2
 800a504:	781b      	ldrb	r3, [r3, #0]
 800a506:	b29a      	uxth	r2, r3
 800a508:	68bb      	ldr	r3, [r7, #8]
 800a50a:	3303      	adds	r3, #3
 800a50c:	781b      	ldrb	r3, [r3, #0]
 800a50e:	b29b      	uxth	r3, r3
 800a510:	021b      	lsls	r3, r3, #8
 800a512:	b29b      	uxth	r3, r3
 800a514:	4313      	orrs	r3, r2
 800a516:	b29a      	uxth	r2, r3
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800a51c:	68bb      	ldr	r3, [r7, #8]
 800a51e:	791a      	ldrb	r2, [r3, #4]
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800a524:	68bb      	ldr	r3, [r7, #8]
 800a526:	795a      	ldrb	r2, [r3, #5]
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800a52c:	68bb      	ldr	r3, [r7, #8]
 800a52e:	799a      	ldrb	r2, [r3, #6]
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800a534:	68bb      	ldr	r3, [r7, #8]
 800a536:	79da      	ldrb	r2, [r3, #7]
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	79db      	ldrb	r3, [r3, #7]
 800a540:	2b20      	cmp	r3, #32
 800a542:	dc11      	bgt.n	800a568 <USBH_ParseDevDesc+0x86>
 800a544:	2b08      	cmp	r3, #8
 800a546:	db16      	blt.n	800a576 <USBH_ParseDevDesc+0x94>
 800a548:	3b08      	subs	r3, #8
 800a54a:	2201      	movs	r2, #1
 800a54c:	fa02 f303 	lsl.w	r3, r2, r3
 800a550:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800a554:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a558:	2b00      	cmp	r3, #0
 800a55a:	bf14      	ite	ne
 800a55c:	2301      	movne	r3, #1
 800a55e:	2300      	moveq	r3, #0
 800a560:	b2db      	uxtb	r3, r3
 800a562:	2b00      	cmp	r3, #0
 800a564:	d102      	bne.n	800a56c <USBH_ParseDevDesc+0x8a>
 800a566:	e006      	b.n	800a576 <USBH_ParseDevDesc+0x94>
 800a568:	2b40      	cmp	r3, #64	; 0x40
 800a56a:	d104      	bne.n	800a576 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	79da      	ldrb	r2, [r3, #7]
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	71da      	strb	r2, [r3, #7]
      break;
 800a574:	e003      	b.n	800a57e <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	2240      	movs	r2, #64	; 0x40
 800a57a:	71da      	strb	r2, [r3, #7]
      break;
 800a57c:	bf00      	nop
  }

  if (length > 8U)
 800a57e:	88fb      	ldrh	r3, [r7, #6]
 800a580:	2b08      	cmp	r3, #8
 800a582:	d939      	bls.n	800a5f8 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800a584:	68bb      	ldr	r3, [r7, #8]
 800a586:	3308      	adds	r3, #8
 800a588:	781b      	ldrb	r3, [r3, #0]
 800a58a:	b29a      	uxth	r2, r3
 800a58c:	68bb      	ldr	r3, [r7, #8]
 800a58e:	3309      	adds	r3, #9
 800a590:	781b      	ldrb	r3, [r3, #0]
 800a592:	b29b      	uxth	r3, r3
 800a594:	021b      	lsls	r3, r3, #8
 800a596:	b29b      	uxth	r3, r3
 800a598:	4313      	orrs	r3, r2
 800a59a:	b29a      	uxth	r2, r3
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800a5a0:	68bb      	ldr	r3, [r7, #8]
 800a5a2:	330a      	adds	r3, #10
 800a5a4:	781b      	ldrb	r3, [r3, #0]
 800a5a6:	b29a      	uxth	r2, r3
 800a5a8:	68bb      	ldr	r3, [r7, #8]
 800a5aa:	330b      	adds	r3, #11
 800a5ac:	781b      	ldrb	r3, [r3, #0]
 800a5ae:	b29b      	uxth	r3, r3
 800a5b0:	021b      	lsls	r3, r3, #8
 800a5b2:	b29b      	uxth	r3, r3
 800a5b4:	4313      	orrs	r3, r2
 800a5b6:	b29a      	uxth	r2, r3
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800a5bc:	68bb      	ldr	r3, [r7, #8]
 800a5be:	330c      	adds	r3, #12
 800a5c0:	781b      	ldrb	r3, [r3, #0]
 800a5c2:	b29a      	uxth	r2, r3
 800a5c4:	68bb      	ldr	r3, [r7, #8]
 800a5c6:	330d      	adds	r3, #13
 800a5c8:	781b      	ldrb	r3, [r3, #0]
 800a5ca:	b29b      	uxth	r3, r3
 800a5cc:	021b      	lsls	r3, r3, #8
 800a5ce:	b29b      	uxth	r3, r3
 800a5d0:	4313      	orrs	r3, r2
 800a5d2:	b29a      	uxth	r2, r3
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800a5d8:	68bb      	ldr	r3, [r7, #8]
 800a5da:	7b9a      	ldrb	r2, [r3, #14]
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800a5e0:	68bb      	ldr	r3, [r7, #8]
 800a5e2:	7bda      	ldrb	r2, [r3, #15]
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800a5e8:	68bb      	ldr	r3, [r7, #8]
 800a5ea:	7c1a      	ldrb	r2, [r3, #16]
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800a5f0:	68bb      	ldr	r3, [r7, #8]
 800a5f2:	7c5a      	ldrb	r2, [r3, #17]
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	745a      	strb	r2, [r3, #17]
  }
}
 800a5f8:	bf00      	nop
 800a5fa:	3714      	adds	r7, #20
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a602:	4770      	bx	lr

0800a604 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800a604:	b580      	push	{r7, lr}
 800a606:	b08c      	sub	sp, #48	; 0x30
 800a608:	af00      	add	r7, sp, #0
 800a60a:	60f8      	str	r0, [r7, #12]
 800a60c:	60b9      	str	r1, [r7, #8]
 800a60e:	4613      	mov	r3, r2
 800a610:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a618:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800a61a:	2300      	movs	r3, #0
 800a61c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800a620:	68bb      	ldr	r3, [r7, #8]
 800a622:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800a624:	2300      	movs	r3, #0
 800a626:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800a62a:	2300      	movs	r3, #0
 800a62c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800a630:	68bb      	ldr	r3, [r7, #8]
 800a632:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800a634:	68bb      	ldr	r3, [r7, #8]
 800a636:	781a      	ldrb	r2, [r3, #0]
 800a638:	6a3b      	ldr	r3, [r7, #32]
 800a63a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800a63c:	68bb      	ldr	r3, [r7, #8]
 800a63e:	785a      	ldrb	r2, [r3, #1]
 800a640:	6a3b      	ldr	r3, [r7, #32]
 800a642:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800a644:	68bb      	ldr	r3, [r7, #8]
 800a646:	3302      	adds	r3, #2
 800a648:	781b      	ldrb	r3, [r3, #0]
 800a64a:	b29a      	uxth	r2, r3
 800a64c:	68bb      	ldr	r3, [r7, #8]
 800a64e:	3303      	adds	r3, #3
 800a650:	781b      	ldrb	r3, [r3, #0]
 800a652:	b29b      	uxth	r3, r3
 800a654:	021b      	lsls	r3, r3, #8
 800a656:	b29b      	uxth	r3, r3
 800a658:	4313      	orrs	r3, r2
 800a65a:	b29b      	uxth	r3, r3
 800a65c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a660:	bf28      	it	cs
 800a662:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800a666:	b29a      	uxth	r2, r3
 800a668:	6a3b      	ldr	r3, [r7, #32]
 800a66a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800a66c:	68bb      	ldr	r3, [r7, #8]
 800a66e:	791a      	ldrb	r2, [r3, #4]
 800a670:	6a3b      	ldr	r3, [r7, #32]
 800a672:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800a674:	68bb      	ldr	r3, [r7, #8]
 800a676:	795a      	ldrb	r2, [r3, #5]
 800a678:	6a3b      	ldr	r3, [r7, #32]
 800a67a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800a67c:	68bb      	ldr	r3, [r7, #8]
 800a67e:	799a      	ldrb	r2, [r3, #6]
 800a680:	6a3b      	ldr	r3, [r7, #32]
 800a682:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800a684:	68bb      	ldr	r3, [r7, #8]
 800a686:	79da      	ldrb	r2, [r3, #7]
 800a688:	6a3b      	ldr	r3, [r7, #32]
 800a68a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800a68c:	68bb      	ldr	r3, [r7, #8]
 800a68e:	7a1a      	ldrb	r2, [r3, #8]
 800a690:	6a3b      	ldr	r3, [r7, #32]
 800a692:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800a694:	6a3b      	ldr	r3, [r7, #32]
 800a696:	781b      	ldrb	r3, [r3, #0]
 800a698:	2b09      	cmp	r3, #9
 800a69a:	d002      	beq.n	800a6a2 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800a69c:	6a3b      	ldr	r3, [r7, #32]
 800a69e:	2209      	movs	r2, #9
 800a6a0:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800a6a2:	88fb      	ldrh	r3, [r7, #6]
 800a6a4:	2b09      	cmp	r3, #9
 800a6a6:	f240 809d 	bls.w	800a7e4 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800a6aa:	2309      	movs	r3, #9
 800a6ac:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a6b2:	e081      	b.n	800a7b8 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a6b4:	f107 0316 	add.w	r3, r7, #22
 800a6b8:	4619      	mov	r1, r3
 800a6ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a6bc:	f000 f99f 	bl	800a9fe <USBH_GetNextDesc>
 800a6c0:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800a6c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6c4:	785b      	ldrb	r3, [r3, #1]
 800a6c6:	2b04      	cmp	r3, #4
 800a6c8:	d176      	bne.n	800a7b8 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800a6ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6cc:	781b      	ldrb	r3, [r3, #0]
 800a6ce:	2b09      	cmp	r3, #9
 800a6d0:	d002      	beq.n	800a6d8 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800a6d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6d4:	2209      	movs	r2, #9
 800a6d6:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800a6d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a6dc:	221a      	movs	r2, #26
 800a6de:	fb02 f303 	mul.w	r3, r2, r3
 800a6e2:	3308      	adds	r3, #8
 800a6e4:	6a3a      	ldr	r2, [r7, #32]
 800a6e6:	4413      	add	r3, r2
 800a6e8:	3302      	adds	r3, #2
 800a6ea:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800a6ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a6ee:	69f8      	ldr	r0, [r7, #28]
 800a6f0:	f000 f87e 	bl	800a7f0 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a6fe:	e043      	b.n	800a788 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a700:	f107 0316 	add.w	r3, r7, #22
 800a704:	4619      	mov	r1, r3
 800a706:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a708:	f000 f979 	bl	800a9fe <USBH_GetNextDesc>
 800a70c:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a70e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a710:	785b      	ldrb	r3, [r3, #1]
 800a712:	2b05      	cmp	r3, #5
 800a714:	d138      	bne.n	800a788 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800a716:	69fb      	ldr	r3, [r7, #28]
 800a718:	795b      	ldrb	r3, [r3, #5]
 800a71a:	2b01      	cmp	r3, #1
 800a71c:	d10f      	bne.n	800a73e <USBH_ParseCfgDesc+0x13a>
 800a71e:	69fb      	ldr	r3, [r7, #28]
 800a720:	799b      	ldrb	r3, [r3, #6]
 800a722:	2b02      	cmp	r3, #2
 800a724:	d10b      	bne.n	800a73e <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a726:	69fb      	ldr	r3, [r7, #28]
 800a728:	79db      	ldrb	r3, [r3, #7]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d10f      	bne.n	800a74e <USBH_ParseCfgDesc+0x14a>
 800a72e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a730:	781b      	ldrb	r3, [r3, #0]
 800a732:	2b09      	cmp	r3, #9
 800a734:	d00b      	beq.n	800a74e <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800a736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a738:	2209      	movs	r2, #9
 800a73a:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a73c:	e007      	b.n	800a74e <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800a73e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a740:	781b      	ldrb	r3, [r3, #0]
 800a742:	2b07      	cmp	r3, #7
 800a744:	d004      	beq.n	800a750 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800a746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a748:	2207      	movs	r2, #7
 800a74a:	701a      	strb	r2, [r3, #0]
 800a74c:	e000      	b.n	800a750 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a74e:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800a750:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a754:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a758:	3201      	adds	r2, #1
 800a75a:	00d2      	lsls	r2, r2, #3
 800a75c:	211a      	movs	r1, #26
 800a75e:	fb01 f303 	mul.w	r3, r1, r3
 800a762:	4413      	add	r3, r2
 800a764:	3308      	adds	r3, #8
 800a766:	6a3a      	ldr	r2, [r7, #32]
 800a768:	4413      	add	r3, r2
 800a76a:	3304      	adds	r3, #4
 800a76c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800a76e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a770:	69b9      	ldr	r1, [r7, #24]
 800a772:	68f8      	ldr	r0, [r7, #12]
 800a774:	f000 f86b 	bl	800a84e <USBH_ParseEPDesc>
 800a778:	4603      	mov	r3, r0
 800a77a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800a77e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a782:	3301      	adds	r3, #1
 800a784:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a788:	69fb      	ldr	r3, [r7, #28]
 800a78a:	791b      	ldrb	r3, [r3, #4]
 800a78c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a790:	429a      	cmp	r2, r3
 800a792:	d204      	bcs.n	800a79e <USBH_ParseCfgDesc+0x19a>
 800a794:	6a3b      	ldr	r3, [r7, #32]
 800a796:	885a      	ldrh	r2, [r3, #2]
 800a798:	8afb      	ldrh	r3, [r7, #22]
 800a79a:	429a      	cmp	r2, r3
 800a79c:	d8b0      	bhi.n	800a700 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800a79e:	69fb      	ldr	r3, [r7, #28]
 800a7a0:	791b      	ldrb	r3, [r3, #4]
 800a7a2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a7a6:	429a      	cmp	r2, r3
 800a7a8:	d201      	bcs.n	800a7ae <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800a7aa:	2303      	movs	r3, #3
 800a7ac:	e01c      	b.n	800a7e8 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800a7ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a7b2:	3301      	adds	r3, #1
 800a7b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a7b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a7bc:	2b01      	cmp	r3, #1
 800a7be:	d805      	bhi.n	800a7cc <USBH_ParseCfgDesc+0x1c8>
 800a7c0:	6a3b      	ldr	r3, [r7, #32]
 800a7c2:	885a      	ldrh	r2, [r3, #2]
 800a7c4:	8afb      	ldrh	r3, [r7, #22]
 800a7c6:	429a      	cmp	r2, r3
 800a7c8:	f63f af74 	bhi.w	800a6b4 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800a7cc:	6a3b      	ldr	r3, [r7, #32]
 800a7ce:	791b      	ldrb	r3, [r3, #4]
 800a7d0:	2b02      	cmp	r3, #2
 800a7d2:	bf28      	it	cs
 800a7d4:	2302      	movcs	r3, #2
 800a7d6:	b2db      	uxtb	r3, r3
 800a7d8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a7dc:	429a      	cmp	r2, r3
 800a7de:	d201      	bcs.n	800a7e4 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800a7e0:	2303      	movs	r3, #3
 800a7e2:	e001      	b.n	800a7e8 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800a7e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	3730      	adds	r7, #48	; 0x30
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	bd80      	pop	{r7, pc}

0800a7f0 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800a7f0:	b480      	push	{r7}
 800a7f2:	b083      	sub	sp, #12
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
 800a7f8:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800a7fa:	683b      	ldr	r3, [r7, #0]
 800a7fc:	781a      	ldrb	r2, [r3, #0]
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	785a      	ldrb	r2, [r3, #1]
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800a80a:	683b      	ldr	r3, [r7, #0]
 800a80c:	789a      	ldrb	r2, [r3, #2]
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800a812:	683b      	ldr	r3, [r7, #0]
 800a814:	78da      	ldrb	r2, [r3, #3]
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800a81a:	683b      	ldr	r3, [r7, #0]
 800a81c:	791a      	ldrb	r2, [r3, #4]
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	795a      	ldrb	r2, [r3, #5]
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800a82a:	683b      	ldr	r3, [r7, #0]
 800a82c:	799a      	ldrb	r2, [r3, #6]
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800a832:	683b      	ldr	r3, [r7, #0]
 800a834:	79da      	ldrb	r2, [r3, #7]
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800a83a:	683b      	ldr	r3, [r7, #0]
 800a83c:	7a1a      	ldrb	r2, [r3, #8]
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	721a      	strb	r2, [r3, #8]
}
 800a842:	bf00      	nop
 800a844:	370c      	adds	r7, #12
 800a846:	46bd      	mov	sp, r7
 800a848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84c:	4770      	bx	lr

0800a84e <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800a84e:	b480      	push	{r7}
 800a850:	b087      	sub	sp, #28
 800a852:	af00      	add	r7, sp, #0
 800a854:	60f8      	str	r0, [r7, #12]
 800a856:	60b9      	str	r1, [r7, #8]
 800a858:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800a85a:	2300      	movs	r3, #0
 800a85c:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	781a      	ldrb	r2, [r3, #0]
 800a862:	68bb      	ldr	r3, [r7, #8]
 800a864:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	785a      	ldrb	r2, [r3, #1]
 800a86a:	68bb      	ldr	r3, [r7, #8]
 800a86c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	789a      	ldrb	r2, [r3, #2]
 800a872:	68bb      	ldr	r3, [r7, #8]
 800a874:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	78da      	ldrb	r2, [r3, #3]
 800a87a:	68bb      	ldr	r3, [r7, #8]
 800a87c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	3304      	adds	r3, #4
 800a882:	781b      	ldrb	r3, [r3, #0]
 800a884:	b29a      	uxth	r2, r3
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	3305      	adds	r3, #5
 800a88a:	781b      	ldrb	r3, [r3, #0]
 800a88c:	b29b      	uxth	r3, r3
 800a88e:	021b      	lsls	r3, r3, #8
 800a890:	b29b      	uxth	r3, r3
 800a892:	4313      	orrs	r3, r2
 800a894:	b29a      	uxth	r2, r3
 800a896:	68bb      	ldr	r3, [r7, #8]
 800a898:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	799a      	ldrb	r2, [r3, #6]
 800a89e:	68bb      	ldr	r3, [r7, #8]
 800a8a0:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800a8a2:	68bb      	ldr	r3, [r7, #8]
 800a8a4:	889b      	ldrh	r3, [r3, #4]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d102      	bne.n	800a8b0 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800a8aa:	2303      	movs	r3, #3
 800a8ac:	75fb      	strb	r3, [r7, #23]
 800a8ae:	e033      	b.n	800a918 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800a8b0:	68bb      	ldr	r3, [r7, #8]
 800a8b2:	889b      	ldrh	r3, [r3, #4]
 800a8b4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a8b8:	f023 0307 	bic.w	r3, r3, #7
 800a8bc:	b29a      	uxth	r2, r3
 800a8be:	68bb      	ldr	r3, [r7, #8]
 800a8c0:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800a8c2:	68bb      	ldr	r3, [r7, #8]
 800a8c4:	889b      	ldrh	r3, [r3, #4]
 800a8c6:	b21a      	sxth	r2, r3
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	3304      	adds	r3, #4
 800a8cc:	781b      	ldrb	r3, [r3, #0]
 800a8ce:	b299      	uxth	r1, r3
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	3305      	adds	r3, #5
 800a8d4:	781b      	ldrb	r3, [r3, #0]
 800a8d6:	b29b      	uxth	r3, r3
 800a8d8:	021b      	lsls	r3, r3, #8
 800a8da:	b29b      	uxth	r3, r3
 800a8dc:	430b      	orrs	r3, r1
 800a8de:	b29b      	uxth	r3, r3
 800a8e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d110      	bne.n	800a90a <USBH_ParseEPDesc+0xbc>
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	3304      	adds	r3, #4
 800a8ec:	781b      	ldrb	r3, [r3, #0]
 800a8ee:	b299      	uxth	r1, r3
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	3305      	adds	r3, #5
 800a8f4:	781b      	ldrb	r3, [r3, #0]
 800a8f6:	b29b      	uxth	r3, r3
 800a8f8:	021b      	lsls	r3, r3, #8
 800a8fa:	b29b      	uxth	r3, r3
 800a8fc:	430b      	orrs	r3, r1
 800a8fe:	b29b      	uxth	r3, r3
 800a900:	b21b      	sxth	r3, r3
 800a902:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a906:	b21b      	sxth	r3, r3
 800a908:	e001      	b.n	800a90e <USBH_ParseEPDesc+0xc0>
 800a90a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a90e:	4313      	orrs	r3, r2
 800a910:	b21b      	sxth	r3, r3
 800a912:	b29a      	uxth	r2, r3
 800a914:	68bb      	ldr	r3, [r7, #8]
 800a916:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d116      	bne.n	800a950 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a922:	68bb      	ldr	r3, [r7, #8]
 800a924:	78db      	ldrb	r3, [r3, #3]
 800a926:	f003 0303 	and.w	r3, r3, #3
 800a92a:	2b01      	cmp	r3, #1
 800a92c:	d005      	beq.n	800a93a <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800a92e:	68bb      	ldr	r3, [r7, #8]
 800a930:	78db      	ldrb	r3, [r3, #3]
 800a932:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a936:	2b03      	cmp	r3, #3
 800a938:	d127      	bne.n	800a98a <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a93a:	68bb      	ldr	r3, [r7, #8]
 800a93c:	799b      	ldrb	r3, [r3, #6]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d003      	beq.n	800a94a <USBH_ParseEPDesc+0xfc>
 800a942:	68bb      	ldr	r3, [r7, #8]
 800a944:	799b      	ldrb	r3, [r3, #6]
 800a946:	2b10      	cmp	r3, #16
 800a948:	d91f      	bls.n	800a98a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800a94a:	2303      	movs	r3, #3
 800a94c:	75fb      	strb	r3, [r7, #23]
 800a94e:	e01c      	b.n	800a98a <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800a950:	68bb      	ldr	r3, [r7, #8]
 800a952:	78db      	ldrb	r3, [r3, #3]
 800a954:	f003 0303 	and.w	r3, r3, #3
 800a958:	2b01      	cmp	r3, #1
 800a95a:	d10a      	bne.n	800a972 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a95c:	68bb      	ldr	r3, [r7, #8]
 800a95e:	799b      	ldrb	r3, [r3, #6]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d003      	beq.n	800a96c <USBH_ParseEPDesc+0x11e>
 800a964:	68bb      	ldr	r3, [r7, #8]
 800a966:	799b      	ldrb	r3, [r3, #6]
 800a968:	2b10      	cmp	r3, #16
 800a96a:	d90e      	bls.n	800a98a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800a96c:	2303      	movs	r3, #3
 800a96e:	75fb      	strb	r3, [r7, #23]
 800a970:	e00b      	b.n	800a98a <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800a972:	68bb      	ldr	r3, [r7, #8]
 800a974:	78db      	ldrb	r3, [r3, #3]
 800a976:	f003 0303 	and.w	r3, r3, #3
 800a97a:	2b03      	cmp	r3, #3
 800a97c:	d105      	bne.n	800a98a <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800a97e:	68bb      	ldr	r3, [r7, #8]
 800a980:	799b      	ldrb	r3, [r3, #6]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d101      	bne.n	800a98a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800a986:	2303      	movs	r3, #3
 800a988:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800a98a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a98c:	4618      	mov	r0, r3
 800a98e:	371c      	adds	r7, #28
 800a990:	46bd      	mov	sp, r7
 800a992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a996:	4770      	bx	lr

0800a998 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800a998:	b480      	push	{r7}
 800a99a:	b087      	sub	sp, #28
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	60f8      	str	r0, [r7, #12]
 800a9a0:	60b9      	str	r1, [r7, #8]
 800a9a2:	4613      	mov	r3, r2
 800a9a4:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	3301      	adds	r3, #1
 800a9aa:	781b      	ldrb	r3, [r3, #0]
 800a9ac:	2b03      	cmp	r3, #3
 800a9ae:	d120      	bne.n	800a9f2 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	781b      	ldrb	r3, [r3, #0]
 800a9b4:	1e9a      	subs	r2, r3, #2
 800a9b6:	88fb      	ldrh	r3, [r7, #6]
 800a9b8:	4293      	cmp	r3, r2
 800a9ba:	bf28      	it	cs
 800a9bc:	4613      	movcs	r3, r2
 800a9be:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	3302      	adds	r3, #2
 800a9c4:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	82fb      	strh	r3, [r7, #22]
 800a9ca:	e00b      	b.n	800a9e4 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800a9cc:	8afb      	ldrh	r3, [r7, #22]
 800a9ce:	68fa      	ldr	r2, [r7, #12]
 800a9d0:	4413      	add	r3, r2
 800a9d2:	781a      	ldrb	r2, [r3, #0]
 800a9d4:	68bb      	ldr	r3, [r7, #8]
 800a9d6:	701a      	strb	r2, [r3, #0]
      pdest++;
 800a9d8:	68bb      	ldr	r3, [r7, #8]
 800a9da:	3301      	adds	r3, #1
 800a9dc:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800a9de:	8afb      	ldrh	r3, [r7, #22]
 800a9e0:	3302      	adds	r3, #2
 800a9e2:	82fb      	strh	r3, [r7, #22]
 800a9e4:	8afa      	ldrh	r2, [r7, #22]
 800a9e6:	8abb      	ldrh	r3, [r7, #20]
 800a9e8:	429a      	cmp	r2, r3
 800a9ea:	d3ef      	bcc.n	800a9cc <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800a9ec:	68bb      	ldr	r3, [r7, #8]
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	701a      	strb	r2, [r3, #0]
  }
}
 800a9f2:	bf00      	nop
 800a9f4:	371c      	adds	r7, #28
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fc:	4770      	bx	lr

0800a9fe <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800a9fe:	b480      	push	{r7}
 800aa00:	b085      	sub	sp, #20
 800aa02:	af00      	add	r7, sp, #0
 800aa04:	6078      	str	r0, [r7, #4]
 800aa06:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800aa08:	683b      	ldr	r3, [r7, #0]
 800aa0a:	881a      	ldrh	r2, [r3, #0]
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	781b      	ldrb	r3, [r3, #0]
 800aa10:	b29b      	uxth	r3, r3
 800aa12:	4413      	add	r3, r2
 800aa14:	b29a      	uxth	r2, r3
 800aa16:	683b      	ldr	r3, [r7, #0]
 800aa18:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	781b      	ldrb	r3, [r3, #0]
 800aa1e:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	4413      	add	r3, r2
 800aa24:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800aa26:	68fb      	ldr	r3, [r7, #12]
}
 800aa28:	4618      	mov	r0, r3
 800aa2a:	3714      	adds	r7, #20
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa32:	4770      	bx	lr

0800aa34 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b086      	sub	sp, #24
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	60f8      	str	r0, [r7, #12]
 800aa3c:	60b9      	str	r1, [r7, #8]
 800aa3e:	4613      	mov	r3, r2
 800aa40:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800aa42:	2301      	movs	r3, #1
 800aa44:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	789b      	ldrb	r3, [r3, #2]
 800aa4a:	2b01      	cmp	r3, #1
 800aa4c:	d002      	beq.n	800aa54 <USBH_CtlReq+0x20>
 800aa4e:	2b02      	cmp	r3, #2
 800aa50:	d00f      	beq.n	800aa72 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800aa52:	e027      	b.n	800aaa4 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	68ba      	ldr	r2, [r7, #8]
 800aa58:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	88fa      	ldrh	r2, [r7, #6]
 800aa5e:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	2201      	movs	r2, #1
 800aa64:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	2202      	movs	r2, #2
 800aa6a:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800aa6c:	2301      	movs	r3, #1
 800aa6e:	75fb      	strb	r3, [r7, #23]
      break;
 800aa70:	e018      	b.n	800aaa4 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800aa72:	68f8      	ldr	r0, [r7, #12]
 800aa74:	f000 f81c 	bl	800aab0 <USBH_HandleControl>
 800aa78:	4603      	mov	r3, r0
 800aa7a:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800aa7c:	7dfb      	ldrb	r3, [r7, #23]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d002      	beq.n	800aa88 <USBH_CtlReq+0x54>
 800aa82:	7dfb      	ldrb	r3, [r7, #23]
 800aa84:	2b03      	cmp	r3, #3
 800aa86:	d106      	bne.n	800aa96 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	2201      	movs	r2, #1
 800aa8c:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	2200      	movs	r2, #0
 800aa92:	761a      	strb	r2, [r3, #24]
      break;
 800aa94:	e005      	b.n	800aaa2 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800aa96:	7dfb      	ldrb	r3, [r7, #23]
 800aa98:	2b02      	cmp	r3, #2
 800aa9a:	d102      	bne.n	800aaa2 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	2201      	movs	r2, #1
 800aaa0:	709a      	strb	r2, [r3, #2]
      break;
 800aaa2:	bf00      	nop
  }
  return status;
 800aaa4:	7dfb      	ldrb	r3, [r7, #23]
}
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	3718      	adds	r7, #24
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	bd80      	pop	{r7, pc}
	...

0800aab0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b086      	sub	sp, #24
 800aab4:	af02      	add	r7, sp, #8
 800aab6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800aab8:	2301      	movs	r3, #1
 800aaba:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800aabc:	2300      	movs	r3, #0
 800aabe:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	7e1b      	ldrb	r3, [r3, #24]
 800aac4:	3b01      	subs	r3, #1
 800aac6:	2b0a      	cmp	r3, #10
 800aac8:	f200 8156 	bhi.w	800ad78 <USBH_HandleControl+0x2c8>
 800aacc:	a201      	add	r2, pc, #4	; (adr r2, 800aad4 <USBH_HandleControl+0x24>)
 800aace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aad2:	bf00      	nop
 800aad4:	0800ab01 	.word	0x0800ab01
 800aad8:	0800ab1b 	.word	0x0800ab1b
 800aadc:	0800ab85 	.word	0x0800ab85
 800aae0:	0800abab 	.word	0x0800abab
 800aae4:	0800abe3 	.word	0x0800abe3
 800aae8:	0800ac0d 	.word	0x0800ac0d
 800aaec:	0800ac5f 	.word	0x0800ac5f
 800aaf0:	0800ac81 	.word	0x0800ac81
 800aaf4:	0800acbd 	.word	0x0800acbd
 800aaf8:	0800ace3 	.word	0x0800ace3
 800aafc:	0800ad21 	.word	0x0800ad21
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	f103 0110 	add.w	r1, r3, #16
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	795b      	ldrb	r3, [r3, #5]
 800ab0a:	461a      	mov	r2, r3
 800ab0c:	6878      	ldr	r0, [r7, #4]
 800ab0e:	f000 f943 	bl	800ad98 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	2202      	movs	r2, #2
 800ab16:	761a      	strb	r2, [r3, #24]
      break;
 800ab18:	e139      	b.n	800ad8e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	795b      	ldrb	r3, [r3, #5]
 800ab1e:	4619      	mov	r1, r3
 800ab20:	6878      	ldr	r0, [r7, #4]
 800ab22:	f000 fcc5 	bl	800b4b0 <USBH_LL_GetURBState>
 800ab26:	4603      	mov	r3, r0
 800ab28:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800ab2a:	7bbb      	ldrb	r3, [r7, #14]
 800ab2c:	2b01      	cmp	r3, #1
 800ab2e:	d11e      	bne.n	800ab6e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	7c1b      	ldrb	r3, [r3, #16]
 800ab34:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ab38:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	8adb      	ldrh	r3, [r3, #22]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d00a      	beq.n	800ab58 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800ab42:	7b7b      	ldrb	r3, [r7, #13]
 800ab44:	2b80      	cmp	r3, #128	; 0x80
 800ab46:	d103      	bne.n	800ab50 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	2203      	movs	r2, #3
 800ab4c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ab4e:	e115      	b.n	800ad7c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	2205      	movs	r2, #5
 800ab54:	761a      	strb	r2, [r3, #24]
      break;
 800ab56:	e111      	b.n	800ad7c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800ab58:	7b7b      	ldrb	r3, [r7, #13]
 800ab5a:	2b80      	cmp	r3, #128	; 0x80
 800ab5c:	d103      	bne.n	800ab66 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	2209      	movs	r2, #9
 800ab62:	761a      	strb	r2, [r3, #24]
      break;
 800ab64:	e10a      	b.n	800ad7c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	2207      	movs	r2, #7
 800ab6a:	761a      	strb	r2, [r3, #24]
      break;
 800ab6c:	e106      	b.n	800ad7c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800ab6e:	7bbb      	ldrb	r3, [r7, #14]
 800ab70:	2b04      	cmp	r3, #4
 800ab72:	d003      	beq.n	800ab7c <USBH_HandleControl+0xcc>
 800ab74:	7bbb      	ldrb	r3, [r7, #14]
 800ab76:	2b02      	cmp	r3, #2
 800ab78:	f040 8100 	bne.w	800ad7c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	220b      	movs	r2, #11
 800ab80:	761a      	strb	r2, [r3, #24]
      break;
 800ab82:	e0fb      	b.n	800ad7c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ab8a:	b29a      	uxth	r2, r3
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	6899      	ldr	r1, [r3, #8]
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	899a      	ldrh	r2, [r3, #12]
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	791b      	ldrb	r3, [r3, #4]
 800ab9c:	6878      	ldr	r0, [r7, #4]
 800ab9e:	f000 f93a 	bl	800ae16 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	2204      	movs	r2, #4
 800aba6:	761a      	strb	r2, [r3, #24]
      break;
 800aba8:	e0f1      	b.n	800ad8e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	791b      	ldrb	r3, [r3, #4]
 800abae:	4619      	mov	r1, r3
 800abb0:	6878      	ldr	r0, [r7, #4]
 800abb2:	f000 fc7d 	bl	800b4b0 <USBH_LL_GetURBState>
 800abb6:	4603      	mov	r3, r0
 800abb8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800abba:	7bbb      	ldrb	r3, [r7, #14]
 800abbc:	2b01      	cmp	r3, #1
 800abbe:	d102      	bne.n	800abc6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	2209      	movs	r2, #9
 800abc4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800abc6:	7bbb      	ldrb	r3, [r7, #14]
 800abc8:	2b05      	cmp	r3, #5
 800abca:	d102      	bne.n	800abd2 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800abcc:	2303      	movs	r3, #3
 800abce:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800abd0:	e0d6      	b.n	800ad80 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800abd2:	7bbb      	ldrb	r3, [r7, #14]
 800abd4:	2b04      	cmp	r3, #4
 800abd6:	f040 80d3 	bne.w	800ad80 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	220b      	movs	r2, #11
 800abde:	761a      	strb	r2, [r3, #24]
      break;
 800abe0:	e0ce      	b.n	800ad80 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	6899      	ldr	r1, [r3, #8]
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	899a      	ldrh	r2, [r3, #12]
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	795b      	ldrb	r3, [r3, #5]
 800abee:	2001      	movs	r0, #1
 800abf0:	9000      	str	r0, [sp, #0]
 800abf2:	6878      	ldr	r0, [r7, #4]
 800abf4:	f000 f8ea 	bl	800adcc <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800abfe:	b29a      	uxth	r2, r3
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	2206      	movs	r2, #6
 800ac08:	761a      	strb	r2, [r3, #24]
      break;
 800ac0a:	e0c0      	b.n	800ad8e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	795b      	ldrb	r3, [r3, #5]
 800ac10:	4619      	mov	r1, r3
 800ac12:	6878      	ldr	r0, [r7, #4]
 800ac14:	f000 fc4c 	bl	800b4b0 <USBH_LL_GetURBState>
 800ac18:	4603      	mov	r3, r0
 800ac1a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ac1c:	7bbb      	ldrb	r3, [r7, #14]
 800ac1e:	2b01      	cmp	r3, #1
 800ac20:	d103      	bne.n	800ac2a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	2207      	movs	r2, #7
 800ac26:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ac28:	e0ac      	b.n	800ad84 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800ac2a:	7bbb      	ldrb	r3, [r7, #14]
 800ac2c:	2b05      	cmp	r3, #5
 800ac2e:	d105      	bne.n	800ac3c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	220c      	movs	r2, #12
 800ac34:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800ac36:	2303      	movs	r3, #3
 800ac38:	73fb      	strb	r3, [r7, #15]
      break;
 800ac3a:	e0a3      	b.n	800ad84 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ac3c:	7bbb      	ldrb	r3, [r7, #14]
 800ac3e:	2b02      	cmp	r3, #2
 800ac40:	d103      	bne.n	800ac4a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	2205      	movs	r2, #5
 800ac46:	761a      	strb	r2, [r3, #24]
      break;
 800ac48:	e09c      	b.n	800ad84 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800ac4a:	7bbb      	ldrb	r3, [r7, #14]
 800ac4c:	2b04      	cmp	r3, #4
 800ac4e:	f040 8099 	bne.w	800ad84 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	220b      	movs	r2, #11
 800ac56:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800ac58:	2302      	movs	r3, #2
 800ac5a:	73fb      	strb	r3, [r7, #15]
      break;
 800ac5c:	e092      	b.n	800ad84 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	791b      	ldrb	r3, [r3, #4]
 800ac62:	2200      	movs	r2, #0
 800ac64:	2100      	movs	r1, #0
 800ac66:	6878      	ldr	r0, [r7, #4]
 800ac68:	f000 f8d5 	bl	800ae16 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ac72:	b29a      	uxth	r2, r3
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	2208      	movs	r2, #8
 800ac7c:	761a      	strb	r2, [r3, #24]

      break;
 800ac7e:	e086      	b.n	800ad8e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	791b      	ldrb	r3, [r3, #4]
 800ac84:	4619      	mov	r1, r3
 800ac86:	6878      	ldr	r0, [r7, #4]
 800ac88:	f000 fc12 	bl	800b4b0 <USBH_LL_GetURBState>
 800ac8c:	4603      	mov	r3, r0
 800ac8e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ac90:	7bbb      	ldrb	r3, [r7, #14]
 800ac92:	2b01      	cmp	r3, #1
 800ac94:	d105      	bne.n	800aca2 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	220d      	movs	r2, #13
 800ac9a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800aca0:	e072      	b.n	800ad88 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800aca2:	7bbb      	ldrb	r3, [r7, #14]
 800aca4:	2b04      	cmp	r3, #4
 800aca6:	d103      	bne.n	800acb0 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	220b      	movs	r2, #11
 800acac:	761a      	strb	r2, [r3, #24]
      break;
 800acae:	e06b      	b.n	800ad88 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800acb0:	7bbb      	ldrb	r3, [r7, #14]
 800acb2:	2b05      	cmp	r3, #5
 800acb4:	d168      	bne.n	800ad88 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800acb6:	2303      	movs	r3, #3
 800acb8:	73fb      	strb	r3, [r7, #15]
      break;
 800acba:	e065      	b.n	800ad88 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	795b      	ldrb	r3, [r3, #5]
 800acc0:	2201      	movs	r2, #1
 800acc2:	9200      	str	r2, [sp, #0]
 800acc4:	2200      	movs	r2, #0
 800acc6:	2100      	movs	r1, #0
 800acc8:	6878      	ldr	r0, [r7, #4]
 800acca:	f000 f87f 	bl	800adcc <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800acd4:	b29a      	uxth	r2, r3
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	220a      	movs	r2, #10
 800acde:	761a      	strb	r2, [r3, #24]
      break;
 800ace0:	e055      	b.n	800ad8e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	795b      	ldrb	r3, [r3, #5]
 800ace6:	4619      	mov	r1, r3
 800ace8:	6878      	ldr	r0, [r7, #4]
 800acea:	f000 fbe1 	bl	800b4b0 <USBH_LL_GetURBState>
 800acee:	4603      	mov	r3, r0
 800acf0:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800acf2:	7bbb      	ldrb	r3, [r7, #14]
 800acf4:	2b01      	cmp	r3, #1
 800acf6:	d105      	bne.n	800ad04 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800acf8:	2300      	movs	r3, #0
 800acfa:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	220d      	movs	r2, #13
 800ad00:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ad02:	e043      	b.n	800ad8c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ad04:	7bbb      	ldrb	r3, [r7, #14]
 800ad06:	2b02      	cmp	r3, #2
 800ad08:	d103      	bne.n	800ad12 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	2209      	movs	r2, #9
 800ad0e:	761a      	strb	r2, [r3, #24]
      break;
 800ad10:	e03c      	b.n	800ad8c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800ad12:	7bbb      	ldrb	r3, [r7, #14]
 800ad14:	2b04      	cmp	r3, #4
 800ad16:	d139      	bne.n	800ad8c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	220b      	movs	r2, #11
 800ad1c:	761a      	strb	r2, [r3, #24]
      break;
 800ad1e:	e035      	b.n	800ad8c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	7e5b      	ldrb	r3, [r3, #25]
 800ad24:	3301      	adds	r3, #1
 800ad26:	b2da      	uxtb	r2, r3
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	765a      	strb	r2, [r3, #25]
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	7e5b      	ldrb	r3, [r3, #25]
 800ad30:	2b02      	cmp	r3, #2
 800ad32:	d806      	bhi.n	800ad42 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	2201      	movs	r2, #1
 800ad38:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	2201      	movs	r2, #1
 800ad3e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800ad40:	e025      	b.n	800ad8e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ad48:	2106      	movs	r1, #6
 800ad4a:	6878      	ldr	r0, [r7, #4]
 800ad4c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	2200      	movs	r2, #0
 800ad52:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	795b      	ldrb	r3, [r3, #5]
 800ad58:	4619      	mov	r1, r3
 800ad5a:	6878      	ldr	r0, [r7, #4]
 800ad5c:	f000 f90c 	bl	800af78 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	791b      	ldrb	r3, [r3, #4]
 800ad64:	4619      	mov	r1, r3
 800ad66:	6878      	ldr	r0, [r7, #4]
 800ad68:	f000 f906 	bl	800af78 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	2200      	movs	r2, #0
 800ad70:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800ad72:	2302      	movs	r3, #2
 800ad74:	73fb      	strb	r3, [r7, #15]
      break;
 800ad76:	e00a      	b.n	800ad8e <USBH_HandleControl+0x2de>

    default:
      break;
 800ad78:	bf00      	nop
 800ad7a:	e008      	b.n	800ad8e <USBH_HandleControl+0x2de>
      break;
 800ad7c:	bf00      	nop
 800ad7e:	e006      	b.n	800ad8e <USBH_HandleControl+0x2de>
      break;
 800ad80:	bf00      	nop
 800ad82:	e004      	b.n	800ad8e <USBH_HandleControl+0x2de>
      break;
 800ad84:	bf00      	nop
 800ad86:	e002      	b.n	800ad8e <USBH_HandleControl+0x2de>
      break;
 800ad88:	bf00      	nop
 800ad8a:	e000      	b.n	800ad8e <USBH_HandleControl+0x2de>
      break;
 800ad8c:	bf00      	nop
  }

  return status;
 800ad8e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad90:	4618      	mov	r0, r3
 800ad92:	3710      	adds	r7, #16
 800ad94:	46bd      	mov	sp, r7
 800ad96:	bd80      	pop	{r7, pc}

0800ad98 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b088      	sub	sp, #32
 800ad9c:	af04      	add	r7, sp, #16
 800ad9e:	60f8      	str	r0, [r7, #12]
 800ada0:	60b9      	str	r1, [r7, #8]
 800ada2:	4613      	mov	r3, r2
 800ada4:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ada6:	79f9      	ldrb	r1, [r7, #7]
 800ada8:	2300      	movs	r3, #0
 800adaa:	9303      	str	r3, [sp, #12]
 800adac:	2308      	movs	r3, #8
 800adae:	9302      	str	r3, [sp, #8]
 800adb0:	68bb      	ldr	r3, [r7, #8]
 800adb2:	9301      	str	r3, [sp, #4]
 800adb4:	2300      	movs	r3, #0
 800adb6:	9300      	str	r3, [sp, #0]
 800adb8:	2300      	movs	r3, #0
 800adba:	2200      	movs	r2, #0
 800adbc:	68f8      	ldr	r0, [r7, #12]
 800adbe:	f000 fb46 	bl	800b44e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800adc2:	2300      	movs	r3, #0
}
 800adc4:	4618      	mov	r0, r3
 800adc6:	3710      	adds	r7, #16
 800adc8:	46bd      	mov	sp, r7
 800adca:	bd80      	pop	{r7, pc}

0800adcc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800adcc:	b580      	push	{r7, lr}
 800adce:	b088      	sub	sp, #32
 800add0:	af04      	add	r7, sp, #16
 800add2:	60f8      	str	r0, [r7, #12]
 800add4:	60b9      	str	r1, [r7, #8]
 800add6:	4611      	mov	r1, r2
 800add8:	461a      	mov	r2, r3
 800adda:	460b      	mov	r3, r1
 800addc:	80fb      	strh	r3, [r7, #6]
 800adde:	4613      	mov	r3, r2
 800ade0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d001      	beq.n	800adf0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800adec:	2300      	movs	r3, #0
 800adee:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800adf0:	7979      	ldrb	r1, [r7, #5]
 800adf2:	7e3b      	ldrb	r3, [r7, #24]
 800adf4:	9303      	str	r3, [sp, #12]
 800adf6:	88fb      	ldrh	r3, [r7, #6]
 800adf8:	9302      	str	r3, [sp, #8]
 800adfa:	68bb      	ldr	r3, [r7, #8]
 800adfc:	9301      	str	r3, [sp, #4]
 800adfe:	2301      	movs	r3, #1
 800ae00:	9300      	str	r3, [sp, #0]
 800ae02:	2300      	movs	r3, #0
 800ae04:	2200      	movs	r2, #0
 800ae06:	68f8      	ldr	r0, [r7, #12]
 800ae08:	f000 fb21 	bl	800b44e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800ae0c:	2300      	movs	r3, #0
}
 800ae0e:	4618      	mov	r0, r3
 800ae10:	3710      	adds	r7, #16
 800ae12:	46bd      	mov	sp, r7
 800ae14:	bd80      	pop	{r7, pc}

0800ae16 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800ae16:	b580      	push	{r7, lr}
 800ae18:	b088      	sub	sp, #32
 800ae1a:	af04      	add	r7, sp, #16
 800ae1c:	60f8      	str	r0, [r7, #12]
 800ae1e:	60b9      	str	r1, [r7, #8]
 800ae20:	4611      	mov	r1, r2
 800ae22:	461a      	mov	r2, r3
 800ae24:	460b      	mov	r3, r1
 800ae26:	80fb      	strh	r3, [r7, #6]
 800ae28:	4613      	mov	r3, r2
 800ae2a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ae2c:	7979      	ldrb	r1, [r7, #5]
 800ae2e:	2300      	movs	r3, #0
 800ae30:	9303      	str	r3, [sp, #12]
 800ae32:	88fb      	ldrh	r3, [r7, #6]
 800ae34:	9302      	str	r3, [sp, #8]
 800ae36:	68bb      	ldr	r3, [r7, #8]
 800ae38:	9301      	str	r3, [sp, #4]
 800ae3a:	2301      	movs	r3, #1
 800ae3c:	9300      	str	r3, [sp, #0]
 800ae3e:	2300      	movs	r3, #0
 800ae40:	2201      	movs	r2, #1
 800ae42:	68f8      	ldr	r0, [r7, #12]
 800ae44:	f000 fb03 	bl	800b44e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800ae48:	2300      	movs	r3, #0

}
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	3710      	adds	r7, #16
 800ae4e:	46bd      	mov	sp, r7
 800ae50:	bd80      	pop	{r7, pc}

0800ae52 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800ae52:	b580      	push	{r7, lr}
 800ae54:	b088      	sub	sp, #32
 800ae56:	af04      	add	r7, sp, #16
 800ae58:	60f8      	str	r0, [r7, #12]
 800ae5a:	60b9      	str	r1, [r7, #8]
 800ae5c:	4611      	mov	r1, r2
 800ae5e:	461a      	mov	r2, r3
 800ae60:	460b      	mov	r3, r1
 800ae62:	80fb      	strh	r3, [r7, #6]
 800ae64:	4613      	mov	r3, r2
 800ae66:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d001      	beq.n	800ae76 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800ae72:	2300      	movs	r3, #0
 800ae74:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ae76:	7979      	ldrb	r1, [r7, #5]
 800ae78:	7e3b      	ldrb	r3, [r7, #24]
 800ae7a:	9303      	str	r3, [sp, #12]
 800ae7c:	88fb      	ldrh	r3, [r7, #6]
 800ae7e:	9302      	str	r3, [sp, #8]
 800ae80:	68bb      	ldr	r3, [r7, #8]
 800ae82:	9301      	str	r3, [sp, #4]
 800ae84:	2301      	movs	r3, #1
 800ae86:	9300      	str	r3, [sp, #0]
 800ae88:	2302      	movs	r3, #2
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	68f8      	ldr	r0, [r7, #12]
 800ae8e:	f000 fade 	bl	800b44e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800ae92:	2300      	movs	r3, #0
}
 800ae94:	4618      	mov	r0, r3
 800ae96:	3710      	adds	r7, #16
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	bd80      	pop	{r7, pc}

0800ae9c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b088      	sub	sp, #32
 800aea0:	af04      	add	r7, sp, #16
 800aea2:	60f8      	str	r0, [r7, #12]
 800aea4:	60b9      	str	r1, [r7, #8]
 800aea6:	4611      	mov	r1, r2
 800aea8:	461a      	mov	r2, r3
 800aeaa:	460b      	mov	r3, r1
 800aeac:	80fb      	strh	r3, [r7, #6]
 800aeae:	4613      	mov	r3, r2
 800aeb0:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800aeb2:	7979      	ldrb	r1, [r7, #5]
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	9303      	str	r3, [sp, #12]
 800aeb8:	88fb      	ldrh	r3, [r7, #6]
 800aeba:	9302      	str	r3, [sp, #8]
 800aebc:	68bb      	ldr	r3, [r7, #8]
 800aebe:	9301      	str	r3, [sp, #4]
 800aec0:	2301      	movs	r3, #1
 800aec2:	9300      	str	r3, [sp, #0]
 800aec4:	2302      	movs	r3, #2
 800aec6:	2201      	movs	r2, #1
 800aec8:	68f8      	ldr	r0, [r7, #12]
 800aeca:	f000 fac0 	bl	800b44e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800aece:	2300      	movs	r3, #0
}
 800aed0:	4618      	mov	r0, r3
 800aed2:	3710      	adds	r7, #16
 800aed4:	46bd      	mov	sp, r7
 800aed6:	bd80      	pop	{r7, pc}

0800aed8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b086      	sub	sp, #24
 800aedc:	af04      	add	r7, sp, #16
 800aede:	6078      	str	r0, [r7, #4]
 800aee0:	4608      	mov	r0, r1
 800aee2:	4611      	mov	r1, r2
 800aee4:	461a      	mov	r2, r3
 800aee6:	4603      	mov	r3, r0
 800aee8:	70fb      	strb	r3, [r7, #3]
 800aeea:	460b      	mov	r3, r1
 800aeec:	70bb      	strb	r3, [r7, #2]
 800aeee:	4613      	mov	r3, r2
 800aef0:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800aef2:	7878      	ldrb	r0, [r7, #1]
 800aef4:	78ba      	ldrb	r2, [r7, #2]
 800aef6:	78f9      	ldrb	r1, [r7, #3]
 800aef8:	8b3b      	ldrh	r3, [r7, #24]
 800aefa:	9302      	str	r3, [sp, #8]
 800aefc:	7d3b      	ldrb	r3, [r7, #20]
 800aefe:	9301      	str	r3, [sp, #4]
 800af00:	7c3b      	ldrb	r3, [r7, #16]
 800af02:	9300      	str	r3, [sp, #0]
 800af04:	4603      	mov	r3, r0
 800af06:	6878      	ldr	r0, [r7, #4]
 800af08:	f000 fa53 	bl	800b3b2 <USBH_LL_OpenPipe>

  return USBH_OK;
 800af0c:	2300      	movs	r3, #0
}
 800af0e:	4618      	mov	r0, r3
 800af10:	3708      	adds	r7, #8
 800af12:	46bd      	mov	sp, r7
 800af14:	bd80      	pop	{r7, pc}

0800af16 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800af16:	b580      	push	{r7, lr}
 800af18:	b082      	sub	sp, #8
 800af1a:	af00      	add	r7, sp, #0
 800af1c:	6078      	str	r0, [r7, #4]
 800af1e:	460b      	mov	r3, r1
 800af20:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800af22:	78fb      	ldrb	r3, [r7, #3]
 800af24:	4619      	mov	r1, r3
 800af26:	6878      	ldr	r0, [r7, #4]
 800af28:	f000 fa72 	bl	800b410 <USBH_LL_ClosePipe>

  return USBH_OK;
 800af2c:	2300      	movs	r3, #0
}
 800af2e:	4618      	mov	r0, r3
 800af30:	3708      	adds	r7, #8
 800af32:	46bd      	mov	sp, r7
 800af34:	bd80      	pop	{r7, pc}

0800af36 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800af36:	b580      	push	{r7, lr}
 800af38:	b084      	sub	sp, #16
 800af3a:	af00      	add	r7, sp, #0
 800af3c:	6078      	str	r0, [r7, #4]
 800af3e:	460b      	mov	r3, r1
 800af40:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800af42:	6878      	ldr	r0, [r7, #4]
 800af44:	f000 f836 	bl	800afb4 <USBH_GetFreePipe>
 800af48:	4603      	mov	r3, r0
 800af4a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800af4c:	89fb      	ldrh	r3, [r7, #14]
 800af4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800af52:	4293      	cmp	r3, r2
 800af54:	d00a      	beq.n	800af6c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800af56:	78fa      	ldrb	r2, [r7, #3]
 800af58:	89fb      	ldrh	r3, [r7, #14]
 800af5a:	f003 030f 	and.w	r3, r3, #15
 800af5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800af62:	6879      	ldr	r1, [r7, #4]
 800af64:	33e0      	adds	r3, #224	; 0xe0
 800af66:	009b      	lsls	r3, r3, #2
 800af68:	440b      	add	r3, r1
 800af6a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800af6c:	89fb      	ldrh	r3, [r7, #14]
 800af6e:	b2db      	uxtb	r3, r3
}
 800af70:	4618      	mov	r0, r3
 800af72:	3710      	adds	r7, #16
 800af74:	46bd      	mov	sp, r7
 800af76:	bd80      	pop	{r7, pc}

0800af78 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800af78:	b480      	push	{r7}
 800af7a:	b083      	sub	sp, #12
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	6078      	str	r0, [r7, #4]
 800af80:	460b      	mov	r3, r1
 800af82:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800af84:	78fb      	ldrb	r3, [r7, #3]
 800af86:	2b0f      	cmp	r3, #15
 800af88:	d80d      	bhi.n	800afa6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800af8a:	78fb      	ldrb	r3, [r7, #3]
 800af8c:	687a      	ldr	r2, [r7, #4]
 800af8e:	33e0      	adds	r3, #224	; 0xe0
 800af90:	009b      	lsls	r3, r3, #2
 800af92:	4413      	add	r3, r2
 800af94:	685a      	ldr	r2, [r3, #4]
 800af96:	78fb      	ldrb	r3, [r7, #3]
 800af98:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800af9c:	6879      	ldr	r1, [r7, #4]
 800af9e:	33e0      	adds	r3, #224	; 0xe0
 800afa0:	009b      	lsls	r3, r3, #2
 800afa2:	440b      	add	r3, r1
 800afa4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800afa6:	2300      	movs	r3, #0
}
 800afa8:	4618      	mov	r0, r3
 800afaa:	370c      	adds	r7, #12
 800afac:	46bd      	mov	sp, r7
 800afae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb2:	4770      	bx	lr

0800afb4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800afb4:	b480      	push	{r7}
 800afb6:	b085      	sub	sp, #20
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800afbc:	2300      	movs	r3, #0
 800afbe:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800afc0:	2300      	movs	r3, #0
 800afc2:	73fb      	strb	r3, [r7, #15]
 800afc4:	e00f      	b.n	800afe6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800afc6:	7bfb      	ldrb	r3, [r7, #15]
 800afc8:	687a      	ldr	r2, [r7, #4]
 800afca:	33e0      	adds	r3, #224	; 0xe0
 800afcc:	009b      	lsls	r3, r3, #2
 800afce:	4413      	add	r3, r2
 800afd0:	685b      	ldr	r3, [r3, #4]
 800afd2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d102      	bne.n	800afe0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800afda:	7bfb      	ldrb	r3, [r7, #15]
 800afdc:	b29b      	uxth	r3, r3
 800afde:	e007      	b.n	800aff0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800afe0:	7bfb      	ldrb	r3, [r7, #15]
 800afe2:	3301      	adds	r3, #1
 800afe4:	73fb      	strb	r3, [r7, #15]
 800afe6:	7bfb      	ldrb	r3, [r7, #15]
 800afe8:	2b0f      	cmp	r3, #15
 800afea:	d9ec      	bls.n	800afc6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800afec:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800aff0:	4618      	mov	r0, r3
 800aff2:	3714      	adds	r7, #20
 800aff4:	46bd      	mov	sp, r7
 800aff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affa:	4770      	bx	lr

0800affc <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800affc:	b580      	push	{r7, lr}
 800affe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800b000:	2201      	movs	r2, #1
 800b002:	490e      	ldr	r1, [pc, #56]	; (800b03c <MX_USB_HOST_Init+0x40>)
 800b004:	480e      	ldr	r0, [pc, #56]	; (800b040 <MX_USB_HOST_Init+0x44>)
 800b006:	f7fe fba7 	bl	8009758 <USBH_Init>
 800b00a:	4603      	mov	r3, r0
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d001      	beq.n	800b014 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800b010:	f7f6 f974 	bl	80012fc <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800b014:	490b      	ldr	r1, [pc, #44]	; (800b044 <MX_USB_HOST_Init+0x48>)
 800b016:	480a      	ldr	r0, [pc, #40]	; (800b040 <MX_USB_HOST_Init+0x44>)
 800b018:	f7fe fc2c 	bl	8009874 <USBH_RegisterClass>
 800b01c:	4603      	mov	r3, r0
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d001      	beq.n	800b026 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800b022:	f7f6 f96b 	bl	80012fc <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800b026:	4806      	ldr	r0, [pc, #24]	; (800b040 <MX_USB_HOST_Init+0x44>)
 800b028:	f7fe fcb0 	bl	800998c <USBH_Start>
 800b02c:	4603      	mov	r3, r0
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d001      	beq.n	800b036 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800b032:	f7f6 f963 	bl	80012fc <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800b036:	bf00      	nop
 800b038:	bd80      	pop	{r7, pc}
 800b03a:	bf00      	nop
 800b03c:	0800b05d 	.word	0x0800b05d
 800b040:	2000065c 	.word	0x2000065c
 800b044:	20000310 	.word	0x20000310

0800b048 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800b048:	b580      	push	{r7, lr}
 800b04a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800b04c:	4802      	ldr	r0, [pc, #8]	; (800b058 <MX_USB_HOST_Process+0x10>)
 800b04e:	f7fe fcad 	bl	80099ac <USBH_Process>
}
 800b052:	bf00      	nop
 800b054:	bd80      	pop	{r7, pc}
 800b056:	bf00      	nop
 800b058:	2000065c 	.word	0x2000065c

0800b05c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800b05c:	b480      	push	{r7}
 800b05e:	b083      	sub	sp, #12
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
 800b064:	460b      	mov	r3, r1
 800b066:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800b068:	78fb      	ldrb	r3, [r7, #3]
 800b06a:	3b01      	subs	r3, #1
 800b06c:	2b04      	cmp	r3, #4
 800b06e:	d819      	bhi.n	800b0a4 <USBH_UserProcess+0x48>
 800b070:	a201      	add	r2, pc, #4	; (adr r2, 800b078 <USBH_UserProcess+0x1c>)
 800b072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b076:	bf00      	nop
 800b078:	0800b0a5 	.word	0x0800b0a5
 800b07c:	0800b095 	.word	0x0800b095
 800b080:	0800b0a5 	.word	0x0800b0a5
 800b084:	0800b09d 	.word	0x0800b09d
 800b088:	0800b08d 	.word	0x0800b08d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800b08c:	4b09      	ldr	r3, [pc, #36]	; (800b0b4 <USBH_UserProcess+0x58>)
 800b08e:	2203      	movs	r2, #3
 800b090:	701a      	strb	r2, [r3, #0]
  break;
 800b092:	e008      	b.n	800b0a6 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800b094:	4b07      	ldr	r3, [pc, #28]	; (800b0b4 <USBH_UserProcess+0x58>)
 800b096:	2202      	movs	r2, #2
 800b098:	701a      	strb	r2, [r3, #0]
  break;
 800b09a:	e004      	b.n	800b0a6 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800b09c:	4b05      	ldr	r3, [pc, #20]	; (800b0b4 <USBH_UserProcess+0x58>)
 800b09e:	2201      	movs	r2, #1
 800b0a0:	701a      	strb	r2, [r3, #0]
  break;
 800b0a2:	e000      	b.n	800b0a6 <USBH_UserProcess+0x4a>

  default:
  break;
 800b0a4:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800b0a6:	bf00      	nop
 800b0a8:	370c      	adds	r7, #12
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b0:	4770      	bx	lr
 800b0b2:	bf00      	nop
 800b0b4:	20000a34 	.word	0x20000a34

0800b0b8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b08a      	sub	sp, #40	; 0x28
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b0c0:	f107 0314 	add.w	r3, r7, #20
 800b0c4:	2200      	movs	r2, #0
 800b0c6:	601a      	str	r2, [r3, #0]
 800b0c8:	605a      	str	r2, [r3, #4]
 800b0ca:	609a      	str	r2, [r3, #8]
 800b0cc:	60da      	str	r2, [r3, #12]
 800b0ce:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b0d8:	d147      	bne.n	800b16a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b0da:	2300      	movs	r3, #0
 800b0dc:	613b      	str	r3, [r7, #16]
 800b0de:	4b25      	ldr	r3, [pc, #148]	; (800b174 <HAL_HCD_MspInit+0xbc>)
 800b0e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0e2:	4a24      	ldr	r2, [pc, #144]	; (800b174 <HAL_HCD_MspInit+0xbc>)
 800b0e4:	f043 0301 	orr.w	r3, r3, #1
 800b0e8:	6313      	str	r3, [r2, #48]	; 0x30
 800b0ea:	4b22      	ldr	r3, [pc, #136]	; (800b174 <HAL_HCD_MspInit+0xbc>)
 800b0ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0ee:	f003 0301 	and.w	r3, r3, #1
 800b0f2:	613b      	str	r3, [r7, #16]
 800b0f4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800b0f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b0fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b100:	2300      	movs	r3, #0
 800b102:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800b104:	f107 0314 	add.w	r3, r7, #20
 800b108:	4619      	mov	r1, r3
 800b10a:	481b      	ldr	r0, [pc, #108]	; (800b178 <HAL_HCD_MspInit+0xc0>)
 800b10c:	f7f6 fcca 	bl	8001aa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800b110:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800b114:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b116:	2302      	movs	r3, #2
 800b118:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b11a:	2300      	movs	r3, #0
 800b11c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b11e:	2300      	movs	r3, #0
 800b120:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b122:	230a      	movs	r3, #10
 800b124:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b126:	f107 0314 	add.w	r3, r7, #20
 800b12a:	4619      	mov	r1, r3
 800b12c:	4812      	ldr	r0, [pc, #72]	; (800b178 <HAL_HCD_MspInit+0xc0>)
 800b12e:	f7f6 fcb9 	bl	8001aa4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b132:	4b10      	ldr	r3, [pc, #64]	; (800b174 <HAL_HCD_MspInit+0xbc>)
 800b134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b136:	4a0f      	ldr	r2, [pc, #60]	; (800b174 <HAL_HCD_MspInit+0xbc>)
 800b138:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b13c:	6353      	str	r3, [r2, #52]	; 0x34
 800b13e:	2300      	movs	r3, #0
 800b140:	60fb      	str	r3, [r7, #12]
 800b142:	4b0c      	ldr	r3, [pc, #48]	; (800b174 <HAL_HCD_MspInit+0xbc>)
 800b144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b146:	4a0b      	ldr	r2, [pc, #44]	; (800b174 <HAL_HCD_MspInit+0xbc>)
 800b148:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b14c:	6453      	str	r3, [r2, #68]	; 0x44
 800b14e:	4b09      	ldr	r3, [pc, #36]	; (800b174 <HAL_HCD_MspInit+0xbc>)
 800b150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b152:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b156:	60fb      	str	r3, [r7, #12]
 800b158:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b15a:	2200      	movs	r2, #0
 800b15c:	2100      	movs	r1, #0
 800b15e:	2043      	movs	r0, #67	; 0x43
 800b160:	f7f6 fc69 	bl	8001a36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b164:	2043      	movs	r0, #67	; 0x43
 800b166:	f7f6 fc82 	bl	8001a6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b16a:	bf00      	nop
 800b16c:	3728      	adds	r7, #40	; 0x28
 800b16e:	46bd      	mov	sp, r7
 800b170:	bd80      	pop	{r7, pc}
 800b172:	bf00      	nop
 800b174:	40023800 	.word	0x40023800
 800b178:	40020000 	.word	0x40020000

0800b17c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800b17c:	b580      	push	{r7, lr}
 800b17e:	b082      	sub	sp, #8
 800b180:	af00      	add	r7, sp, #0
 800b182:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b18a:	4618      	mov	r0, r3
 800b18c:	f7fe ffed 	bl	800a16a <USBH_LL_IncTimer>
}
 800b190:	bf00      	nop
 800b192:	3708      	adds	r7, #8
 800b194:	46bd      	mov	sp, r7
 800b196:	bd80      	pop	{r7, pc}

0800b198 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	b082      	sub	sp, #8
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	f7ff f825 	bl	800a1f6 <USBH_LL_Connect>
}
 800b1ac:	bf00      	nop
 800b1ae:	3708      	adds	r7, #8
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	bd80      	pop	{r7, pc}

0800b1b4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b082      	sub	sp, #8
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	f7ff f82e 	bl	800a224 <USBH_LL_Disconnect>
}
 800b1c8:	bf00      	nop
 800b1ca:	3708      	adds	r7, #8
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	bd80      	pop	{r7, pc}

0800b1d0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800b1d0:	b480      	push	{r7}
 800b1d2:	b083      	sub	sp, #12
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
 800b1d8:	460b      	mov	r3, r1
 800b1da:	70fb      	strb	r3, [r7, #3]
 800b1dc:	4613      	mov	r3, r2
 800b1de:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800b1e0:	bf00      	nop
 800b1e2:	370c      	adds	r7, #12
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ea:	4770      	bx	lr

0800b1ec <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b1ec:	b580      	push	{r7, lr}
 800b1ee:	b082      	sub	sp, #8
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	f7fe ffdf 	bl	800a1be <USBH_LL_PortEnabled>
}
 800b200:	bf00      	nop
 800b202:	3708      	adds	r7, #8
 800b204:	46bd      	mov	sp, r7
 800b206:	bd80      	pop	{r7, pc}

0800b208 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	b082      	sub	sp, #8
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b216:	4618      	mov	r0, r3
 800b218:	f7fe ffdf 	bl	800a1da <USBH_LL_PortDisabled>
}
 800b21c:	bf00      	nop
 800b21e:	3708      	adds	r7, #8
 800b220:	46bd      	mov	sp, r7
 800b222:	bd80      	pop	{r7, pc}

0800b224 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800b224:	b580      	push	{r7, lr}
 800b226:	b082      	sub	sp, #8
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b232:	2b01      	cmp	r3, #1
 800b234:	d12a      	bne.n	800b28c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800b236:	4a18      	ldr	r2, [pc, #96]	; (800b298 <USBH_LL_Init+0x74>)
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	4a15      	ldr	r2, [pc, #84]	; (800b298 <USBH_LL_Init+0x74>)
 800b242:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b246:	4b14      	ldr	r3, [pc, #80]	; (800b298 <USBH_LL_Init+0x74>)
 800b248:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b24c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800b24e:	4b12      	ldr	r3, [pc, #72]	; (800b298 <USBH_LL_Init+0x74>)
 800b250:	2208      	movs	r2, #8
 800b252:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800b254:	4b10      	ldr	r3, [pc, #64]	; (800b298 <USBH_LL_Init+0x74>)
 800b256:	2201      	movs	r2, #1
 800b258:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b25a:	4b0f      	ldr	r3, [pc, #60]	; (800b298 <USBH_LL_Init+0x74>)
 800b25c:	2200      	movs	r2, #0
 800b25e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800b260:	4b0d      	ldr	r3, [pc, #52]	; (800b298 <USBH_LL_Init+0x74>)
 800b262:	2202      	movs	r2, #2
 800b264:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b266:	4b0c      	ldr	r3, [pc, #48]	; (800b298 <USBH_LL_Init+0x74>)
 800b268:	2200      	movs	r2, #0
 800b26a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800b26c:	480a      	ldr	r0, [pc, #40]	; (800b298 <USBH_LL_Init+0x74>)
 800b26e:	f7f6 fdce 	bl	8001e0e <HAL_HCD_Init>
 800b272:	4603      	mov	r3, r0
 800b274:	2b00      	cmp	r3, #0
 800b276:	d001      	beq.n	800b27c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800b278:	f7f6 f840 	bl	80012fc <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800b27c:	4806      	ldr	r0, [pc, #24]	; (800b298 <USBH_LL_Init+0x74>)
 800b27e:	f7f7 f9b2 	bl	80025e6 <HAL_HCD_GetCurrentFrame>
 800b282:	4603      	mov	r3, r0
 800b284:	4619      	mov	r1, r3
 800b286:	6878      	ldr	r0, [r7, #4]
 800b288:	f7fe ff60 	bl	800a14c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800b28c:	2300      	movs	r3, #0
}
 800b28e:	4618      	mov	r0, r3
 800b290:	3708      	adds	r7, #8
 800b292:	46bd      	mov	sp, r7
 800b294:	bd80      	pop	{r7, pc}
 800b296:	bf00      	nop
 800b298:	20000a38 	.word	0x20000a38

0800b29c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800b29c:	b580      	push	{r7, lr}
 800b29e:	b084      	sub	sp, #16
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	f7f7 f921 	bl	80024fa <HAL_HCD_Start>
 800b2b8:	4603      	mov	r3, r0
 800b2ba:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b2bc:	7bfb      	ldrb	r3, [r7, #15]
 800b2be:	4618      	mov	r0, r3
 800b2c0:	f000 f95c 	bl	800b57c <USBH_Get_USB_Status>
 800b2c4:	4603      	mov	r3, r0
 800b2c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b2c8:	7bbb      	ldrb	r3, [r7, #14]
}
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	3710      	adds	r7, #16
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	bd80      	pop	{r7, pc}

0800b2d2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800b2d2:	b580      	push	{r7, lr}
 800b2d4:	b084      	sub	sp, #16
 800b2d6:	af00      	add	r7, sp, #0
 800b2d8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b2da:	2300      	movs	r3, #0
 800b2dc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b2de:	2300      	movs	r3, #0
 800b2e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	f7f7 f929 	bl	8002540 <HAL_HCD_Stop>
 800b2ee:	4603      	mov	r3, r0
 800b2f0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b2f2:	7bfb      	ldrb	r3, [r7, #15]
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	f000 f941 	bl	800b57c <USBH_Get_USB_Status>
 800b2fa:	4603      	mov	r3, r0
 800b2fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b2fe:	7bbb      	ldrb	r3, [r7, #14]
}
 800b300:	4618      	mov	r0, r3
 800b302:	3710      	adds	r7, #16
 800b304:	46bd      	mov	sp, r7
 800b306:	bd80      	pop	{r7, pc}

0800b308 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800b308:	b580      	push	{r7, lr}
 800b30a:	b084      	sub	sp, #16
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800b310:	2301      	movs	r3, #1
 800b312:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b31a:	4618      	mov	r0, r3
 800b31c:	f7f7 f971 	bl	8002602 <HAL_HCD_GetCurrentSpeed>
 800b320:	4603      	mov	r3, r0
 800b322:	2b02      	cmp	r3, #2
 800b324:	d00c      	beq.n	800b340 <USBH_LL_GetSpeed+0x38>
 800b326:	2b02      	cmp	r3, #2
 800b328:	d80d      	bhi.n	800b346 <USBH_LL_GetSpeed+0x3e>
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d002      	beq.n	800b334 <USBH_LL_GetSpeed+0x2c>
 800b32e:	2b01      	cmp	r3, #1
 800b330:	d003      	beq.n	800b33a <USBH_LL_GetSpeed+0x32>
 800b332:	e008      	b.n	800b346 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800b334:	2300      	movs	r3, #0
 800b336:	73fb      	strb	r3, [r7, #15]
    break;
 800b338:	e008      	b.n	800b34c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800b33a:	2301      	movs	r3, #1
 800b33c:	73fb      	strb	r3, [r7, #15]
    break;
 800b33e:	e005      	b.n	800b34c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800b340:	2302      	movs	r3, #2
 800b342:	73fb      	strb	r3, [r7, #15]
    break;
 800b344:	e002      	b.n	800b34c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800b346:	2301      	movs	r3, #1
 800b348:	73fb      	strb	r3, [r7, #15]
    break;
 800b34a:	bf00      	nop
  }
  return  speed;
 800b34c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b34e:	4618      	mov	r0, r3
 800b350:	3710      	adds	r7, #16
 800b352:	46bd      	mov	sp, r7
 800b354:	bd80      	pop	{r7, pc}

0800b356 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800b356:	b580      	push	{r7, lr}
 800b358:	b084      	sub	sp, #16
 800b35a:	af00      	add	r7, sp, #0
 800b35c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b35e:	2300      	movs	r3, #0
 800b360:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b362:	2300      	movs	r3, #0
 800b364:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b36c:	4618      	mov	r0, r3
 800b36e:	f7f7 f904 	bl	800257a <HAL_HCD_ResetPort>
 800b372:	4603      	mov	r3, r0
 800b374:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b376:	7bfb      	ldrb	r3, [r7, #15]
 800b378:	4618      	mov	r0, r3
 800b37a:	f000 f8ff 	bl	800b57c <USBH_Get_USB_Status>
 800b37e:	4603      	mov	r3, r0
 800b380:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b382:	7bbb      	ldrb	r3, [r7, #14]
}
 800b384:	4618      	mov	r0, r3
 800b386:	3710      	adds	r7, #16
 800b388:	46bd      	mov	sp, r7
 800b38a:	bd80      	pop	{r7, pc}

0800b38c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b082      	sub	sp, #8
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
 800b394:	460b      	mov	r3, r1
 800b396:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b39e:	78fa      	ldrb	r2, [r7, #3]
 800b3a0:	4611      	mov	r1, r2
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	f7f7 f90b 	bl	80025be <HAL_HCD_HC_GetXferCount>
 800b3a8:	4603      	mov	r3, r0
}
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	3708      	adds	r7, #8
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	bd80      	pop	{r7, pc}

0800b3b2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b3b2:	b590      	push	{r4, r7, lr}
 800b3b4:	b089      	sub	sp, #36	; 0x24
 800b3b6:	af04      	add	r7, sp, #16
 800b3b8:	6078      	str	r0, [r7, #4]
 800b3ba:	4608      	mov	r0, r1
 800b3bc:	4611      	mov	r1, r2
 800b3be:	461a      	mov	r2, r3
 800b3c0:	4603      	mov	r3, r0
 800b3c2:	70fb      	strb	r3, [r7, #3]
 800b3c4:	460b      	mov	r3, r1
 800b3c6:	70bb      	strb	r3, [r7, #2]
 800b3c8:	4613      	mov	r3, r2
 800b3ca:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b3da:	787c      	ldrb	r4, [r7, #1]
 800b3dc:	78ba      	ldrb	r2, [r7, #2]
 800b3de:	78f9      	ldrb	r1, [r7, #3]
 800b3e0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b3e2:	9302      	str	r3, [sp, #8]
 800b3e4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b3e8:	9301      	str	r3, [sp, #4]
 800b3ea:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b3ee:	9300      	str	r3, [sp, #0]
 800b3f0:	4623      	mov	r3, r4
 800b3f2:	f7f6 fd6e 	bl	8001ed2 <HAL_HCD_HC_Init>
 800b3f6:	4603      	mov	r3, r0
 800b3f8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800b3fa:	7bfb      	ldrb	r3, [r7, #15]
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	f000 f8bd 	bl	800b57c <USBH_Get_USB_Status>
 800b402:	4603      	mov	r3, r0
 800b404:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b406:	7bbb      	ldrb	r3, [r7, #14]
}
 800b408:	4618      	mov	r0, r3
 800b40a:	3714      	adds	r7, #20
 800b40c:	46bd      	mov	sp, r7
 800b40e:	bd90      	pop	{r4, r7, pc}

0800b410 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b410:	b580      	push	{r7, lr}
 800b412:	b084      	sub	sp, #16
 800b414:	af00      	add	r7, sp, #0
 800b416:	6078      	str	r0, [r7, #4]
 800b418:	460b      	mov	r3, r1
 800b41a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b41c:	2300      	movs	r3, #0
 800b41e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b420:	2300      	movs	r3, #0
 800b422:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b42a:	78fa      	ldrb	r2, [r7, #3]
 800b42c:	4611      	mov	r1, r2
 800b42e:	4618      	mov	r0, r3
 800b430:	f7f6 fdde 	bl	8001ff0 <HAL_HCD_HC_Halt>
 800b434:	4603      	mov	r3, r0
 800b436:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b438:	7bfb      	ldrb	r3, [r7, #15]
 800b43a:	4618      	mov	r0, r3
 800b43c:	f000 f89e 	bl	800b57c <USBH_Get_USB_Status>
 800b440:	4603      	mov	r3, r0
 800b442:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b444:	7bbb      	ldrb	r3, [r7, #14]
}
 800b446:	4618      	mov	r0, r3
 800b448:	3710      	adds	r7, #16
 800b44a:	46bd      	mov	sp, r7
 800b44c:	bd80      	pop	{r7, pc}

0800b44e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800b44e:	b590      	push	{r4, r7, lr}
 800b450:	b089      	sub	sp, #36	; 0x24
 800b452:	af04      	add	r7, sp, #16
 800b454:	6078      	str	r0, [r7, #4]
 800b456:	4608      	mov	r0, r1
 800b458:	4611      	mov	r1, r2
 800b45a:	461a      	mov	r2, r3
 800b45c:	4603      	mov	r3, r0
 800b45e:	70fb      	strb	r3, [r7, #3]
 800b460:	460b      	mov	r3, r1
 800b462:	70bb      	strb	r3, [r7, #2]
 800b464:	4613      	mov	r3, r2
 800b466:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b468:	2300      	movs	r3, #0
 800b46a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b46c:	2300      	movs	r3, #0
 800b46e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b476:	787c      	ldrb	r4, [r7, #1]
 800b478:	78ba      	ldrb	r2, [r7, #2]
 800b47a:	78f9      	ldrb	r1, [r7, #3]
 800b47c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b480:	9303      	str	r3, [sp, #12]
 800b482:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b484:	9302      	str	r3, [sp, #8]
 800b486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b488:	9301      	str	r3, [sp, #4]
 800b48a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b48e:	9300      	str	r3, [sp, #0]
 800b490:	4623      	mov	r3, r4
 800b492:	f7f6 fdd1 	bl	8002038 <HAL_HCD_HC_SubmitRequest>
 800b496:	4603      	mov	r3, r0
 800b498:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800b49a:	7bfb      	ldrb	r3, [r7, #15]
 800b49c:	4618      	mov	r0, r3
 800b49e:	f000 f86d 	bl	800b57c <USBH_Get_USB_Status>
 800b4a2:	4603      	mov	r3, r0
 800b4a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b4a6:	7bbb      	ldrb	r3, [r7, #14]
}
 800b4a8:	4618      	mov	r0, r3
 800b4aa:	3714      	adds	r7, #20
 800b4ac:	46bd      	mov	sp, r7
 800b4ae:	bd90      	pop	{r4, r7, pc}

0800b4b0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	b082      	sub	sp, #8
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	6078      	str	r0, [r7, #4]
 800b4b8:	460b      	mov	r3, r1
 800b4ba:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b4c2:	78fa      	ldrb	r2, [r7, #3]
 800b4c4:	4611      	mov	r1, r2
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	f7f7 f865 	bl	8002596 <HAL_HCD_HC_GetURBState>
 800b4cc:	4603      	mov	r3, r0
}
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	3708      	adds	r7, #8
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	bd80      	pop	{r7, pc}

0800b4d6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800b4d6:	b580      	push	{r7, lr}
 800b4d8:	b082      	sub	sp, #8
 800b4da:	af00      	add	r7, sp, #0
 800b4dc:	6078      	str	r0, [r7, #4]
 800b4de:	460b      	mov	r3, r1
 800b4e0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b4e8:	2b01      	cmp	r3, #1
 800b4ea:	d103      	bne.n	800b4f4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800b4ec:	78fb      	ldrb	r3, [r7, #3]
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	f000 f870 	bl	800b5d4 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800b4f4:	20c8      	movs	r0, #200	; 0xc8
 800b4f6:	f7f6 f99f 	bl	8001838 <HAL_Delay>
  return USBH_OK;
 800b4fa:	2300      	movs	r3, #0
}
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	3708      	adds	r7, #8
 800b500:	46bd      	mov	sp, r7
 800b502:	bd80      	pop	{r7, pc}

0800b504 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800b504:	b480      	push	{r7}
 800b506:	b085      	sub	sp, #20
 800b508:	af00      	add	r7, sp, #0
 800b50a:	6078      	str	r0, [r7, #4]
 800b50c:	460b      	mov	r3, r1
 800b50e:	70fb      	strb	r3, [r7, #3]
 800b510:	4613      	mov	r3, r2
 800b512:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b51a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800b51c:	78fb      	ldrb	r3, [r7, #3]
 800b51e:	68fa      	ldr	r2, [r7, #12]
 800b520:	212c      	movs	r1, #44	; 0x2c
 800b522:	fb01 f303 	mul.w	r3, r1, r3
 800b526:	4413      	add	r3, r2
 800b528:	333b      	adds	r3, #59	; 0x3b
 800b52a:	781b      	ldrb	r3, [r3, #0]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d009      	beq.n	800b544 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800b530:	78fb      	ldrb	r3, [r7, #3]
 800b532:	68fa      	ldr	r2, [r7, #12]
 800b534:	212c      	movs	r1, #44	; 0x2c
 800b536:	fb01 f303 	mul.w	r3, r1, r3
 800b53a:	4413      	add	r3, r2
 800b53c:	3354      	adds	r3, #84	; 0x54
 800b53e:	78ba      	ldrb	r2, [r7, #2]
 800b540:	701a      	strb	r2, [r3, #0]
 800b542:	e008      	b.n	800b556 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800b544:	78fb      	ldrb	r3, [r7, #3]
 800b546:	68fa      	ldr	r2, [r7, #12]
 800b548:	212c      	movs	r1, #44	; 0x2c
 800b54a:	fb01 f303 	mul.w	r3, r1, r3
 800b54e:	4413      	add	r3, r2
 800b550:	3355      	adds	r3, #85	; 0x55
 800b552:	78ba      	ldrb	r2, [r7, #2]
 800b554:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800b556:	2300      	movs	r3, #0
}
 800b558:	4618      	mov	r0, r3
 800b55a:	3714      	adds	r7, #20
 800b55c:	46bd      	mov	sp, r7
 800b55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b562:	4770      	bx	lr

0800b564 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800b564:	b580      	push	{r7, lr}
 800b566:	b082      	sub	sp, #8
 800b568:	af00      	add	r7, sp, #0
 800b56a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800b56c:	6878      	ldr	r0, [r7, #4]
 800b56e:	f7f6 f963 	bl	8001838 <HAL_Delay>
}
 800b572:	bf00      	nop
 800b574:	3708      	adds	r7, #8
 800b576:	46bd      	mov	sp, r7
 800b578:	bd80      	pop	{r7, pc}
	...

0800b57c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b57c:	b480      	push	{r7}
 800b57e:	b085      	sub	sp, #20
 800b580:	af00      	add	r7, sp, #0
 800b582:	4603      	mov	r3, r0
 800b584:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b586:	2300      	movs	r3, #0
 800b588:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b58a:	79fb      	ldrb	r3, [r7, #7]
 800b58c:	2b03      	cmp	r3, #3
 800b58e:	d817      	bhi.n	800b5c0 <USBH_Get_USB_Status+0x44>
 800b590:	a201      	add	r2, pc, #4	; (adr r2, 800b598 <USBH_Get_USB_Status+0x1c>)
 800b592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b596:	bf00      	nop
 800b598:	0800b5a9 	.word	0x0800b5a9
 800b59c:	0800b5af 	.word	0x0800b5af
 800b5a0:	0800b5b5 	.word	0x0800b5b5
 800b5a4:	0800b5bb 	.word	0x0800b5bb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	73fb      	strb	r3, [r7, #15]
    break;
 800b5ac:	e00b      	b.n	800b5c6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800b5ae:	2302      	movs	r3, #2
 800b5b0:	73fb      	strb	r3, [r7, #15]
    break;
 800b5b2:	e008      	b.n	800b5c6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800b5b4:	2301      	movs	r3, #1
 800b5b6:	73fb      	strb	r3, [r7, #15]
    break;
 800b5b8:	e005      	b.n	800b5c6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800b5ba:	2302      	movs	r3, #2
 800b5bc:	73fb      	strb	r3, [r7, #15]
    break;
 800b5be:	e002      	b.n	800b5c6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800b5c0:	2302      	movs	r3, #2
 800b5c2:	73fb      	strb	r3, [r7, #15]
    break;
 800b5c4:	bf00      	nop
  }
  return usb_status;
 800b5c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	3714      	adds	r7, #20
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d2:	4770      	bx	lr

0800b5d4 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b084      	sub	sp, #16
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	4603      	mov	r3, r0
 800b5dc:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800b5de:	79fb      	ldrb	r3, [r7, #7]
 800b5e0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800b5e2:	79fb      	ldrb	r3, [r7, #7]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d102      	bne.n	800b5ee <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	73fb      	strb	r3, [r7, #15]
 800b5ec:	e001      	b.n	800b5f2 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800b5ee:	2301      	movs	r3, #1
 800b5f0:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800b5f2:	7bfb      	ldrb	r3, [r7, #15]
 800b5f4:	461a      	mov	r2, r3
 800b5f6:	2101      	movs	r1, #1
 800b5f8:	4803      	ldr	r0, [pc, #12]	; (800b608 <MX_DriverVbusFS+0x34>)
 800b5fa:	f7f6 fbef 	bl	8001ddc <HAL_GPIO_WritePin>
}
 800b5fe:	bf00      	nop
 800b600:	3710      	adds	r7, #16
 800b602:	46bd      	mov	sp, r7
 800b604:	bd80      	pop	{r7, pc}
 800b606:	bf00      	nop
 800b608:	40020800 	.word	0x40020800

0800b60c <calloc>:
 800b60c:	4b02      	ldr	r3, [pc, #8]	; (800b618 <calloc+0xc>)
 800b60e:	460a      	mov	r2, r1
 800b610:	4601      	mov	r1, r0
 800b612:	6818      	ldr	r0, [r3, #0]
 800b614:	f000 b852 	b.w	800b6bc <_calloc_r>
 800b618:	20000330 	.word	0x20000330

0800b61c <__errno>:
 800b61c:	4b01      	ldr	r3, [pc, #4]	; (800b624 <__errno+0x8>)
 800b61e:	6818      	ldr	r0, [r3, #0]
 800b620:	4770      	bx	lr
 800b622:	bf00      	nop
 800b624:	20000330 	.word	0x20000330

0800b628 <__libc_init_array>:
 800b628:	b570      	push	{r4, r5, r6, lr}
 800b62a:	4d0d      	ldr	r5, [pc, #52]	; (800b660 <__libc_init_array+0x38>)
 800b62c:	4c0d      	ldr	r4, [pc, #52]	; (800b664 <__libc_init_array+0x3c>)
 800b62e:	1b64      	subs	r4, r4, r5
 800b630:	10a4      	asrs	r4, r4, #2
 800b632:	2600      	movs	r6, #0
 800b634:	42a6      	cmp	r6, r4
 800b636:	d109      	bne.n	800b64c <__libc_init_array+0x24>
 800b638:	4d0b      	ldr	r5, [pc, #44]	; (800b668 <__libc_init_array+0x40>)
 800b63a:	4c0c      	ldr	r4, [pc, #48]	; (800b66c <__libc_init_array+0x44>)
 800b63c:	f000 fb5a 	bl	800bcf4 <_init>
 800b640:	1b64      	subs	r4, r4, r5
 800b642:	10a4      	asrs	r4, r4, #2
 800b644:	2600      	movs	r6, #0
 800b646:	42a6      	cmp	r6, r4
 800b648:	d105      	bne.n	800b656 <__libc_init_array+0x2e>
 800b64a:	bd70      	pop	{r4, r5, r6, pc}
 800b64c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b650:	4798      	blx	r3
 800b652:	3601      	adds	r6, #1
 800b654:	e7ee      	b.n	800b634 <__libc_init_array+0xc>
 800b656:	f855 3b04 	ldr.w	r3, [r5], #4
 800b65a:	4798      	blx	r3
 800b65c:	3601      	adds	r6, #1
 800b65e:	e7f2      	b.n	800b646 <__libc_init_array+0x1e>
 800b660:	0800bd88 	.word	0x0800bd88
 800b664:	0800bd88 	.word	0x0800bd88
 800b668:	0800bd88 	.word	0x0800bd88
 800b66c:	0800bd8c 	.word	0x0800bd8c

0800b670 <malloc>:
 800b670:	4b02      	ldr	r3, [pc, #8]	; (800b67c <malloc+0xc>)
 800b672:	4601      	mov	r1, r0
 800b674:	6818      	ldr	r0, [r3, #0]
 800b676:	f000 b8a3 	b.w	800b7c0 <_malloc_r>
 800b67a:	bf00      	nop
 800b67c:	20000330 	.word	0x20000330

0800b680 <free>:
 800b680:	4b02      	ldr	r3, [pc, #8]	; (800b68c <free+0xc>)
 800b682:	4601      	mov	r1, r0
 800b684:	6818      	ldr	r0, [r3, #0]
 800b686:	f000 b82f 	b.w	800b6e8 <_free_r>
 800b68a:	bf00      	nop
 800b68c:	20000330 	.word	0x20000330

0800b690 <memcpy>:
 800b690:	440a      	add	r2, r1
 800b692:	4291      	cmp	r1, r2
 800b694:	f100 33ff 	add.w	r3, r0, #4294967295
 800b698:	d100      	bne.n	800b69c <memcpy+0xc>
 800b69a:	4770      	bx	lr
 800b69c:	b510      	push	{r4, lr}
 800b69e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b6a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b6a6:	4291      	cmp	r1, r2
 800b6a8:	d1f9      	bne.n	800b69e <memcpy+0xe>
 800b6aa:	bd10      	pop	{r4, pc}

0800b6ac <memset>:
 800b6ac:	4402      	add	r2, r0
 800b6ae:	4603      	mov	r3, r0
 800b6b0:	4293      	cmp	r3, r2
 800b6b2:	d100      	bne.n	800b6b6 <memset+0xa>
 800b6b4:	4770      	bx	lr
 800b6b6:	f803 1b01 	strb.w	r1, [r3], #1
 800b6ba:	e7f9      	b.n	800b6b0 <memset+0x4>

0800b6bc <_calloc_r>:
 800b6bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b6be:	fba1 2402 	umull	r2, r4, r1, r2
 800b6c2:	b94c      	cbnz	r4, 800b6d8 <_calloc_r+0x1c>
 800b6c4:	4611      	mov	r1, r2
 800b6c6:	9201      	str	r2, [sp, #4]
 800b6c8:	f000 f87a 	bl	800b7c0 <_malloc_r>
 800b6cc:	9a01      	ldr	r2, [sp, #4]
 800b6ce:	4605      	mov	r5, r0
 800b6d0:	b930      	cbnz	r0, 800b6e0 <_calloc_r+0x24>
 800b6d2:	4628      	mov	r0, r5
 800b6d4:	b003      	add	sp, #12
 800b6d6:	bd30      	pop	{r4, r5, pc}
 800b6d8:	220c      	movs	r2, #12
 800b6da:	6002      	str	r2, [r0, #0]
 800b6dc:	2500      	movs	r5, #0
 800b6de:	e7f8      	b.n	800b6d2 <_calloc_r+0x16>
 800b6e0:	4621      	mov	r1, r4
 800b6e2:	f7ff ffe3 	bl	800b6ac <memset>
 800b6e6:	e7f4      	b.n	800b6d2 <_calloc_r+0x16>

0800b6e8 <_free_r>:
 800b6e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b6ea:	2900      	cmp	r1, #0
 800b6ec:	d044      	beq.n	800b778 <_free_r+0x90>
 800b6ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b6f2:	9001      	str	r0, [sp, #4]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	f1a1 0404 	sub.w	r4, r1, #4
 800b6fa:	bfb8      	it	lt
 800b6fc:	18e4      	addlt	r4, r4, r3
 800b6fe:	f000 f8e3 	bl	800b8c8 <__malloc_lock>
 800b702:	4a1e      	ldr	r2, [pc, #120]	; (800b77c <_free_r+0x94>)
 800b704:	9801      	ldr	r0, [sp, #4]
 800b706:	6813      	ldr	r3, [r2, #0]
 800b708:	b933      	cbnz	r3, 800b718 <_free_r+0x30>
 800b70a:	6063      	str	r3, [r4, #4]
 800b70c:	6014      	str	r4, [r2, #0]
 800b70e:	b003      	add	sp, #12
 800b710:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b714:	f000 b8de 	b.w	800b8d4 <__malloc_unlock>
 800b718:	42a3      	cmp	r3, r4
 800b71a:	d908      	bls.n	800b72e <_free_r+0x46>
 800b71c:	6825      	ldr	r5, [r4, #0]
 800b71e:	1961      	adds	r1, r4, r5
 800b720:	428b      	cmp	r3, r1
 800b722:	bf01      	itttt	eq
 800b724:	6819      	ldreq	r1, [r3, #0]
 800b726:	685b      	ldreq	r3, [r3, #4]
 800b728:	1949      	addeq	r1, r1, r5
 800b72a:	6021      	streq	r1, [r4, #0]
 800b72c:	e7ed      	b.n	800b70a <_free_r+0x22>
 800b72e:	461a      	mov	r2, r3
 800b730:	685b      	ldr	r3, [r3, #4]
 800b732:	b10b      	cbz	r3, 800b738 <_free_r+0x50>
 800b734:	42a3      	cmp	r3, r4
 800b736:	d9fa      	bls.n	800b72e <_free_r+0x46>
 800b738:	6811      	ldr	r1, [r2, #0]
 800b73a:	1855      	adds	r5, r2, r1
 800b73c:	42a5      	cmp	r5, r4
 800b73e:	d10b      	bne.n	800b758 <_free_r+0x70>
 800b740:	6824      	ldr	r4, [r4, #0]
 800b742:	4421      	add	r1, r4
 800b744:	1854      	adds	r4, r2, r1
 800b746:	42a3      	cmp	r3, r4
 800b748:	6011      	str	r1, [r2, #0]
 800b74a:	d1e0      	bne.n	800b70e <_free_r+0x26>
 800b74c:	681c      	ldr	r4, [r3, #0]
 800b74e:	685b      	ldr	r3, [r3, #4]
 800b750:	6053      	str	r3, [r2, #4]
 800b752:	4421      	add	r1, r4
 800b754:	6011      	str	r1, [r2, #0]
 800b756:	e7da      	b.n	800b70e <_free_r+0x26>
 800b758:	d902      	bls.n	800b760 <_free_r+0x78>
 800b75a:	230c      	movs	r3, #12
 800b75c:	6003      	str	r3, [r0, #0]
 800b75e:	e7d6      	b.n	800b70e <_free_r+0x26>
 800b760:	6825      	ldr	r5, [r4, #0]
 800b762:	1961      	adds	r1, r4, r5
 800b764:	428b      	cmp	r3, r1
 800b766:	bf04      	itt	eq
 800b768:	6819      	ldreq	r1, [r3, #0]
 800b76a:	685b      	ldreq	r3, [r3, #4]
 800b76c:	6063      	str	r3, [r4, #4]
 800b76e:	bf04      	itt	eq
 800b770:	1949      	addeq	r1, r1, r5
 800b772:	6021      	streq	r1, [r4, #0]
 800b774:	6054      	str	r4, [r2, #4]
 800b776:	e7ca      	b.n	800b70e <_free_r+0x26>
 800b778:	b003      	add	sp, #12
 800b77a:	bd30      	pop	{r4, r5, pc}
 800b77c:	20000d3c 	.word	0x20000d3c

0800b780 <sbrk_aligned>:
 800b780:	b570      	push	{r4, r5, r6, lr}
 800b782:	4e0e      	ldr	r6, [pc, #56]	; (800b7bc <sbrk_aligned+0x3c>)
 800b784:	460c      	mov	r4, r1
 800b786:	6831      	ldr	r1, [r6, #0]
 800b788:	4605      	mov	r5, r0
 800b78a:	b911      	cbnz	r1, 800b792 <sbrk_aligned+0x12>
 800b78c:	f000 f88c 	bl	800b8a8 <_sbrk_r>
 800b790:	6030      	str	r0, [r6, #0]
 800b792:	4621      	mov	r1, r4
 800b794:	4628      	mov	r0, r5
 800b796:	f000 f887 	bl	800b8a8 <_sbrk_r>
 800b79a:	1c43      	adds	r3, r0, #1
 800b79c:	d00a      	beq.n	800b7b4 <sbrk_aligned+0x34>
 800b79e:	1cc4      	adds	r4, r0, #3
 800b7a0:	f024 0403 	bic.w	r4, r4, #3
 800b7a4:	42a0      	cmp	r0, r4
 800b7a6:	d007      	beq.n	800b7b8 <sbrk_aligned+0x38>
 800b7a8:	1a21      	subs	r1, r4, r0
 800b7aa:	4628      	mov	r0, r5
 800b7ac:	f000 f87c 	bl	800b8a8 <_sbrk_r>
 800b7b0:	3001      	adds	r0, #1
 800b7b2:	d101      	bne.n	800b7b8 <sbrk_aligned+0x38>
 800b7b4:	f04f 34ff 	mov.w	r4, #4294967295
 800b7b8:	4620      	mov	r0, r4
 800b7ba:	bd70      	pop	{r4, r5, r6, pc}
 800b7bc:	20000d40 	.word	0x20000d40

0800b7c0 <_malloc_r>:
 800b7c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7c4:	1ccd      	adds	r5, r1, #3
 800b7c6:	f025 0503 	bic.w	r5, r5, #3
 800b7ca:	3508      	adds	r5, #8
 800b7cc:	2d0c      	cmp	r5, #12
 800b7ce:	bf38      	it	cc
 800b7d0:	250c      	movcc	r5, #12
 800b7d2:	2d00      	cmp	r5, #0
 800b7d4:	4607      	mov	r7, r0
 800b7d6:	db01      	blt.n	800b7dc <_malloc_r+0x1c>
 800b7d8:	42a9      	cmp	r1, r5
 800b7da:	d905      	bls.n	800b7e8 <_malloc_r+0x28>
 800b7dc:	230c      	movs	r3, #12
 800b7de:	603b      	str	r3, [r7, #0]
 800b7e0:	2600      	movs	r6, #0
 800b7e2:	4630      	mov	r0, r6
 800b7e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7e8:	4e2e      	ldr	r6, [pc, #184]	; (800b8a4 <_malloc_r+0xe4>)
 800b7ea:	f000 f86d 	bl	800b8c8 <__malloc_lock>
 800b7ee:	6833      	ldr	r3, [r6, #0]
 800b7f0:	461c      	mov	r4, r3
 800b7f2:	bb34      	cbnz	r4, 800b842 <_malloc_r+0x82>
 800b7f4:	4629      	mov	r1, r5
 800b7f6:	4638      	mov	r0, r7
 800b7f8:	f7ff ffc2 	bl	800b780 <sbrk_aligned>
 800b7fc:	1c43      	adds	r3, r0, #1
 800b7fe:	4604      	mov	r4, r0
 800b800:	d14d      	bne.n	800b89e <_malloc_r+0xde>
 800b802:	6834      	ldr	r4, [r6, #0]
 800b804:	4626      	mov	r6, r4
 800b806:	2e00      	cmp	r6, #0
 800b808:	d140      	bne.n	800b88c <_malloc_r+0xcc>
 800b80a:	6823      	ldr	r3, [r4, #0]
 800b80c:	4631      	mov	r1, r6
 800b80e:	4638      	mov	r0, r7
 800b810:	eb04 0803 	add.w	r8, r4, r3
 800b814:	f000 f848 	bl	800b8a8 <_sbrk_r>
 800b818:	4580      	cmp	r8, r0
 800b81a:	d13a      	bne.n	800b892 <_malloc_r+0xd2>
 800b81c:	6821      	ldr	r1, [r4, #0]
 800b81e:	3503      	adds	r5, #3
 800b820:	1a6d      	subs	r5, r5, r1
 800b822:	f025 0503 	bic.w	r5, r5, #3
 800b826:	3508      	adds	r5, #8
 800b828:	2d0c      	cmp	r5, #12
 800b82a:	bf38      	it	cc
 800b82c:	250c      	movcc	r5, #12
 800b82e:	4629      	mov	r1, r5
 800b830:	4638      	mov	r0, r7
 800b832:	f7ff ffa5 	bl	800b780 <sbrk_aligned>
 800b836:	3001      	adds	r0, #1
 800b838:	d02b      	beq.n	800b892 <_malloc_r+0xd2>
 800b83a:	6823      	ldr	r3, [r4, #0]
 800b83c:	442b      	add	r3, r5
 800b83e:	6023      	str	r3, [r4, #0]
 800b840:	e00e      	b.n	800b860 <_malloc_r+0xa0>
 800b842:	6822      	ldr	r2, [r4, #0]
 800b844:	1b52      	subs	r2, r2, r5
 800b846:	d41e      	bmi.n	800b886 <_malloc_r+0xc6>
 800b848:	2a0b      	cmp	r2, #11
 800b84a:	d916      	bls.n	800b87a <_malloc_r+0xba>
 800b84c:	1961      	adds	r1, r4, r5
 800b84e:	42a3      	cmp	r3, r4
 800b850:	6025      	str	r5, [r4, #0]
 800b852:	bf18      	it	ne
 800b854:	6059      	strne	r1, [r3, #4]
 800b856:	6863      	ldr	r3, [r4, #4]
 800b858:	bf08      	it	eq
 800b85a:	6031      	streq	r1, [r6, #0]
 800b85c:	5162      	str	r2, [r4, r5]
 800b85e:	604b      	str	r3, [r1, #4]
 800b860:	4638      	mov	r0, r7
 800b862:	f104 060b 	add.w	r6, r4, #11
 800b866:	f000 f835 	bl	800b8d4 <__malloc_unlock>
 800b86a:	f026 0607 	bic.w	r6, r6, #7
 800b86e:	1d23      	adds	r3, r4, #4
 800b870:	1af2      	subs	r2, r6, r3
 800b872:	d0b6      	beq.n	800b7e2 <_malloc_r+0x22>
 800b874:	1b9b      	subs	r3, r3, r6
 800b876:	50a3      	str	r3, [r4, r2]
 800b878:	e7b3      	b.n	800b7e2 <_malloc_r+0x22>
 800b87a:	6862      	ldr	r2, [r4, #4]
 800b87c:	42a3      	cmp	r3, r4
 800b87e:	bf0c      	ite	eq
 800b880:	6032      	streq	r2, [r6, #0]
 800b882:	605a      	strne	r2, [r3, #4]
 800b884:	e7ec      	b.n	800b860 <_malloc_r+0xa0>
 800b886:	4623      	mov	r3, r4
 800b888:	6864      	ldr	r4, [r4, #4]
 800b88a:	e7b2      	b.n	800b7f2 <_malloc_r+0x32>
 800b88c:	4634      	mov	r4, r6
 800b88e:	6876      	ldr	r6, [r6, #4]
 800b890:	e7b9      	b.n	800b806 <_malloc_r+0x46>
 800b892:	230c      	movs	r3, #12
 800b894:	603b      	str	r3, [r7, #0]
 800b896:	4638      	mov	r0, r7
 800b898:	f000 f81c 	bl	800b8d4 <__malloc_unlock>
 800b89c:	e7a1      	b.n	800b7e2 <_malloc_r+0x22>
 800b89e:	6025      	str	r5, [r4, #0]
 800b8a0:	e7de      	b.n	800b860 <_malloc_r+0xa0>
 800b8a2:	bf00      	nop
 800b8a4:	20000d3c 	.word	0x20000d3c

0800b8a8 <_sbrk_r>:
 800b8a8:	b538      	push	{r3, r4, r5, lr}
 800b8aa:	4d06      	ldr	r5, [pc, #24]	; (800b8c4 <_sbrk_r+0x1c>)
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	4604      	mov	r4, r0
 800b8b0:	4608      	mov	r0, r1
 800b8b2:	602b      	str	r3, [r5, #0]
 800b8b4:	f7f5 fedc 	bl	8001670 <_sbrk>
 800b8b8:	1c43      	adds	r3, r0, #1
 800b8ba:	d102      	bne.n	800b8c2 <_sbrk_r+0x1a>
 800b8bc:	682b      	ldr	r3, [r5, #0]
 800b8be:	b103      	cbz	r3, 800b8c2 <_sbrk_r+0x1a>
 800b8c0:	6023      	str	r3, [r4, #0]
 800b8c2:	bd38      	pop	{r3, r4, r5, pc}
 800b8c4:	20000d44 	.word	0x20000d44

0800b8c8 <__malloc_lock>:
 800b8c8:	4801      	ldr	r0, [pc, #4]	; (800b8d0 <__malloc_lock+0x8>)
 800b8ca:	f000 b809 	b.w	800b8e0 <__retarget_lock_acquire_recursive>
 800b8ce:	bf00      	nop
 800b8d0:	20000d48 	.word	0x20000d48

0800b8d4 <__malloc_unlock>:
 800b8d4:	4801      	ldr	r0, [pc, #4]	; (800b8dc <__malloc_unlock+0x8>)
 800b8d6:	f000 b804 	b.w	800b8e2 <__retarget_lock_release_recursive>
 800b8da:	bf00      	nop
 800b8dc:	20000d48 	.word	0x20000d48

0800b8e0 <__retarget_lock_acquire_recursive>:
 800b8e0:	4770      	bx	lr

0800b8e2 <__retarget_lock_release_recursive>:
 800b8e2:	4770      	bx	lr
 800b8e4:	0000      	movs	r0, r0
	...

0800b8e8 <exp>:
 800b8e8:	b538      	push	{r3, r4, r5, lr}
 800b8ea:	ed2d 8b02 	vpush	{d8}
 800b8ee:	ec55 4b10 	vmov	r4, r5, d0
 800b8f2:	f000 f841 	bl	800b978 <__ieee754_exp>
 800b8f6:	eeb0 8a40 	vmov.f32	s16, s0
 800b8fa:	eef0 8a60 	vmov.f32	s17, s1
 800b8fe:	ec45 4b10 	vmov	d0, r4, r5
 800b902:	f000 f9eb 	bl	800bcdc <finite>
 800b906:	b168      	cbz	r0, 800b924 <exp+0x3c>
 800b908:	a317      	add	r3, pc, #92	; (adr r3, 800b968 <exp+0x80>)
 800b90a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b90e:	4620      	mov	r0, r4
 800b910:	4629      	mov	r1, r5
 800b912:	f7f5 f8ad 	bl	8000a70 <__aeabi_dcmpgt>
 800b916:	b160      	cbz	r0, 800b932 <exp+0x4a>
 800b918:	f7ff fe80 	bl	800b61c <__errno>
 800b91c:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 800b958 <exp+0x70>
 800b920:	2322      	movs	r3, #34	; 0x22
 800b922:	6003      	str	r3, [r0, #0]
 800b924:	eeb0 0a48 	vmov.f32	s0, s16
 800b928:	eef0 0a68 	vmov.f32	s1, s17
 800b92c:	ecbd 8b02 	vpop	{d8}
 800b930:	bd38      	pop	{r3, r4, r5, pc}
 800b932:	a30f      	add	r3, pc, #60	; (adr r3, 800b970 <exp+0x88>)
 800b934:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b938:	4620      	mov	r0, r4
 800b93a:	4629      	mov	r1, r5
 800b93c:	f7f5 f87a 	bl	8000a34 <__aeabi_dcmplt>
 800b940:	2800      	cmp	r0, #0
 800b942:	d0ef      	beq.n	800b924 <exp+0x3c>
 800b944:	f7ff fe6a 	bl	800b61c <__errno>
 800b948:	2322      	movs	r3, #34	; 0x22
 800b94a:	ed9f 8b05 	vldr	d8, [pc, #20]	; 800b960 <exp+0x78>
 800b94e:	6003      	str	r3, [r0, #0]
 800b950:	e7e8      	b.n	800b924 <exp+0x3c>
 800b952:	bf00      	nop
 800b954:	f3af 8000 	nop.w
 800b958:	00000000 	.word	0x00000000
 800b95c:	7ff00000 	.word	0x7ff00000
	...
 800b968:	fefa39ef 	.word	0xfefa39ef
 800b96c:	40862e42 	.word	0x40862e42
 800b970:	d52d3051 	.word	0xd52d3051
 800b974:	c0874910 	.word	0xc0874910

0800b978 <__ieee754_exp>:
 800b978:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b97c:	ec55 4b10 	vmov	r4, r5, d0
 800b980:	49b5      	ldr	r1, [pc, #724]	; (800bc58 <__ieee754_exp+0x2e0>)
 800b982:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b986:	428b      	cmp	r3, r1
 800b988:	ed2d 8b04 	vpush	{d8-d9}
 800b98c:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 800b990:	d93d      	bls.n	800ba0e <__ieee754_exp+0x96>
 800b992:	49b2      	ldr	r1, [pc, #712]	; (800bc5c <__ieee754_exp+0x2e4>)
 800b994:	428b      	cmp	r3, r1
 800b996:	d918      	bls.n	800b9ca <__ieee754_exp+0x52>
 800b998:	ee10 3a10 	vmov	r3, s0
 800b99c:	f3c5 0213 	ubfx	r2, r5, #0, #20
 800b9a0:	4313      	orrs	r3, r2
 800b9a2:	d009      	beq.n	800b9b8 <__ieee754_exp+0x40>
 800b9a4:	ee10 2a10 	vmov	r2, s0
 800b9a8:	462b      	mov	r3, r5
 800b9aa:	4620      	mov	r0, r4
 800b9ac:	4629      	mov	r1, r5
 800b9ae:	f7f4 fc19 	bl	80001e4 <__adddf3>
 800b9b2:	4604      	mov	r4, r0
 800b9b4:	460d      	mov	r5, r1
 800b9b6:	e002      	b.n	800b9be <__ieee754_exp+0x46>
 800b9b8:	b10e      	cbz	r6, 800b9be <__ieee754_exp+0x46>
 800b9ba:	2400      	movs	r4, #0
 800b9bc:	2500      	movs	r5, #0
 800b9be:	ecbd 8b04 	vpop	{d8-d9}
 800b9c2:	ec45 4b10 	vmov	d0, r4, r5
 800b9c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9ca:	a38d      	add	r3, pc, #564	; (adr r3, 800bc00 <__ieee754_exp+0x288>)
 800b9cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9d0:	ee10 0a10 	vmov	r0, s0
 800b9d4:	4629      	mov	r1, r5
 800b9d6:	f7f5 f84b 	bl	8000a70 <__aeabi_dcmpgt>
 800b9da:	4607      	mov	r7, r0
 800b9dc:	b130      	cbz	r0, 800b9ec <__ieee754_exp+0x74>
 800b9de:	ecbd 8b04 	vpop	{d8-d9}
 800b9e2:	2000      	movs	r0, #0
 800b9e4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b9e8:	f000 b96f 	b.w	800bcca <__math_oflow>
 800b9ec:	a386      	add	r3, pc, #536	; (adr r3, 800bc08 <__ieee754_exp+0x290>)
 800b9ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9f2:	4620      	mov	r0, r4
 800b9f4:	4629      	mov	r1, r5
 800b9f6:	f7f5 f81d 	bl	8000a34 <__aeabi_dcmplt>
 800b9fa:	2800      	cmp	r0, #0
 800b9fc:	f000 808b 	beq.w	800bb16 <__ieee754_exp+0x19e>
 800ba00:	ecbd 8b04 	vpop	{d8-d9}
 800ba04:	4638      	mov	r0, r7
 800ba06:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba0a:	f000 b955 	b.w	800bcb8 <__math_uflow>
 800ba0e:	4a94      	ldr	r2, [pc, #592]	; (800bc60 <__ieee754_exp+0x2e8>)
 800ba10:	4293      	cmp	r3, r2
 800ba12:	f240 80ac 	bls.w	800bb6e <__ieee754_exp+0x1f6>
 800ba16:	4a93      	ldr	r2, [pc, #588]	; (800bc64 <__ieee754_exp+0x2ec>)
 800ba18:	4293      	cmp	r3, r2
 800ba1a:	d87c      	bhi.n	800bb16 <__ieee754_exp+0x19e>
 800ba1c:	4b92      	ldr	r3, [pc, #584]	; (800bc68 <__ieee754_exp+0x2f0>)
 800ba1e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ba22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba26:	ee10 0a10 	vmov	r0, s0
 800ba2a:	4629      	mov	r1, r5
 800ba2c:	f7f4 fbd8 	bl	80001e0 <__aeabi_dsub>
 800ba30:	4b8e      	ldr	r3, [pc, #568]	; (800bc6c <__ieee754_exp+0x2f4>)
 800ba32:	00f7      	lsls	r7, r6, #3
 800ba34:	443b      	add	r3, r7
 800ba36:	ed93 7b00 	vldr	d7, [r3]
 800ba3a:	f1c6 0a01 	rsb	sl, r6, #1
 800ba3e:	4680      	mov	r8, r0
 800ba40:	4689      	mov	r9, r1
 800ba42:	ebaa 0a06 	sub.w	sl, sl, r6
 800ba46:	eeb0 8a47 	vmov.f32	s16, s14
 800ba4a:	eef0 8a67 	vmov.f32	s17, s15
 800ba4e:	ec53 2b18 	vmov	r2, r3, d8
 800ba52:	4640      	mov	r0, r8
 800ba54:	4649      	mov	r1, r9
 800ba56:	f7f4 fbc3 	bl	80001e0 <__aeabi_dsub>
 800ba5a:	4604      	mov	r4, r0
 800ba5c:	460d      	mov	r5, r1
 800ba5e:	4622      	mov	r2, r4
 800ba60:	462b      	mov	r3, r5
 800ba62:	4620      	mov	r0, r4
 800ba64:	4629      	mov	r1, r5
 800ba66:	f7f4 fd73 	bl	8000550 <__aeabi_dmul>
 800ba6a:	a369      	add	r3, pc, #420	; (adr r3, 800bc10 <__ieee754_exp+0x298>)
 800ba6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba70:	4606      	mov	r6, r0
 800ba72:	460f      	mov	r7, r1
 800ba74:	f7f4 fd6c 	bl	8000550 <__aeabi_dmul>
 800ba78:	a367      	add	r3, pc, #412	; (adr r3, 800bc18 <__ieee754_exp+0x2a0>)
 800ba7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba7e:	f7f4 fbaf 	bl	80001e0 <__aeabi_dsub>
 800ba82:	4632      	mov	r2, r6
 800ba84:	463b      	mov	r3, r7
 800ba86:	f7f4 fd63 	bl	8000550 <__aeabi_dmul>
 800ba8a:	a365      	add	r3, pc, #404	; (adr r3, 800bc20 <__ieee754_exp+0x2a8>)
 800ba8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba90:	f7f4 fba8 	bl	80001e4 <__adddf3>
 800ba94:	4632      	mov	r2, r6
 800ba96:	463b      	mov	r3, r7
 800ba98:	f7f4 fd5a 	bl	8000550 <__aeabi_dmul>
 800ba9c:	a362      	add	r3, pc, #392	; (adr r3, 800bc28 <__ieee754_exp+0x2b0>)
 800ba9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baa2:	f7f4 fb9d 	bl	80001e0 <__aeabi_dsub>
 800baa6:	4632      	mov	r2, r6
 800baa8:	463b      	mov	r3, r7
 800baaa:	f7f4 fd51 	bl	8000550 <__aeabi_dmul>
 800baae:	a360      	add	r3, pc, #384	; (adr r3, 800bc30 <__ieee754_exp+0x2b8>)
 800bab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bab4:	f7f4 fb96 	bl	80001e4 <__adddf3>
 800bab8:	4632      	mov	r2, r6
 800baba:	463b      	mov	r3, r7
 800babc:	f7f4 fd48 	bl	8000550 <__aeabi_dmul>
 800bac0:	4602      	mov	r2, r0
 800bac2:	460b      	mov	r3, r1
 800bac4:	4620      	mov	r0, r4
 800bac6:	4629      	mov	r1, r5
 800bac8:	f7f4 fb8a 	bl	80001e0 <__aeabi_dsub>
 800bacc:	4602      	mov	r2, r0
 800bace:	460b      	mov	r3, r1
 800bad0:	4606      	mov	r6, r0
 800bad2:	460f      	mov	r7, r1
 800bad4:	4620      	mov	r0, r4
 800bad6:	4629      	mov	r1, r5
 800bad8:	f7f4 fd3a 	bl	8000550 <__aeabi_dmul>
 800badc:	ec41 0b19 	vmov	d9, r0, r1
 800bae0:	f1ba 0f00 	cmp.w	sl, #0
 800bae4:	d15d      	bne.n	800bba2 <__ieee754_exp+0x22a>
 800bae6:	2200      	movs	r2, #0
 800bae8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800baec:	4630      	mov	r0, r6
 800baee:	4639      	mov	r1, r7
 800baf0:	f7f4 fb76 	bl	80001e0 <__aeabi_dsub>
 800baf4:	4602      	mov	r2, r0
 800baf6:	460b      	mov	r3, r1
 800baf8:	ec51 0b19 	vmov	r0, r1, d9
 800bafc:	f7f4 fe52 	bl	80007a4 <__aeabi_ddiv>
 800bb00:	4622      	mov	r2, r4
 800bb02:	462b      	mov	r3, r5
 800bb04:	f7f4 fb6c 	bl	80001e0 <__aeabi_dsub>
 800bb08:	4602      	mov	r2, r0
 800bb0a:	460b      	mov	r3, r1
 800bb0c:	2000      	movs	r0, #0
 800bb0e:	4958      	ldr	r1, [pc, #352]	; (800bc70 <__ieee754_exp+0x2f8>)
 800bb10:	f7f4 fb66 	bl	80001e0 <__aeabi_dsub>
 800bb14:	e74d      	b.n	800b9b2 <__ieee754_exp+0x3a>
 800bb16:	4857      	ldr	r0, [pc, #348]	; (800bc74 <__ieee754_exp+0x2fc>)
 800bb18:	a347      	add	r3, pc, #284	; (adr r3, 800bc38 <__ieee754_exp+0x2c0>)
 800bb1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb1e:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800bb22:	4629      	mov	r1, r5
 800bb24:	4620      	mov	r0, r4
 800bb26:	f7f4 fd13 	bl	8000550 <__aeabi_dmul>
 800bb2a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bb2e:	f7f4 fb59 	bl	80001e4 <__adddf3>
 800bb32:	f7f4 ffa7 	bl	8000a84 <__aeabi_d2iz>
 800bb36:	4682      	mov	sl, r0
 800bb38:	f7f4 fca0 	bl	800047c <__aeabi_i2d>
 800bb3c:	a340      	add	r3, pc, #256	; (adr r3, 800bc40 <__ieee754_exp+0x2c8>)
 800bb3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb42:	4606      	mov	r6, r0
 800bb44:	460f      	mov	r7, r1
 800bb46:	f7f4 fd03 	bl	8000550 <__aeabi_dmul>
 800bb4a:	4602      	mov	r2, r0
 800bb4c:	460b      	mov	r3, r1
 800bb4e:	4620      	mov	r0, r4
 800bb50:	4629      	mov	r1, r5
 800bb52:	f7f4 fb45 	bl	80001e0 <__aeabi_dsub>
 800bb56:	a33c      	add	r3, pc, #240	; (adr r3, 800bc48 <__ieee754_exp+0x2d0>)
 800bb58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb5c:	4680      	mov	r8, r0
 800bb5e:	4689      	mov	r9, r1
 800bb60:	4630      	mov	r0, r6
 800bb62:	4639      	mov	r1, r7
 800bb64:	f7f4 fcf4 	bl	8000550 <__aeabi_dmul>
 800bb68:	ec41 0b18 	vmov	d8, r0, r1
 800bb6c:	e76f      	b.n	800ba4e <__ieee754_exp+0xd6>
 800bb6e:	4a42      	ldr	r2, [pc, #264]	; (800bc78 <__ieee754_exp+0x300>)
 800bb70:	4293      	cmp	r3, r2
 800bb72:	d811      	bhi.n	800bb98 <__ieee754_exp+0x220>
 800bb74:	a336      	add	r3, pc, #216	; (adr r3, 800bc50 <__ieee754_exp+0x2d8>)
 800bb76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb7a:	ee10 0a10 	vmov	r0, s0
 800bb7e:	4629      	mov	r1, r5
 800bb80:	f7f4 fb30 	bl	80001e4 <__adddf3>
 800bb84:	4b3a      	ldr	r3, [pc, #232]	; (800bc70 <__ieee754_exp+0x2f8>)
 800bb86:	2200      	movs	r2, #0
 800bb88:	f7f4 ff72 	bl	8000a70 <__aeabi_dcmpgt>
 800bb8c:	b138      	cbz	r0, 800bb9e <__ieee754_exp+0x226>
 800bb8e:	4b38      	ldr	r3, [pc, #224]	; (800bc70 <__ieee754_exp+0x2f8>)
 800bb90:	2200      	movs	r2, #0
 800bb92:	4620      	mov	r0, r4
 800bb94:	4629      	mov	r1, r5
 800bb96:	e70a      	b.n	800b9ae <__ieee754_exp+0x36>
 800bb98:	f04f 0a00 	mov.w	sl, #0
 800bb9c:	e75f      	b.n	800ba5e <__ieee754_exp+0xe6>
 800bb9e:	4682      	mov	sl, r0
 800bba0:	e75d      	b.n	800ba5e <__ieee754_exp+0xe6>
 800bba2:	4632      	mov	r2, r6
 800bba4:	463b      	mov	r3, r7
 800bba6:	2000      	movs	r0, #0
 800bba8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800bbac:	f7f4 fb18 	bl	80001e0 <__aeabi_dsub>
 800bbb0:	4602      	mov	r2, r0
 800bbb2:	460b      	mov	r3, r1
 800bbb4:	ec51 0b19 	vmov	r0, r1, d9
 800bbb8:	f7f4 fdf4 	bl	80007a4 <__aeabi_ddiv>
 800bbbc:	4602      	mov	r2, r0
 800bbbe:	460b      	mov	r3, r1
 800bbc0:	ec51 0b18 	vmov	r0, r1, d8
 800bbc4:	f7f4 fb0c 	bl	80001e0 <__aeabi_dsub>
 800bbc8:	4642      	mov	r2, r8
 800bbca:	464b      	mov	r3, r9
 800bbcc:	f7f4 fb08 	bl	80001e0 <__aeabi_dsub>
 800bbd0:	4602      	mov	r2, r0
 800bbd2:	460b      	mov	r3, r1
 800bbd4:	2000      	movs	r0, #0
 800bbd6:	4926      	ldr	r1, [pc, #152]	; (800bc70 <__ieee754_exp+0x2f8>)
 800bbd8:	f7f4 fb02 	bl	80001e0 <__aeabi_dsub>
 800bbdc:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 800bbe0:	4592      	cmp	sl, r2
 800bbe2:	db02      	blt.n	800bbea <__ieee754_exp+0x272>
 800bbe4:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800bbe8:	e6e3      	b.n	800b9b2 <__ieee754_exp+0x3a>
 800bbea:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 800bbee:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800bbf2:	2200      	movs	r2, #0
 800bbf4:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 800bbf8:	f7f4 fcaa 	bl	8000550 <__aeabi_dmul>
 800bbfc:	e6d9      	b.n	800b9b2 <__ieee754_exp+0x3a>
 800bbfe:	bf00      	nop
 800bc00:	fefa39ef 	.word	0xfefa39ef
 800bc04:	40862e42 	.word	0x40862e42
 800bc08:	d52d3051 	.word	0xd52d3051
 800bc0c:	c0874910 	.word	0xc0874910
 800bc10:	72bea4d0 	.word	0x72bea4d0
 800bc14:	3e663769 	.word	0x3e663769
 800bc18:	c5d26bf1 	.word	0xc5d26bf1
 800bc1c:	3ebbbd41 	.word	0x3ebbbd41
 800bc20:	af25de2c 	.word	0xaf25de2c
 800bc24:	3f11566a 	.word	0x3f11566a
 800bc28:	16bebd93 	.word	0x16bebd93
 800bc2c:	3f66c16c 	.word	0x3f66c16c
 800bc30:	5555553e 	.word	0x5555553e
 800bc34:	3fc55555 	.word	0x3fc55555
 800bc38:	652b82fe 	.word	0x652b82fe
 800bc3c:	3ff71547 	.word	0x3ff71547
 800bc40:	fee00000 	.word	0xfee00000
 800bc44:	3fe62e42 	.word	0x3fe62e42
 800bc48:	35793c76 	.word	0x35793c76
 800bc4c:	3dea39ef 	.word	0x3dea39ef
 800bc50:	8800759c 	.word	0x8800759c
 800bc54:	7e37e43c 	.word	0x7e37e43c
 800bc58:	40862e41 	.word	0x40862e41
 800bc5c:	7fefffff 	.word	0x7fefffff
 800bc60:	3fd62e42 	.word	0x3fd62e42
 800bc64:	3ff0a2b1 	.word	0x3ff0a2b1
 800bc68:	0800bd60 	.word	0x0800bd60
 800bc6c:	0800bd70 	.word	0x0800bd70
 800bc70:	3ff00000 	.word	0x3ff00000
 800bc74:	0800bd50 	.word	0x0800bd50
 800bc78:	3defffff 	.word	0x3defffff

0800bc7c <with_errno>:
 800bc7c:	b570      	push	{r4, r5, r6, lr}
 800bc7e:	4604      	mov	r4, r0
 800bc80:	460d      	mov	r5, r1
 800bc82:	4616      	mov	r6, r2
 800bc84:	f7ff fcca 	bl	800b61c <__errno>
 800bc88:	4629      	mov	r1, r5
 800bc8a:	6006      	str	r6, [r0, #0]
 800bc8c:	4620      	mov	r0, r4
 800bc8e:	bd70      	pop	{r4, r5, r6, pc}

0800bc90 <xflow>:
 800bc90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bc92:	4614      	mov	r4, r2
 800bc94:	461d      	mov	r5, r3
 800bc96:	b108      	cbz	r0, 800bc9c <xflow+0xc>
 800bc98:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800bc9c:	e9cd 2300 	strd	r2, r3, [sp]
 800bca0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bca4:	4620      	mov	r0, r4
 800bca6:	4629      	mov	r1, r5
 800bca8:	f7f4 fc52 	bl	8000550 <__aeabi_dmul>
 800bcac:	2222      	movs	r2, #34	; 0x22
 800bcae:	b003      	add	sp, #12
 800bcb0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bcb4:	f7ff bfe2 	b.w	800bc7c <with_errno>

0800bcb8 <__math_uflow>:
 800bcb8:	b508      	push	{r3, lr}
 800bcba:	2200      	movs	r2, #0
 800bcbc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800bcc0:	f7ff ffe6 	bl	800bc90 <xflow>
 800bcc4:	ec41 0b10 	vmov	d0, r0, r1
 800bcc8:	bd08      	pop	{r3, pc}

0800bcca <__math_oflow>:
 800bcca:	b508      	push	{r3, lr}
 800bccc:	2200      	movs	r2, #0
 800bcce:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800bcd2:	f7ff ffdd 	bl	800bc90 <xflow>
 800bcd6:	ec41 0b10 	vmov	d0, r0, r1
 800bcda:	bd08      	pop	{r3, pc}

0800bcdc <finite>:
 800bcdc:	b082      	sub	sp, #8
 800bcde:	ed8d 0b00 	vstr	d0, [sp]
 800bce2:	9801      	ldr	r0, [sp, #4]
 800bce4:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800bce8:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800bcec:	0fc0      	lsrs	r0, r0, #31
 800bcee:	b002      	add	sp, #8
 800bcf0:	4770      	bx	lr
	...

0800bcf4 <_init>:
 800bcf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcf6:	bf00      	nop
 800bcf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bcfa:	bc08      	pop	{r3}
 800bcfc:	469e      	mov	lr, r3
 800bcfe:	4770      	bx	lr

0800bd00 <_fini>:
 800bd00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd02:	bf00      	nop
 800bd04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd06:	bc08      	pop	{r3}
 800bd08:	469e      	mov	lr, r3
 800bd0a:	4770      	bx	lr
